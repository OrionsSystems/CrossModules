@namespace Orions.Systems.CrossModules.Desi.Components.TaggingSurface
@using Orions.Common;
@inherits VideoPlayerBase

<div class="tagging-video-player-container">
	<FrameCounter 
				  CurrentFrame="@CurrentFrameIndex"
				  CurrentPosition="CurrentPosition"
				  TotalFrames="TotalFrames"
				  CurrentPositionHyperId="MediaInstance.CurrentPosition"
				  OnGoToPreviousFrame="GoToPreviousFrame"
				  OnGoToNextFrame="GoToNextFrame"
				  />
	<div @onclick="() => this.Pause()" class="video-player">
		<video id="@_videoElementId" class="video-js vjs-default-skin"> </video>
	</div>
	<VideoPlaybackControl
						  OnPlay="this.Play"
						  OnPause="() => this.Pause(true)"
						  OnPositionChanged="this.OnPlaybackControlPositionChanged"
						  OnVolumeLevelChanged="this.ChangeVolumeLevel"
						  OnPlaybackSpeedChanged="this.ChangePlaybackSpeed"
						  PlaybackSpeed="this.PlaybackSpeed"
						  IsPlaying="!this.Paused"
						  CurrentTimePosition="this.CurrentPosition"
						  TotalDuration="this.TotalDuration"
						  VolumeLevel="VolumeLevel"
						  TimelineMarkers="TimelineMarkers"
						  TrackingSequenceStartMarkers="TrackingSequenceStartMarkers"
						  TrackingSequenceEndMarkers="TrackingSequenceEndMarkers"
						  IntermediateElementsMarkers="IntermediateElementsMarkers"
						  CurrentSelectedTrackingSequenceBoundaries="CurrentSelectedTrackingSequenceBoundaries"
						/>
	@if ((CurrentFrameIsLoading && Paused) || ((IsVideoLoading || IsVideoBuffering) && !Paused))
	{
		var bufferingClass = IsVideoBuffering ? "transparent" : "";
		<div class="video-player-overlay @bufferingClass">
			<div class="overlay-message">
			@if (CurrentFrameIsLoading)
			{
				@("Loading frame image...")
			}
			else if (IsVideoLoading || IsVideoBuffering)
			{
				@("Buffering video...")
			}
			</div>
			<DotsLoader CssClass="video-overlay-dots-loader"/>
		</div>
	}
</div>
