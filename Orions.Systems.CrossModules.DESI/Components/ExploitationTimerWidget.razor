@using Orions.Systems.Desi.Common.TaskExploitation;
@using System.Threading;

<div class="mission-title">
    Batch time left: @(TaskDataStore.Data.CurrentTask?.ExecutionTimeLeft.ToString(@"mm\:ss") ?? string.Empty)
</div>

@inherits BaseComponent;

@code {
    private CancellationTokenSource _cts;

    [Parameter]
    public ITaskDataStore TaskDataStore { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _cts = new CancellationTokenSource();
        while (!_cts.IsCancellationRequested)
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(1), _cts.Token);
                UpdateState();
            }
            catch { }
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _cts.Cancel();
        }
        base.Dispose(disposing);
    }
}
