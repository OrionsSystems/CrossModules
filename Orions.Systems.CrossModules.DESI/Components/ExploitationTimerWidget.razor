@inherits BaseComponent
@using Orions.Systems.Desi.Common.TaskExploitation;
@using System.Threading;
@using System.Reactive.Linq;
@using Systems.Desi.Common.Models;

<div class="mission-title">
    Batch time left: @(TaskDataStore.Data.CurrentTask?.ExecutionTimeLeft.ToString(@"mm\:ss") ?? string.Empty)
</div>

@code {
	private IDisposable _currentTaskChangedSub;
	private IDisposable _executionTimeLeftChangedSub;

	private ITaskDataStore _taskDataStore;

	[Parameter]
	public ITaskDataStore TaskDataStore
	{
		get { return _taskDataStore; }
		set
		{
			SetProperty(ref _taskDataStore, value, () =>
			{

				var currentTaskChangedSub = _taskDataStore?.Data?.CurrentTaskChanged.Subscribe(_ =>
				{
					var executionTimeLeftChangedSub = _taskDataStore?.Data?.CurrentTask?
						.GetPropertyChangedObservable()
						.Where(i => i.EventArgs.PropertyName == nameof(TaskModel.ExecutionTimeLeft))
						.Subscribe(_ => UpdateState());

					if(executionTimeLeftChangedSub != null)
					{
						_executionTimeLeftChangedSub?.Dispose();
						_executionTimeLeftChangedSub = executionTimeLeftChangedSub;
					}
				});
				if(currentTaskChangedSub != null)
				{
					_currentTaskChangedSub?.Dispose();
					_currentTaskChangedSub = currentTaskChangedSub;
				}

				var executionTimeLeftChangedSub = _taskDataStore?.Data?.CurrentTask?
					.GetPropertyChangedObservable()
					.Where(i => i.EventArgs.PropertyName == nameof(TaskModel.ExecutionTimeLeft))
					.Subscribe(_ => UpdateState());

				if(executionTimeLeftChangedSub != null)
				{
					_executionTimeLeftChangedSub?.Dispose();
					_executionTimeLeftChangedSub = executionTimeLeftChangedSub;
				}
			});
		}
	}


	//protected override async Task OnInitializedAsyncSafe()
	//{
	//	RunTimer();
	//}

	//private async Task RunTimer()
	//{
	//	_cts = new CancellationTokenSource();
	//	while (!_cts.IsCancellationRequested)
	//	{
	//		try
	//		{
	//			await Task.Delay(TimeSpan.FromSeconds(1), _cts.Token);
	//			UpdateState();
	//		}
	//		catch { }
	//	}
	//}

	protected override void Dispose(bool disposing)
	{
		_currentTaskChangedSub?.Dispose();
		_executionTimeLeftChangedSub?.Dispose();
		
		base.Dispose(disposing);
	}
}
