@namespace Orions.Systems.CrossModules.Desi.Components.TagPreview
@using Orions.Systems.CrossModules.Desi.Infrastructure
@using Orions.Systems.Desi.Core.ViewModels;
@using Orions.Systems.Desi.Common.Extensions;
@using Orions.Infrastructure.HyperMedia;
@using Orions.Common;

@inherits TagPreviewControlBase

@if (this.TagData != null)
{
	<div class="tag-preview-control-container">
		@if (this.TagData == null || this.TagData.CurrentTaskTags.Count == 0)
		{
			<div class="user-manual">
				<div class="header">
					How it works
				</div>
				<div class="contents">
					<p>
						Press space to play/pause video segment
					</p>
					<p>
						Click objects of interest in the video to create tag
					</p>
					<p>
						Toggle through segments using top bar to continue tagging
					</p>
					<p>
						Scrub between frames in the segment timeline using left and right arrow keys
					</p>
				</div>
			</div>
		}
		else
		{
			var tagIsSelectedClass = "";
			@foreach (var tag in this.TagData.CurrentTaskTags)
			{
				{
					tagIsSelectedClass = tag.IsSelected ? "active" : "";
				}
				<div class="tag-container @tagIsSelectedClass" @onclick="() => this.SelectItem(tag)">
					<div class="tagonomy-info">
						<div class="left-column">
							@if (tag.TagKind != Systems.Desi.Common.Models.TagKind.NA)
							{
								<div class="header">
									Current tagonomy
								</div>
								<TagonomyExecutionResultView Label="@tag.LabelValue"
															 TagonomyExecutionResult="tag.TagonomyExecutionResult"/>
							}
							@if (!string.IsNullOrEmpty(tag.PreviousLabelValue))
							{
								<div class="header">
									Previous tagonomy/label
								</div>
								<TagonomyExecutionResultView Label="@tag.PreviousLabelValue"
															 TagonomyExecutionResult="tag.PreviousTagonomyExecutionResult"/>
							}
						</div>
						<div class="right-column">
							<div class="info-button">
								@{ 
									if(this.CurrentTagonomyInfoShown == tag.Id && this.TaskDataStore.Data.CurrentTask != null)
									{
										<TagonomyInfoPopup TaskInfo="this.TaskDataStore.Data.CurrentTask.TaskInfo" OnClose="() => CurrentTagonomyInfoShown = null"/>
									}
									<img src="images/outline_info_white_24dp.png" @onclick="() => CurrentTagonomyInfoShown = tag.Id" @onclick:stopPropagation="true"/>
								}
							</div>
						</div>
					</div>
					<div class="position-info">
						@{
							string tagPosition = $"{tag.TagHyperId.FragmentIdSimple}:{tag.TagHyperId.SliceIdSimple}";

						}
						Position: @tagPosition
					</div>
					<div class="thumbnail">
						@{
							var thumbnailSrc = tag.Thumbnail != null ? UniImage.ConvertByteArrayToBase64Url(tag.Thumbnail) : "";
						}
						<img src="@thumbnailSrc" class="img-no-error" />
					</div>
					<div class="buttons">
						<div class="button">
							<button @onclick="(MouseEventArgs e) => { this.EditTagCommand.Execute(tag); }" @onclick:stopPropagation="true">Edit</button>
						</div>
						@if (tag.TaggingSpecification.TagRemovalAllowed && tag.TagKind == Systems.Desi.Common.Models.TagKind.Regular)
						{
							<div class="button">
								<button @onclick="() => this.RemoveTagCommand.Execute(tag)" @onclick:stopPropagation="true">Remove</button>
							</div>
						}
					</div>
				</div>
			}
		}
	</div>
}