@using Orions.Systems.Desi.Common.Services;
@using Orions.Systems.Desi.Common.MissionsExploitation;
@using System.Reactive.Linq;

@inherits BaseComponent;

<div class="top-row">
    <img class="logo" src="images/desi_logo.png" />
    @if (CurrentLocation == Routes.Missions)
    {
        <button @onclick="_ => RefreshMissions()">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="48px" height="48px">
                <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z" />
                <path d="M0 0h24v24H0z" fill="none" />
            </svg>
        </button>
    }
</div>

@code {
    private IDisposable _locationChangedSub;


    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public BlazorDependencyResolver DependencyResolver { get; set; }

    private IMissionsExploitationController MissionsController => DependencyResolver.GetMissionsExploitationSystem().Controller;

    private string CurrentLocation { get; set; }

    protected override void OnInitializedSafe()
    {
        _locationChangedSub = Observable.FromEventPattern<EventHandler<LocationChangedEventArgs>, LocationChangedEventArgs>(
            i => NavigationManager.LocationChanged += i,
            i => NavigationManager.LocationChanged -= i)
            .Select(i => i.EventArgs.Location)
            .DistinctUntilChanged()
            .Subscribe(OnLocationChanged);

        OnLocationChanged(NavigationManager.Uri);
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _locationChangedSub.Dispose();
        }
        base.Dispose(disposing);
    }

    private void OnLocationChanged(string location)
    {
        if (location.Contains(Routes.Missions))
        {
            CurrentLocation = Routes.Missions;
        }
        else if (location.Contains(Routes.StageSelection))
        {
            CurrentLocation = Routes.StageSelection;
        }
        else if (location.Contains(Routes.Tagging))
        {
            CurrentLocation = Routes.Tagging;
        }
        else
        {
            CurrentLocation = Routes.Root;
        }
        UpdateState();
    }

    private void RefreshMissions()
    {
        MissionsController.Dispatch(FetchMissionsAction.Create());
    }
}