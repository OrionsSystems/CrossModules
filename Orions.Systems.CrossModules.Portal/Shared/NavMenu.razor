
@inherits BaseOrionsComponent

@inject NavigationManager navManager


<MatNavMenu Class="mat-nav">

	@if (Items != null && Items.Any())
	{
		@foreach (var item in Items)
		{
			<MatNavItem OnClick="@(async ev => await OnSelectNavigationItem(item))" Selected="@IsSelected(item)" title="@item.Description">
				@if (string.IsNullOrEmpty(item.ImageSource))
				{
					<MatIcon Icon="@item.MatIcon" Class="nav-mat-icon"></MatIcon>
				}
				else
				{
					<img src="@item.ImageSource" class="nav-img-src">
				}

				<div class="nav-label">@item.Label</div>
			</MatNavItem>
		}
	}

</MatNavMenu>

@if (string.IsNullOrWhiteSpace(Version) == false)
{
	<div class="version">
		<div class="ver-label">ver:</div>
		<div class="ver-value">@Version</div>
	</div>
}

@code{

	[Parameter]
	public List<NavMenuItem> Items { get; set; }

	[Parameter]
	public string Version { get; set; }

	[Parameter]
	public EventCallback<NavMenuItem> OnSelect { get; set; }

	private string CurrentLocation { get { return navManager.ToBaseRelativePath(navManager.Uri).ToString(); } }

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	private bool IsSelected(NavMenuItem item)
	{
		if (string.IsNullOrWhiteSpace(item.Address) && string.IsNullOrWhiteSpace(item.Alias)) return false;

		var place = string.IsNullOrWhiteSpace(item.Alias) ? item.Address : item.Alias;

		if (CurrentLocation.Contains(place)) return true;

		return false;
	}

	private async Task OnSelectNavigationItem(NavMenuItem item) {
		await OnSelect.InvokeAsync(item);
	}


}