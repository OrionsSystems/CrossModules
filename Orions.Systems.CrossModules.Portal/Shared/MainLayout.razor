@inherits LayoutComponentBase
@using Orions.Systems.CrossModules.Portal.Providers
@using Syncfusion.EJ2.Blazor.SplitButtons
@using Syncfusion.EJ2.Blazor.Navigations
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomSettingsProvider CustomSettingsProvider

<div class="control-section">
	<div class="col-lg-12 col-sm-12 col-md-12" id="sidebar-section">
		<div id="head">
			<div class="header">
				<div class="menu">
					<img alt="image" class="img-circle" src="/image/orions-logo-sm.png">
				</div>
				<div class="right-content">
					<EjsDropDownButton IconCss="e-icons e-message" Content="Theme">
						<DropDownButtonEvents ItemSelected="OnThemeSelected"></DropDownButtonEvents>
						<DropDownButtonItems>
							<DropDownButtonItem Id="Dark" Text="Dark"></DropDownButtonItem>
							<DropDownButtonItem Id="White" Text="White"></DropDownButtonItem>
						</DropDownButtonItems>
					</EjsDropDownButton>
					<AuthorizeView>
						<Authorized>
							<EjsDropDownButton Content="@context.User.Identity.Name">
								<DropDownButtonEvents ItemSelected="OnItemSelected"></DropDownButtonEvents>
								<DropDownButtonItems>
									<DropDownButtonItem Id="Logout" Text="Logout"></DropDownButtonItem>
								</DropDownButtonItems>
							</EjsDropDownButton>
						</Authorized>
					</AuthorizeView>
				</div>
			</div>
		</div>
		<EjsSidebar ID="dockSidebar" Type="Syncfusion.EJ2.Blazor.Navigations.SidebarType.Over" Target="#target" EnableDock="true" DockSize="60px">
			<ChildContent>
				<div class="content-area">
					<div class="dock">
						<NavMenu />
					</div>
				</div>
			</ChildContent>
		</EjsSidebar>
		<div id="target">
			<div class="sidebar-content">
				@Body
			</div>
		</div>
	</div>
</div>

@if (CurrentTheme == CustomSettingsProvider.THEME_DARK)
{
	<link href="css/theme/bootstrap/bootstrap-dark.css" rel="stylesheet" />
	<link href="css/theme/sync/material-dark.css" rel="stylesheet" />
	<link href="css/theme/md/all.css" rel="stylesheet" />
	<link href="css/theme/all.css" rel="stylesheet" />
	<link href="css/theme-dark.css" rel="stylesheet" />
}
else
{
	<link href="css/theme-white.css" rel="stylesheet" />
}

@code{

	private string CurrentTheme { get; set; }

	protected override async Task OnInitializedAsync()
	{
		CurrentTheme = await GetTheme();
		await base.OnInitializedAsync();
	}

	private async Task Logout()
	{
		await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogOut();

		NavigationManager.NavigateTo("/login");
	}

	private async Task<string> GetTheme()
	{
		var theme = await CustomSettingsProvider.GetParameter(CustomSettingsProvider.THEME_KEY);

		if (string.IsNullOrWhiteSpace(theme)) return CustomSettingsProvider.THEME_WHITE;

		return theme;
	}

	public async Task OnThemeSelected(Syncfusion.EJ2.Blazor.SplitButtons.MenuEventArgs args)
	{
		if (args.Element.ID.Equals(CustomSettingsProvider.THEME_DARK, StringComparison.InvariantCultureIgnoreCase))
		{
			await CustomSettingsProvider.SetParameter(CustomSettingsProvider.THEME_KEY, CustomSettingsProvider.THEME_DARK);
			CurrentTheme = CustomSettingsProvider.THEME_DARK;
		}

		if (args.Element.ID.Equals(CustomSettingsProvider.THEME_WHITE, StringComparison.InvariantCultureIgnoreCase))
		{
			await CustomSettingsProvider.SetParameter(CustomSettingsProvider.THEME_KEY, CustomSettingsProvider.THEME_WHITE);
			CurrentTheme = CustomSettingsProvider.THEME_WHITE;
		}
	}

	public async Task OnItemSelected(Syncfusion.EJ2.Blazor.SplitButtons.MenuEventArgs args)
	{
		if (args.Element.ID.Equals("Logout", StringComparison.InvariantCultureIgnoreCase))
		{
			await Logout();
		}
	}
}

<style>
	.e-message::before {
		content: '\e30d';
	}
</style>
