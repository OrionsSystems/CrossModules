@namespace Orions.Systems.CrossModules.Portal.Pages
@page "/visit"

@using Orions.Infrastructure.HyperMedia
@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor.DropDowns

@inherits PortalBaseComponent


<div class="row">
	<div class="col-lg-12">
		@*<TelerikComboBox Data="@FilterCategoryValues"
								  @bind-Value="@SelectedValue"
								  TextField="Label"
								  ValueField="Value"
								  AllowCustom="@IsCustom"
								  Placeholder="Select a category"
								  PopupHeight="">
			</TelerikComboBox>*@
		<div class="mapCategoryFilter">
			<EjsComboBox TValue="string" @bind-Value="SelectedValue"  @onchange="OnChangeFilterCategory" Placeholder="Select a category" DataSource="@FilterCategoryValues">
				<ComboBoxFieldSettings Text="Label" Value="Value"></ComboBoxFieldSettings>
			</EjsComboBox>
		</div>
	</div>
</div>
<div class="row">
	<div class="col-lg-12">
		<SVGMap SelectedCategory="@SelectedValue" OnSelectZone="SelectMapZone"></SVGMap>
	</div>
</div>


<div class="row">
	<div class="col-lg-12">
		@foreach (var data in SelectedZoneDashboardList)
		{
			<DashboardLayout Data="data"
								  EnableBetweenBox="true"
								  IsPreviewMode="true"
								  HideModeOption="true"
								  IsHideTitle="data.Option.IsHideTitle"
								  HyperStore="@HyperStore">
			</DashboardLayout>
		}
	</div>
</div>

@code {

	public List<DashboardData> SelectedZoneDashboardList { get; set; } = new List<DashboardData>();

	public IEnumerable<VisitMapCategory> FilterCategoryValues { get; } = new List<VisitMapCategory>
{
			new VisitMapCategory{ Value="BEAUTY__x26__PERSONAL_CARE", Label="Beauty & Personal Care" },
			new VisitMapCategory{ Value="BOOKS_CARDS__x26__GIFTS", Label="Books, Cards & Gifts" },
			new VisitMapCategory{ Value="CHILDREN_x27_S_APPAREL__x26__TOYS", Label="Children’s Apparel & Toys" },
			new VisitMapCategory{ Value="CINEMA_x2F_THEATRES", Label="Cinema" },
			new VisitMapCategory{ Value="DEPARTMENT_STORES", Label="Department Store" },
			new VisitMapCategory{ Value="FOOD__x26__BEVERAGES|all-restaurant", Label="Food & Beverages" },
			new VisitMapCategory{ Value="FOOTWEAR", Label="Footwear" },
			new VisitMapCategory{ Value="HANDBAGS__x26__LUGGAGE", Label="Handbags & Luggage" },
			new VisitMapCategory{ Value="HOME_FURNISHING", Label="Home Furnishings" },
			new VisitMapCategory{ Value="JEWLERY__x26__ACCESSORIES", Label="Jewelry & Accessories" },
			new VisitMapCategory{ Value="MEN_x27_S_APPAREL_x0A_", Label="Men’s Apparel" },
			new VisitMapCategory{ Value="TECHNOLOGY__x26__ELECTRONICS", Label="Technology & Electronics" },
			new VisitMapCategory{ Value="WOMENS_APPAREL", Label="Women’s Apparel" },
	 };
	public string SelectedValue { get; set; }

	public bool IsCustom
		  => FilterCategoryValues.FirstOrDefault(size => size.Value == SelectedValue) == null;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private async Task SelectMapZone(string tag)
	{
		var datas = await HyperStore.FindAllAsync<DashboardData>();

		SelectedZoneDashboardList = datas.Where(it => it.Option.Tag == tag).ToList();
	}

	private void OnChangeFilterCategory(ChangeEventArgs arg) {
		//TODO 
	}

	public class VisitMapCategory
	{
		public string Value { get; set; }
		public string Label { get; set; }
	}

}

<style>
	.mapCategoryFilter {
		width: 270px;
	}
</style>