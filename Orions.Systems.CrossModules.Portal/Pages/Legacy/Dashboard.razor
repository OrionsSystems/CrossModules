@namespace Orions.Systems.CrossModules.Portal.Pages

@page "/dashboards"
@page "/dashboard/{tag}"
@page "/dashboard/{DashboadId}/Id"

@inherits PortalBaseComponent

@layout Layout

@using Orions.Infrastructure.HyperMedia
@using Microsoft.AspNetCore.WebUtilities
@using Orions.Node.Common
@using Orions.Common

@if (IsDashboardListMode && isInit)
{
	<DashboardList HyperStore="@HyperStore"
						Filter="@Search"
						OnSelectTag="OnSelectTag"
						OnSelectDesign="OnSelectDesignDashboard"
						OnSelectView="OnSelectViewDashboard"
						OnSearch="OnSearch">
	</DashboardList>
}

@if (IsTagMode)
{
	@if (TaggedDashboardList.Any())
	{
		<div class="row">
			<div class="col-lg-12">
				@foreach (var data in TaggedDashboardList)
				{
					/* IMPORTANT WE NEED TO ASSIGN THE HYPER STORE FIRST */
					<DashboardLayout HyperStore="@HyperStore"
										  Data="data"
										  EnableBetweenBox="true"
										  IsPreviewMode="true"
										  HideModeOption="true"
										  IsHideTitle="data.IsHideTitle">
					</DashboardLayout>
				}
			</div>
		</div>
	}
	else
	{
		@if (isLoadedTaggedDashboard)
		{
			<div class="missed-tagged-dashboard">There isn't tagged dashboards!</div>
		}
	}

}

@if (IsDashboadMode)
{
	@if (Data != null)
	{
		<DashboardLayout HyperStore="@HyperStore"
							  Data="@Data"
							  EnableBetweenBox="true"
							  IsPreviewMode="@isShowViewDashboard"
							  DisableModeOption="false"
							  OnChangeMode="OnChangeMode"
							  OnBackToList="OnBackToList">
		</DashboardLayout>
	}
	else
	{
		<Loader></Loader>
	}
}


@code{

	private bool isShowViewDashboard;
	private bool isLoadedTaggedDashboard;
	private bool isInit;

	private DashboardData Data { get; set; }

	private bool IsTagMode { get { return string.IsNullOrWhiteSpace(Tag) == false; } }

	private bool IsDashboadMode { get { return string.IsNullOrWhiteSpace(DashboadId) == false; } }

	private bool IsDashboardListMode { get { return (string.IsNullOrWhiteSpace(Tag) && string.IsNullOrWhiteSpace(DashboadId)); } }

	private List<DashboardData> TaggedDashboardList { get; set; } = new List<DashboardData>();

	[Parameter]
	public string Tag { get; set; }

	[Parameter]
	public string DashboadId { get; set; }

	private string Mode { get; set; }

	private string Search { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("mode", out var _mode))
		{
			Mode = _mode.First();

			if (!string.IsNullOrWhiteSpace(Mode) && Mode == "view")
			{
				isShowViewDashboard = true;
			}
		}

		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var _search))
		{
			Search = _search.First();
		}

		if (IsTagMode && HyperStore != null)
		{
			await LoadTaggedDashboards(Tag);
		}

		if (IsDashboadMode && HyperStore != null)
		{
			await LoadDashboard(DashboadId);
		}

		isInit = true;
	}

	private void OnChangeMode(bool isPreviewMode)
	{
		isShowViewDashboard = isPreviewMode;

		var query = new Dictionary<string, string> { { "mode", isPreviewMode ? "view" : "design" } };
		var url = $"{NavigationManager.BaseUri}dashboard/{DashboadId}/Id";
		NavigationManager.NavigateTo(QueryHelpers.AddQueryString(url, query), false);
	}

	private void OnBackToList()
	{
		var url = $"{NavigationManager.BaseUri}dashboards";
		NavigationManager.NavigateTo(url, true);
	}

	private void OnSelectTag(string tag)
	{
		var url = $"{NavigationManager.BaseUri}dashboard/{tag}";
		NavigationManager.NavigateTo(url, true);
	}

	private void OnSelectDesignDashboard(string dashboardId)
	{
		var query = new Dictionary<string, string> { { "mode", "design" } };
		var url = $"{NavigationManager.BaseUri}dashboard/{dashboardId}/Id";
		NavigationManager.NavigateTo(QueryHelpers.AddQueryString(url, query), true);

		isShowViewDashboard = false;
	}

	private void OnSelectViewDashboard(string dashboardId)
	{
		var query = new Dictionary<string, string> { { "mode", "view" } };
		var url = $"{NavigationManager.BaseUri}dashboard/{dashboardId}/Id";
		NavigationManager.NavigateTo(QueryHelpers.AddQueryString(url, query), true);

		isShowViewDashboard = true;
	}

	private void OnSearch(string search)
	{
		Search = search;

		var url = $"{NavigationManager.BaseUri}dashboards";

		if (string.IsNullOrWhiteSpace(search))
		{
			NavigationManager.NavigateTo(url, false);
			return;
		}

		var query = new Dictionary<string, string> {
			{ "search", search } ,

		};

		NavigationManager.NavigateTo(QueryHelpers.AddQueryString(url, query), false);
	}

	private async Task LoadDashboard(string dashboardId)
	{
		var documentId = HyperDocumentId.Create<DashboardData>(dashboardId);
		var args = new RetrieveHyperDocumentArgs(documentId);
		var doc = await HyperStore.ExecuteAsync(args);

		if (args.ExecutionResult.IsNotSuccess)
			return;

		var dashboard = doc?.GetPayload<DashboardData>();
		Data = dashboard;
	}

	private async Task LoadTaggedDashboards(string tag)
	{
		TaggedDashboardList.Clear();

		var findDocArgs = new FindHyperDocumentsArgs(typeof(DashboardData), true);
		var conditions = new MultiScopeCondition(AndOr.Or);

		conditions.AddCondition(new ScopeCondition("Tag", tag));

		findDocArgs.DescriptorConditions = conditions;

		var documents = await HyperStore.ExecuteAsync(findDocArgs);

		if (!findDocArgs.ExecutionResult.IsNotSuccess || documents != null)
		{
			foreach (var doc in documents)
			{
				var dashboard = doc?.GetPayload<DashboardData>();

				if (dashboard != null) TaggedDashboardList.Add(dashboard);
			}
		}

		isLoadedTaggedDashboard = true;
	}
}

<style>
	.missed-tagged-dashboard {
		text-align: center;
		height: 50px;
		width: 100%;
		top: calc(50% + 25px);
		position: absolute;
		line-height: 50px;
		font-size: 24px;
		color: #d0caca;
	}
</style>
