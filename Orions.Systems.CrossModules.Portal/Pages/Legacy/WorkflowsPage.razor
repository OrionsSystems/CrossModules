@namespace Orions.Systems.CrossModules.Portal.Pages

@page "/workflows"
@page "/workflows/{WorkflowId}/instances"
@page "/workflows/{WorkflowStatusId}/history"

@inherits PortalBaseComponent

@layout Layout

@using Orions.Infrastructure.HyperMedia


@if (IsInstanceMode)
{
	<WorkflowInstanceList HyperStore="@HyperStore"
								 WorkflowId="@WorkflowId"
								 OnManageWorkflowInstance="@OnManageWorkflowInstance"
								 OnOpenWorkflowHistory="@OnOpenWorkflowHistory">
	</WorkflowInstanceList>
}
else if (IsHistoryMode)
{
	<WorkflowInstanceHistoryList HyperStore="@HyperStore"
										  WorkflowId="@WorkflowStatusId"></WorkflowInstanceHistoryList>
}
else
{
	<WorkflowList HyperStore="@HyperStore"
					  OnOpenWorkflowInstances="@OnOpenWorkflowInstances"
					  OnManageWorkflow="@OnManageWorkflow"></WorkflowList>
}

@code{

	[Parameter]
	public string WorkflowId { get; set; }

	[Parameter]
	public string WorkflowStatusId { get; set; }

	private bool IsInstanceMode { get { return string.IsNullOrWhiteSpace(WorkflowId) == false; } }

	private bool IsHistoryMode { get { return string.IsNullOrWhiteSpace(WorkflowStatusId) == false; } }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private async Task OnManageWorkflow(HyperWorkflow wf)
	{
		if (wf == null) return;

		var url = $"{NavigationManager.BaseUri}workflows/{wf.Id}/designer";

		await NavigateToUrlAsync(url, true);
	}

	private async Task OnOpenWorkflowInstances(HyperWorkflow wf)
	{
		if (wf == null) return;

		var url = $"{NavigationManager.BaseUri}workflows/{wf.Id}/instances";
		await NavigateToUrlAsync(url, false);
	}

	private async Task OnManageWorkflowInstance(HyperWorkflowStatus status)
	{
		if (status == null) return;

		var url = $"{NavigationManager.BaseUri}workflows/{status.Configuration.Id}/instance/{status.WorkflowInstanceId}/designer";
		await NavigateToUrlAsync(url, true);
	}

	private async Task OnOpenWorkflowHistory(HyperWorkflowStatus status)
	{
		if (status == null) return;

		var url = $"{NavigationManager.BaseUri}workflows/{status.Configuration.Id}/history";
		await NavigateToUrlAsync(url, false);
	}

}



