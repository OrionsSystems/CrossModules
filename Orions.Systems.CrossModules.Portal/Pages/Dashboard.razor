@namespace Orions.Systems.CrossModules.Portal.Pages
@page "/dashboard"
@page "/dashboard/{tag}"

@using Orions.Infrastructure.HyperMedia
@using Orions.Node.Common
@using Orions.Common

@inherits PortalBaseComponent

@inject IMatToaster Toaster

@if (IsTagMode)
{

	@if (TaggedDashboardList.Any())
	{
		<div class="row">
			<div class="col-lg-12">
				@foreach (var data in TaggedDashboardList)
				{
					/* IMPORTANT WE NEED TO ASSIGN THE HYPER STORE FIRST */
					<DashboardLayout HyperStore="@HyperStore"
										  Data="data"
										  EnableBetweenBox="true"
										  IsPreviewMode="true"
										  HideModeOption="true"
										  IsHideTitle="data.IsHideTitle">
					</DashboardLayout>
				}
			</div>
		</div>
	}
	else
	{
		@if (isLoadedTaggedDashboard)
		{
			<div class="missed-tagged-dashboard">There isn't tagged dashboards!</div>
		}
	}

}
else
{
	@if (isDashboardSelected)
	{
		<DashboardLayout HyperStore="@HyperStore"
							  Data="@Data"
							  EnableBetweenBox="true"
							  IsPreviewMode="@isShowViewDashboard"
							  DisableModeOption="false"
							  OnBackToList="ShowDashboardList">
		</DashboardLayout>
	}
	else
	{
		<DashboardList HyperStore="@HyperStore" OnSelectDesign="OnSelectDesignDashboard" OnSelectView="OnSelectViewDashboard"></DashboardList>
	}
}


@code{

	private bool isDashboardSelected;
	private bool isShowViewDashboard;
	private bool isLoadedTaggedDashboard;
	private DashboardData Data { get; set; }

	DashboardLayout _tagedDashboard;

	private bool IsTagMode { get { return !string.IsNullOrWhiteSpace(Tag); } }

	private List<DashboardData> TaggedDashboardList { get; set; } = new List<DashboardData>();

	[Parameter]
	public string Tag { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (IsTagMode && HyperStore != null)
		{
			await LoadTaggedDashboards(Tag);
		}
	}

	private void ShowDashboardList()
	{
		Data = null;
		isDashboardSelected = false;
	}

	private void OnSelectDesignDashboard(DashboardData data)
	{
		Data = data;
		isShowViewDashboard = false;
		isDashboardSelected = true;
	}

	private void OnSelectViewDashboard(DashboardData data)
	{
		Data = data;
		isShowViewDashboard = true;
		isDashboardSelected = true;

	}

	private async Task LoadTaggedDashboards(string tag)
	{
		TaggedDashboardList.Clear();

		var findDocArgs = new FindHyperDocumentsArgs(typeof(DashboardData), true);
		var conditions = new MultiScopeCondition(AndOr.Or);

		conditions.AddCondition(new ScopeCondition("Tag", tag));

		findDocArgs.DescriptorConditions = conditions;

		var documents = await HyperStore.ExecuteAsync(findDocArgs);

		if (!findDocArgs.ExecutionResult.IsNotSuccess || documents != null)
		{
			foreach (var doc in documents)
			{
				var dashboard = doc?.GetPayload<DashboardData>();

				if (dashboard != null) TaggedDashboardList.Add(dashboard);
			}
		}

		isLoadedTaggedDashboard = true;
	}

	private void ShowToaster(MatToastType type, string title, string message)
	{
		Toaster.Add(message, type, title, "", config =>
		{
			config.ShowCloseButton = false;
			config.ShowProgressBar = false;
			config.MaximumOpacity = 100;
		});
	}
}

<style>
	.missed-tagged-dashboard {
		text-align: center;
		height: 50px;
		width: 100%;
		top: calc(50% + 25px);
		position: absolute;
		line-height: 50px;
		font-size: 24px;
		color: #d0caca;
	}
</style>