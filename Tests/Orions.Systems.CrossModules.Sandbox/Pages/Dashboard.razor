@namespace Orions.Systems.CrossModules.Pages
@page "/"

@inherits BaseOrionsComponent

@inject IMatToaster Toaster

<DashboardLayout Data="Data"
                 AvailabelWidgets="AvailabaleWidgets"
                 EnableBetweenBox="true"
                 IsPreviewMode="false"
                 DisableModeOption="false"
                 Title="Dashboard Prototype"
                 OnSave="SaveChanges">
</DashboardLayout>

@code{

    private DashboardData Data { get; set; }

    private List<IDashboardWidget> AvailabaleWidgets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InitDashboard(); // load init data

        await base.OnInitializedAsync();
    }

    private void SaveChanges()
    {
        // Save dashboard data here

        ShowToaster(MatToastType.Success, "", "Save changes");
    }

    private void InitDashboard()
    {
        Data = new DashboardData();

        var row_1 = new DashboardRow();
        row_1.Columns.AddLast(new DashboardColumn { Size = 6, Widget = new DemoSmartChartWidget() });
        row_1.Columns.AddLast(new DashboardColumn { Size = 6 });
        Data.Rows.AddLast(row_1);

        var row_2 = new DashboardRow();
        row_2.Columns.AddLast(new DashboardColumn { Size = 4 });
        row_2.Columns.AddLast(new DashboardColumn
        {
            Size = 4,
            Widget = new SimpleHtmlWidget
            {
                Label = "Demo Analytics Description",
                RawHtml = @"<p>The Demo Analytics Chart / List widget is a colorful graphic presentation of key metrics from the website's Demo Analytics account, including integration with Ads campaigns. Data can be filtered by a variety of traffic metrics, dimensions, conversions, segments and events.</p>
<p>This widget can be added to White Label Client Dashboards and PDF Reports. In marketing dashboards you can set it to display at half or full page width. You can view a marketing dashboard sample that contains this and additional widgets (password is demo).</p>",
            }
        });
        row_2.Columns.AddLast(new DashboardColumn { Size = 4 });
        Data.Rows.AddLast(row_2);

        AvailabaleWidgets = new List<IDashboardWidget> {
            new DemoSmartChartWidget(),
            new SimpleHtmlWidget(),
            new DemoTagTreeMapWidget(),
            new ReportGridWidget(),
            new ReportPieChartWidget()
        };

    }

    private void ShowToaster(MatToastType type, string title, string message)
    {
        Toaster.Add(message, type, title, "", config =>
        {
            config.ShowCloseButton = false;
            config.ShowProgressBar = false;
            config.MaximumOpacity = 100;
        });
    }
}

<style>
    .top-row {
        display: none;
    }
</style>
