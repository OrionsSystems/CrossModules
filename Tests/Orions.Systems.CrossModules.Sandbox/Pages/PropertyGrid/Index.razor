@namespace Orions.Systems.CrossModules.Pages

@page "/property-grid/"


@using Orions.Infrastructure.HyperMedia;
@using Orions.Infrastructure.HyperSemantic;
@using ReactNOW.ML;

@inherits BaseOrionsComponent

@inject IMatToaster Toaster

<h5>Property Grid Test On Page</h5>

<select class="form-control" value="@SelectedObject.Value" @onchange="(eventArgs => { OnChangeTestPropObject(SelectedObject, eventArgs.Value); })">
    @foreach (var item in OptionObjects)
    {
        <option value="@item.Value">@item.Label</option>
    }
</select>
<p class="change-obj-desc">Change the property grid object.</p>

<hr />

<div class="card box-shadow">
    <div class="card-body">
        <PropertyGrid @ref="propGrid" Loader="GetDataAsync"
                      HyperStore="DataContext.Instance.NetStore"
                      OKVisible="true"
                      CancelVisible="true"
                      OkCommand="OnOkCommand"
                      CancelCommand="OnCancelCommand">
        </PropertyGrid>
    </div>
</div>

@code{

    PropertyGrid propGrid;

    public TestPropObject SelectedObject { get; set; } = OptionObjects.FirstOrDefault();

    private static List<TestPropObject> OptionObjects = new List<TestPropObject> {
        new TestPropObject{ Value=1, Label="HyperMissionPhase"},
        new TestPropObject{ Value=2, Label="GUINodeElement"},
        new TestPropObject{ Value=3, Label="MetadataSetSourceHyperWorkflowNodeData"},
        new TestPropObject{ Value=4, Label="OOITaggingHyperWorkflowNodeData"},
        new TestPropObject{ Value=5, Label="MetadataRendererComponentConfig"},
        //new TestPropObject{ Value=1, Label=""},
    };

    // Always return the same instance, so we can test to see if changes stick.
    static object _cachedObject;

    private async Task<object> GetDataAsync()
    {
        if (_cachedObject == null)
            _cachedObject = await LoadData(SelectedObject?.Value ?? 0);

        return _cachedObject;
    }

    private async Task<object> LoadData(int selectedObjectValue = 1)
    {

        switch (selectedObjectValue)
        {
            case 1:
                var missionId = "8b1851f3-fc25-425d-8998-3667adf0ba39";
                var phaseId = "737dab8c-8dbb-4b15-9e9f-910094ba8ff8";
                var missionPhase = await DataContext.Instance.GetMissionPhaseAsync(missionId, phaseId);

                if (missionPhase != null) return missionPhase;

                return new HyperMissionPhase();

            case 2:
                return new GUINodeElement();
            case 3:
                return new MetadataSetSourceHyperWorkflowNodeData();
            case 4:
                return new OOITaggingHyperWorkflowNodeData();
            case 5:
                return new MetadataRendererComponentConfig()
                {
                    Id = "1edf89ad-948c-4821-aabb-85cabcb42cbe",
                    Name = "Metadata Renderer",
                };
            default:
                break;
        }

        return new NotImplementedException("Missing object");

    }

    private void OnChangeTestPropObject(TestPropObject data, object value)
    {
        _cachedObject = null;

        propGrid.CleanSourceCache();

        int option = int.Parse(string.Format("{0}", value));

        SelectedObject = OptionObjects.FirstOrDefault(it => it.Value == option);
    }

    private async Task OnOkCommand()
    {
        await Task.Delay(500);
        ShowToaster(MatToastType.Success, "", "Save changes");
    }

    private async Task OnCancelCommand()
    {
        await Task.Delay(500);
        ShowToaster(MatToastType.Info, "", "Cancel changes");
    }

    private void ShowToaster(MatToastType type, string title, string message)
    {
        Toaster.Add(message, type, title, "", config =>
        {
            config.ShowCloseButton = false;
            config.ShowProgressBar = false;
            config.MaximumOpacity = 100;
        });
    }

    public class TestPropObject
    {
        public int Value { get; set; }

        public string Label { get; set; }
    }

}

<style>

    .box-shadow {
        -webkit-box-shadow: 7px 10px 18px -8px rgba(0,0,0,0.66);
        -moz-box-shadow: 7px 10px 18px -8px rgba(0,0,0,0.66);
        box-shadow: 7px 10px 18px -8px rgba(0,0,0,0.66);
    }

    .change-obj-desc {
        font-size: 14px;
        padding-left: 20px;
        padding-top: 5px;
        color: #6193c8;
    }
</style>
