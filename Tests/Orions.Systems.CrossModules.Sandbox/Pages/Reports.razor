@namespace Orions.Systems.CrossModules.Pages
@page "/report"

@using Orions.Infrastructure.HyperMedia
@using Orions.Infrastructure.Reporting
@using Orions.Node.Common

@inherits BaseOrionsComponent

@inject IMatToaster Toaster

<h1>Reports</h1>

@if (DataResults.Any())
{
    <div class="report-result-content">
        <MatTable Items="@DataResults" class="mat-elevation-z5" PageSize="50">
            <MatTableHeader>
                <th>Name</th>
                <th>Actions</th>
            </MatTableHeader>
            <MatTableRow>
                <td class="col-6">@context.Name</td>
                <td>
                    <MatButton OnClick="@(async e => await LoadSeletedResult(context))" Label="Select"></MatButton>
                </td>
            </MatTableRow>
        </MatTable>
    </div>
}
else
{
    @if (!isLoaded)
    {
        <div style="position:relative; top:200px;">
            <div class="loading-bar"></div>
        </div>
    }
    else
    {
        <p>There isn't result...</p>
    }

}

@if (isSelectReport)
{
    <div style="position:relative; top:30px;">
        <div class="loading-bar"></div>
    </div>
}

@if (SelectedReport != null && SelectedReport.Data != null && !isSelectReport)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in SelectedReport.Data.ColumnsDefinitions)
                {
                    <th scope="col">@column.Title</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var rows in SelectedReport.Data.RowsCells)
            {
                <tr>
                    @foreach (var row in rows)
                    {
                        <td>@row.ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code{

    private bool isLoaded;
    private bool isSelectReport;
    private NetStore _netStore;
    private HyperMetadataReportResult SelectedReport { get; set; }

    public List<HyperMetadataReportResult> DataResults { get; set; } = new List<HyperMetadataReportResult>();

    protected override async Task OnInitializedAsync()
    {

        _netStore = await NetStore.ConnectAsyncThrows("http://localhost:5580/Execute"); // Embed node

        await FetchReportResults();

        await base.OnInitializedAsync();
    }

    private void ShowToaster(MatToastType type, string title, string message)
    {
        Toaster.Add(message, type, title, "", config =>
        {
            config.ShowCloseButton = false;
            config.ShowProgressBar = false;
            config.MaximumOpacity = 100;
        });
    }

    private async Task FetchReportResults(string metadatasetId = null)
    {

        var args = new FindHyperDocumentsArgs(typeof(HyperMetadataReportResult)) { RetrievePayload = false };
        if (!string.IsNullOrWhiteSpace(metadatasetId))
            args.DescriptorConditions.AddCondition(nameof(HyperMetadataReportResult.MetadataSetId), metadatasetId);


        var docs = await _netStore.ExecuteAsync(args);

        if (docs == null)
            return;

        foreach (var result in docs.Select(it => it.GetPayload<HyperMetadataReportResult>(true)))
        {
            DataResults.Add(result);
        }

        isLoaded = true;
    }

    private async Task LoadSeletedResult(HyperMetadataReportResult result)
    {
        isSelectReport = true;
        SelectedReport = await LoadResult(result);
    }

    private async Task<HyperMetadataReportResult> LoadResult(HyperMetadataReportResult result)
    {
        var args = new RetrieveHyperDocumentArgs(result.GetDocumentId());
        var doc = await _netStore.ExecuteAsync(args);

        if (args.ExecutionResult.IsNotSuccess)
        {
            ShowToaster(MatToastType.Danger, "", "Failed to find result: " + args.ExecutionResult.ToString());
            return null;
        }

        result = doc?.GetPayload<HyperMetadataReportResult>();

        isSelectReport = false;
        return result;
    }
}

<style>

</style>
