@page "/node_component"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel
@using Orions.Infrastructure.HyperMedia
@using Orions.Infrastructure.Common

@using MatBlazor
@using BlazorStrap

@using Telerik.Blazor
@using Telerik.Blazor.Components.Chart

@using System.Threading

@inject IMatToaster Toaster


@functions {

   public bool ModalVisible { get; set; }

   public string ModalText { get; set; }

   public string ModalTitle { get; set; }

   NodeDataManager _manager = null;

   [Parameter]
   public NodeDataManager Manager
   {
      get
      {
         return _manager;
      }

      set
      {
         if (_manager != null)
            _manager.PropertyChanged -= propChanged;

         _manager = value;
         if (value != null)
            value.PropertyChanged += propChanged;
      }
   }

   public Dictionary<string, bool> PopoversOpened { get; set; } = new Dictionary<string, bool>();

   public int ActiveIndex { get; set; }

   void configPopoverClick()
   {

   }

   void testClicked()
   {
   }

   void popoverChange(string id)
   {
   }

   void propChanged(object sender, PropertyChangedEventArgs e)
   {

      if (diskSeriesData.Count == 0)
      {
         diskSeriesData.Clear();
         List<string> labels = new List<string>();

         foreach (var disk in Manager?.DrivesInfo ?? new WMIHelper.DetailDriveInfo[] { })
         {
            if (string.IsNullOrEmpty(disk.Label) && disk.FreeSpace == null)
               continue;

            diskSeriesData.Add(disk.Progress);
            labels.Add(disk.Label);
         }

         diskSeriesXAxisItems = labels.ToArray();
      }

      this.InvokeAsync(() =>
      {
         //chart1.Refresh();
         base.StateHasChanged();
      });
   }

   void onDiskClicked(WMIHelper.DetailDriveInfo disk)
   {
      showModal($"Disk {disk?.Caption} Details", disk?.AdvancedInfo);
   }

   public void ShowToaster(string message)
   {
      Toaster.Add(message, MatToastType.Info, "Info", "", config =>
      {
         config.ShowCloseButton = false;
         config.ShowProgressBar = false;
         config.MaximumOpacity = 100;

         //config.ShowTransitionDuration = Convert.ToInt32(_showTransitionDuration);
         //config.VisibleStateDuration = Convert.ToInt32(_visibleStateDuration);
         //config.HideTransitionDuration = Convert.ToInt32(_hideTransitionDuration);

         //config.RequireInteraction = _requireInteraction;
      });
   }

   protected override void OnInitialized()
   {
      xAxisItems = new string[10];
      for (int i = 0; i < 10; i++)
      {
         xAxisItems[i] = i.ToString();
      }

      base.OnInitialized();
   }

   void onOnlineStatus()
   {
      ShowToaster("How long the Node has been online");
   }

   public List<object> cpuData = new List<object>() { 10, 2, 5, 6 };
   public List<object> ramData = new List<object>() { 5, 8, 2, 7 };

   public string[] xAxisItems = new string[] { };

   MatTheme theme2 = new MatTheme()
   {
      Primary = "#455a64",
      Secondary = "#536dfe"
   };

   BaseMatButton ButtonDiskDrives;

   public void OnClickDiskDrives(object e)
   {
      this.MenuDiskDrives.OpenAsync(ButtonDiskDrives.Ref);
   }


   BaseMatButton Button2;
   BaseMatButton ButtonComponents;
   BaseMatButton ButtonUsers;

   BaseMatMenu Menu2;
   BaseMatMenu MenuComponents;
   BaseMatMenu MenuUsers;
   BaseMatMenu MenuDiskDrives;

   TelerikChart chart1;

   public void OnClick2(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
   {
      this.Menu2.OpenAsync(Button2.Ref);
   }

   public void OnClickComponents(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
   {
      this.MenuComponents.OpenAsync(ButtonComponents.Ref);
   }

   public void OnClickUsers(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
   {
      this.MenuUsers.OpenAsync(ButtonUsers.Ref);
   }

   void showModal(string title, string message)
   {
      ModalTitle = title;
      ModalText = message;
      ModalVisible = true;


      base.StateHasChanged();
   }

   public List<object> diskSeriesData { get; set; } = new List<object>();
   public object[] diskSeriesXAxisItems { get; set; } = new object[] { };

}

<tag autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />

@*------------------ MODAL ------------------ *@

@*<Modal IsOpen="@ModalVisible" IsCentered="true" Size="BlazorStrap.Size.Large">
	<ModalHeader OnClick="@(e => { ModalVisible = false; })">@ModalTitle</ModalHeader>

	<textarea @bind="@ModalText" style="min-height:600px"></textarea>

	<ModalFooter>
		<BlazorButton Color="Color.Secondary" OnClick="@(e => { ModalVisible = false; })">Close</BlazorButton>
	</ModalFooter>
</Modal>*@

<MatDialog @bind-IsOpen="@ModalVisible" >
	<MatDialogTitle>@ModalTitle</MatDialogTitle>
	<MatDialogContent>

		<textarea @bind="@ModalText" spellcheck="false" style="border:hidden;min-height:750px;min-width:500px"></textarea>

	</MatDialogContent>

	<MatDialogActions>
		<MatButton OnClick="@(e => { ModalVisible = false; })">Close</MatButton>
	</MatDialogActions>
</MatDialog>


<MatThemeProvider Theme="@theme2">
	<p>
		<MatButton Label="Actions" Raised="true" OnClick="@OnClick2" @ref="Button2"></MatButton>
		<MatMenu @ref="Menu2">
			<MatList>
				<MatListItem>Restart</MatListItem>
				<MatListItem>Force GC</MatListItem>
				<MatListItem>Clear log</MatListItem>
			</MatList>
		</MatMenu>

		<MatButton Label="Components" Raised="true" OnClick="@OnClickComponents" @ref="ButtonComponents"></MatButton>
		<MatMenu @ref="MenuComponents">
			<MatList>
				@foreach (RetrieveConfigurationArgs.ConfigurationData config in @Manager.Configs ?? new RetrieveConfigurationArgs.ConfigurationData[] { })
				{
					<MatListItem OnClick="@(() => showModal($"Component {@config.ComponentType?.ToString()} Config", config.ConfigYaml()))">@config.ComponentType.ToString()</MatListItem>
				}

				@*<PopOverButtonComponent Name="@config.ComponentType.ToString()" PopoverTitle="Yaml Config" PopoverContents="@config.ConfigYaml()"></PopOverButtonComponent>*@
			</MatList>
		</MatMenu>

		<MatButton Label="Users" Raised="true" OnClick="@OnClickUsers" @ref="ButtonUsers"></MatButton>
		<MatMenu @ref="MenuUsers">
			<MatList>
				@foreach (HyperUserLoginAttempt login in @Manager.Logins ?? new HyperUserLoginAttempt[] { })
				{
					<MatListItem>@login.UserName</MatListItem>
				}
			</MatList>
		</MatMenu>

		<MatButton Label="S.M.A.R.T" Raised="true" Style="min-width:120px" OnClick="@OnClickDiskDrives" @ref="ButtonDiskDrives"></MatButton>
		<MatMenu @ref="MenuDiskDrives">
			<MatList>
				@foreach (var disk in @Manager.DrivesInfo)
				{
					<MatListItem OnClick="@(() => showModal($"Disk Info", @disk.AdvancedInfo))">@disk.Label</MatListItem>
				}
			</MatList>
		</MatMenu>

		<MatButton Icon="av_timer" Label="@Manager.OnlineStatus"></MatButton>

		<MatButton Icon="code" Label="@Manager.SDKStatus"></MatButton>

		<MatButton Icon="motorcycle" Label="@Manager.MissionStatus"></MatButton>
		<MatButton Icon="swap_horiz" Label="@Manager.WorkflowStatus"></MatButton>

		<MatButton Icon="business" Label="@Manager.AssetStatus"></MatButton>
	</p>
</MatThemeProvider>


@*<Card CardType="CardType.Card">
		<Card CardType="CardType.Title">Active Users</Card>
		<Card CardType="CardType.Body">
			@foreach (HyperUserLoginAttempt login in @Manager.Logins ?? new HyperUserLoginAttempt[] { })
																																																									{
			<PopOverButtonComponent Name="@login.UserName" Color="Color.Success" PopoverTitle="Details" PopoverContents="@login.ExecutionResult?.ToString()"></PopOverButtonComponent>
																																																									}
		</Card>
	</Card>*@

<div class="mat-layout-grid">
	<div class="mat-layout-grid-inner">
		<div class="mat-layout-grid-cell  mat-layout-grid-cell-span-4 mat-layout-grid-cell-align-middle">
			<TelerikChart>
			<TelerikChartSeriesItems>
				<TelerikChartSeries Type="ChartSeriesType.Line" Name="RAM" Data="@Manager.RAMHistory">
				</TelerikChartSeries>
				<TelerikChartSeries Type="ChartSeriesType.Line" Name="CPU" Data="@Manager.CPUHistory">
				</TelerikChartSeries>
			</TelerikChartSeriesItems>

			<TelerikChartCategoryAxes>
				<TelerikChartCategoryAxis Categories="@xAxisItems"></TelerikChartCategoryAxis>
			</TelerikChartCategoryAxes>

			<TelerikChartTitle Text="System Resources"></TelerikChartTitle>

			<TelerikChartLegend Position="ChartLegendPosition.Bottom">
			</TelerikChartLegend>
		</TelerikChart>

		</div>
		
		<div class="mat-layout-grid-cell  mat-layout-grid-cell-span-4 mat-layout-grid-cell-align-middle">
			<TelerikChart>
				<TelerikChartSeriesItems>
					<TelerikChartSeries Type="ChartSeriesType.Line" Name="Activity" Data="@Manager.ActivityHistory">
					</TelerikChartSeries>
				</TelerikChartSeriesItems>

				<TelerikChartCategoryAxes>
					<TelerikChartCategoryAxis Categories="@xAxisItems"></TelerikChartCategoryAxis>
				</TelerikChartCategoryAxes>

				<TelerikChartTitle Text="Activity"></TelerikChartTitle>

				<TelerikChartLegend Position="ChartLegendPosition.Bottom">
				</TelerikChartLegend>
			</TelerikChart>
		</div>
	</div>
</div>


@functions
{
	void expandedChanged(bool val)
	{
		if (val == false)
			return;

		Task.Delay(500).ContinueWith((t) =>
		{
			this.InvokeAsync(() =>
			{
				chart1.Refresh();
				base.StateHasChanged();
			});
		});

	}

}

<MatAccordion>

	<MatExpansionPanel ExpandedChanged="@expandedChanged">
		<MatExpansionPanelSummary>
			<MatExpansionPanelHeader>Disk Drives</MatExpansionPanelHeader>
		</MatExpansionPanelSummary>

		<MatExpansionPanelDetails>

			<div style="width:100%;height:400px">

				<TelerikChart Width="100%" Height="100%" @ref="chart1">
					<TelerikChartSeriesItems>

						<TelerikChartSeries Type="ChartSeriesType.Column" Name="Free Disk Space" Data="@diskSeriesData">
						</TelerikChartSeries>

					</TelerikChartSeriesItems>

					<TelerikChartCategoryAxes>
						<TelerikChartCategoryAxis Categories="@diskSeriesXAxisItems"></TelerikChartCategoryAxis>
					</TelerikChartCategoryAxes>

					<TelerikChartTitle Text=""></TelerikChartTitle>

					<TelerikChartLegend Position="ChartLegendPosition.Bottom">
					</TelerikChartLegend>
				</TelerikChart>

			</div>

		</MatExpansionPanelDetails>

	</MatExpansionPanel>


</MatAccordion>

