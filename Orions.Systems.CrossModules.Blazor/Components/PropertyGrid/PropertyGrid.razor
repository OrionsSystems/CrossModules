@inherits BaseBlazorComponent

@using Orions.SDK;


@if (VModel.Items.Any())
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <button class="btn nav-button" onclick="@VModel.HomeCommand">Home</button>
                <button class="btn nav-button" onclick="@VModel.BackCommand">Back</button>
            </div>
        </div>

        @foreach (var data in VModel.Items)
        {
            <div class="row pgrid-row">
                <div class="col-md-4 @GetVisualiaseClass(data)">
                    <div title="@data.DataProp.Value.TooltipDisplay">
                        @data.DataProp.Value.HeaderDisplay
                    </div>
                </div>
                <div class="col-md-5 pgrid-data">
                    @switch (data.DataProp.Value.EditableMode)
                    {
                        case PropertyGridItemUtilityData.EditableModes.Undefined:
                            <input type="text" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs=> { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;

                        case PropertyGridItemUtilityData.EditableModes.CheckBox:
                            <input type="checkbox" @onchange="(eventArgs => { CheckboxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;

                        case PropertyGridItemUtilityData.EditableModes.TextBox:
                            <input type="text" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs=> { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;
                        case PropertyGridItemUtilityData.EditableModes.MultiLineTextBox:
                            <textarea type="text" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs=> { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;

                        case PropertyGridItemUtilityData.EditableModes.Color:
                            @data.DataProp.Value.PrintValue()
                            break;

                        case PropertyGridItemUtilityData.EditableModes.Dropdown:

                            <select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs=> { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
                                @foreach (var item in data.DataProp.Value.AvailableValueOptions)
                                {
                                    <option>@item</option>
                                }
                            </select>
                            @data.DataProp.Value.PrintValue()
                            break;

                        case PropertyGridItemUtilityData.EditableModes.Custom:
                            @data.DataProp.Value.PrintValue()
                            break;

                        case PropertyGridItemUtilityData.EditableModes.BrowseButton:
                            <button class="btn btn-primary">Browse</button>
                            break;

                        case PropertyGridItemUtilityData.EditableModes.EditableDropdown:
                            <select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs=> { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
                                @foreach (var item in data.DataProp.Value.AvailableValueOptions)
                                {
                                    <option>@item</option>
                                }
                            </select>
                            break;
                        default:
                            break;
                    }

                </div>
                <div class="col-md-3">
                    <button class="btn">Delete</button>
                </div>
            </div>
        }

    </div>
}

@code {

    public PropertyGridVm VModel { get; set; } = new PropertyGridVm();


    [Parameter] public Func<Task<PropertyGridVm>> Loader { get; set; }

    [Parameter]
    public EventCallback<object> SettingSource { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        VModel = await Loader();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private string GetVisualiaseClass(PropertyGridItemVm data)
    {
        if (data.DataProp.Value.IsImportant) return "danger";
        if (data.DataProp.Value.IsMandatory) return "wanring";
        return "";
    }

    private void CheckboxChange(PropertyGridItemUtilityData data, object checkedValue) {
        data.Instance = (bool)data.Instance ? false : true;
        Console.WriteLine($"Change bool instance to : {data.Instance}");
    }

    private void TextBoxChange(PropertyGridItemUtilityData data, object value) {
        data.Instance = value;
        Console.WriteLine($"Change text instance to : {data.Instance}");
    }

    private void DropdownChange(PropertyGridItemUtilityData data, object value) {
        data.Instance = value;
        Console.WriteLine($"Change dropdown instance to : {data.Instance}");
    }
}
