@namespace Orions.Systems.CrossModules.Components


@inherits MissionListBase

@using Orions.Infrastructure.HyperMedia

	<div class="mission-container">

		<div class="row mission-list-header">
			<div class="header-filter col-lg-7">
				<div class="input-group mt-3">
					<input type="text" class="form-control" @bind="@Vm.SearchInput" placeholder="Search" aria-label="Search" aria-describedby="basic-search">
					<div class="input-group-append list-search">
						<button @onclick="@Vm.OnSearchBtnClick" class="btn btn-outline-secondary" type="button">
							<MatIcon Class="dashoboard-list-search-icon" Icon="@MatIconNames.Search"></MatIcon>
							<span>Search</span>
						</button>
					</div>
				</div>
			</div>
			<div class="header-actions col-lg-5">
				<a class="btn" @onclick="@(async ev => { await Vm.CreateNew(); })">
					<MatIcon Icon="@MatIconNames.Add_circle"></MatIcon>
					<div class="header-cmd-label">Create</div>
				</a>
			</div>
		</div>

		@if (Vm.Items.Any() && Vm.IsLoadedData)
		{
			var groups = Vm.Items.GroupBy(it => it.Mission.Group).ToDictionary(el => el.Key, el => el.ToList());

			<div class="row">
				<div class="col-lg-12 header-title">Missions</div>
			</div>

			@foreach (KeyValuePair<string, List<MissionItemVm>> entry in groups)
			{
				var groupName = entry.Key;
				var groupData = entry.Value;
				var rowIndex = 0;

				<div class="row">
					<div class="col-lg-12 group-title">@groupName</div>
				</div>

				<div class="table-responsive list-table">

					<table class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th width="1%" class="nowrap center"></th>
								<th>Name</th>
								<th width="20%" class="nowrap center"></th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in groupData)
							{
								rowIndex++;

								<tr @key="item.Mission.Id">
									<td class="center nowrap">@rowIndex</td>
									<td>
										<div class="name-container">
											<div class="workflow-status"></div>
											<div class="workflow-label-container">
												<div class="workflow-name">
													<h6>@item.Mission.Name</h6>
												</div>
												<div class="workflow-id">
													@($"Id:{item.Mission.Id}")
												</div>
												<div class="status">
													@item.StatusText
												</div>
											</div>
										</div>
									</td>
									<td class="center list-cmd-container">
										<a class="btn btn-sm" @onclick="@item.LoadCommand">
											<MatIcon Icon="@MatIconNames.Play_arrow"></MatIcon>
											<div class="list-cmd-label">Load</div>
										</a>
										<a class="btn btn-sm" @onclick="@item.UnloadCommand">
											<MatIcon Icon="@MatIconNames.Stop"></MatIcon>
											<div class="list-cmd-label">Unload</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.ManageAsync(item); })">
											<MatIcon Icon="@MatIconNames.Gavel"></MatIcon>
											<div class="list-cmd-label">Manage</div>
										</a>
										<a class="btn btn-sm" @onclick="@(e => { Vm.ShowPropertyGrid(item); })">
											<MatIcon Icon="@MatIconNames.Settings"></MatIcon>
											<div class="list-cmd-label">Properties</div>
										</a>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		}
		@if (!Vm.IsLoadedData)
		{
			<Loader Settings="@LoaderSetting"></Loader>
		}

	</div>

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid Vm="Vm.PropertyGridVm"
									  Loader="Vm.LoadPropertyGrid"
									  CancelVisible="true"
									  HyperStore="Vm.HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnCancelProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

