@namespace Orions.Systems.CrossModules.Components

@inherits PropertyGridComponent

@using Orions.SDK;
@using Orions.Node.Common;
@using Orions.Common;
@using System.IO
@using System.Text.RegularExpressions;


<div class="prop-grid-container">
	<div class="row mb-2">
		<div class="col-md-12 prop-grid-header">

			@if (Vm.BackButtonVisibleProp.Value)
			{
				<a onclick="@Vm.HomeCommand" title="Home" name="Home" class="btn prop-nav-btn">
					<div class="prop-grid-icon">
						<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-labelledby="homeIconTitle">
							<title id="homeIconTitle">Home</title>
							<path d="M2 12L5 9.3M22 12L19 9.3M19 9.3L12 3L5 9.3M19 9.3V21H5V9.3"></path>
						</svg>
					</div>
				</a>

				<a onclick="@Vm.BackCommand" title="Back" name="Back" class="btn prop-nav-btn">
					<div class="prop-grid-icon">
						<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="backIconTitle">
							<title id="backIconTitle">Back</title>
							<path d="M11.48,7.26c.8.1,1.59.16,2.36.3A10.66,10.66,0,0,1,22,13.84a15.58,15.58,0,0,1,1.39,5.71c0,.46,0,.91,0,1.37,0,.2,0,.43-.24.51s-.35-.12-.45-.28a15.61,15.61,0,0,0-3.6-3.87,11.62,11.62,0,0,0-7.38-2.45c-.26,0-.35.07-.35.35q0,2.49,0,5a.6.6,0,0,1-.17.42c-.16.13-.32,0-.46-.13L.77,11.33c-.35-.32-.34-.42,0-.74l10-8.91c.15-.13.31-.32.5-.18a.71.71,0,0,1,.18.5c0,1.69,0,3.38,0,5.08C11.47,7.15,11.48,7.22,11.48,7.26Z" />
						</svg>
					</div>
				</a>
			}

			<h5 class="prop-grid-header-title">@Vm.TrailProp.Value</h5>
		</div>
	</div>


	@if (Vm.Utility.ListMode || Vm.Utility.CreatorMode)
	{
		<div class="row">
			<div class="col px-0">
				<select class="form-control" @onchange="OnCreatorItemSelect">
					@foreach (var item in Vm.Utility.CreatorItems)
					{
						<option value="@item.Type.FullName">@item</option>
					}
				</select>
			</div>
		</div>

		@if (!Vm.Utility.ReadOnlyMode)
		{
			<div class="row">
				<div class="col text-center my-2">
					<button class="btn btn-outline-dark center" onclick="@Vm.CreatorCreateCommand"> Create</button>
				</div>
			</div>
		}

	}

	@if (Vm.Items.Any())
	{

		var groups = Vm.Items.GroupBy(it => it.GroupName).ToDictionary(el => el.Key, el => el.ToList());

		@foreach (KeyValuePair<string, List<PropertyGridItemVm>> entry in groups)
		{
			var groupName = entry.Key;
			var groupData = entry.Value;

			<div class="row">
				<div class="col">
					<h6 class="prop-grid-group-title">@groupName</h6>
				</div>
			</div>
			@foreach (var data in groupData)
			{
				<div class="row pgrid-row">
					<div class="col-md-4 @GetVisualiaseClass(data)">
						<div class="prop-grid-header-display" title="@data.DataProp.Value.TooltipDisplay">
							@data.DataProp.Value.HeaderDisplay

							@if (data.DataProp.Value.ShowHelp)
							{
								<a class="prop-grid-help-link">
									<div class="prop-grid-icon float-right">
										<svg role="img" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-labelledby="helpIconTitle">
											<title id="helpIconTitle">@data.DataProp.Value.HelpText</title>
											<path d="M12 14C12 12 13.576002 11.6652983 14.1186858 11.1239516 14.663127 10.5808518 15 9.82976635 15 9 15 7.34314575 13.6568542 6 12 6 11.1040834 6 10.2998929 6.39272604 9.75018919 7.01541737 9.49601109 7.30334431 9.29624369 7.64043912 9.16697781 8.01061095"></path>
											<line x1="12" y1="17" x2="12" y2="17"></line>
											<circle cx="12" cy="12" r="10"></circle>
										</svg>
									</div>
								</a>
							}
						</div>
					</div>
					<div class="col-md-6 pgrid-data">

						@switch (data.DataProp.Value.EditableMode)
						{
							case PropertyGridItemUtilityData.EditableModes.Undefined:
								<input type="text" class="form-control" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
								break;
							case PropertyGridItemUtilityData.EditableModes.CheckBox:
								<div class="form-check">
									<input type="checkbox" checked="@data.DataProp.Value.Instance" class="form-check-input " @onchange="(eventArgs => { CheckboxChange(data.DataProp.Value, eventArgs.Value); })" />
								</div>
								break;
							case PropertyGridItemUtilityData.EditableModes.TextBox:
								<input type="text" class="form-control" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
								break;
							case PropertyGridItemUtilityData.EditableModes.MultiLineTextBox:
								<textarea class="prop-grid-multuline" type="text" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
								break;
							case PropertyGridItemUtilityData.EditableModes.Color:
								<a>
									@{
										var uniColor = (UniColor)data.DataProp.Value.Instance;
										var rgbColor = $"rgba({uniColor.R},{uniColor.G},{uniColor.B},{uniColor.A})";
									}

									<VanillaColorPicker ParentId="customId"
															  Class="form-control popup-parent"
															  Color="@rgbColor"
															  Popup="bottom"
															  Value="@rgbColor"
															  OnDone="(color => ChangeColor(data.DataProp.Value, color))"
															  EditorFormat="rgb">
									</VanillaColorPicker>
								</a>
								break;
							case PropertyGridItemUtilityData.EditableModes.Dropdown:
								<select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs => { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
									@foreach (var item in data.DataProp.Value.AvailableValueOptions)
									{
										<option value="@item">@item</option>
									}
								</select>
								break;
							case PropertyGridItemUtilityData.EditableModes.Custom:
								var btn_command = data.CustomExpandCommand;
								<button @onclick="btn_command" class="btn btn-outline-dark prop-grid-custom">@data.DataProp.Value.ValueDisplay</button>
								break;
							case PropertyGridItemUtilityData.EditableModes.ImageBrowseButton:
								<img class="img-fluid" src="@GetImageSrc(data.DataProp.Value.Instance)" />
								<BlazorInputFile OnChange="(async(arg) => { await HandleInputFileSelection(data.DataProp.Value, arg); })" />
								break;
							case PropertyGridItemUtilityData.EditableModes.TextBrowseButton:
								<BlazorInputFile OnChange="(async(arg) => { await HandleInputFileSelection(data.DataProp.Value, arg); })" />
								break;
							case PropertyGridItemUtilityData.EditableModes.EditableDropdown:
								<select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs=> { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
									@foreach (var item in data.DataProp.Value.AvailableValueOptions)
									{
										<option value="@item">@item</option>
									}
								</select>
								break;
							default:
								break;
						}

					</div>
					@if (data.DataProp.Value.CanDelete)
					{
						<div class="col-md-1">
							<button class="btn btn-outline-dark" @onclick="@(ev => { OnDeleteCmd(data.DataProp.Value, ev); })">Delete</button>
						</div>
					}
				</div>
			}
		}

	}

	<div class="row mt-2">
		<div class="col-md-12 k-right">
			@if (Vm.OKVisible)
			{
				<button class="btn btn-outline-primary float-right ml-1" @onclick="OnOkCmd">OK</button>
			}
			@if (Vm.CancelVisible)
			{
				<button class="btn btn-outline-dark float-right" @onclick="OnCancelCmd">Cancel</button>
			}

		</div>
	</div>
</div>

@code {


	[Parameter] public Func<Task<object>> Loader { get; set; }

	[Parameter]
	public object Source { get { return Vm.Source; } set { Vm.Source = value; } }

	[Parameter]
	public IHyperArgsSink HyperStore { get { return Vm.HyperStore; } set { Vm.HyperStore = value; } }

	[Parameter]
	public bool OKVisible { get { return Vm.OKVisible; } set { Vm.OKVisible = value; } }

	[Parameter]
	public bool CancelVisible { get { return Vm.CancelVisible; } set { Vm.CancelVisible = value; } }

	[Parameter]
	public EventCallback OkCommand { get; set; }

	[Parameter]
	public EventCallback CancelCommand { get; set; }


	protected override async Task OnParametersSetAsync()
	{
		if (Vm.SourceCache == null)
		{
			Vm.SourceCache = await Loader();
			Source = Vm.SourceCache;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private string GetVisualiaseClass(PropertyGridItemVm data)
	{
		if (data.DataProp.Value.IsImportant) return "danger";
		if (data.DataProp.Value.IsMandatory) return "warning";
		return String.Empty;
	}

	private void CheckboxChange(PropertyGridItemUtilityData data, object checkedValue)
	{
		data.Instance = (bool)checkedValue;
	}

	private void TextBoxChange(PropertyGridItemUtilityData data, object value)
	{
		data.Instance = value;
	}

	private void DropdownChange(PropertyGridItemUtilityData data, object value)
	{

		HintOptionPair selectedOption = null;
		foreach (var item in data.AvailableValueOptions)
		{
			//if (object.Equals(item.Value, data.GetInstance())) {
			//    selectedOption = item;
			//    break;
			//}

			if (object.Equals(item.Title, value)) // TODO Fix me to check for Value !!!
			{
				selectedOption = item;
				break;
			}
		}

		if (selectedOption != null) data.SelectedValueOption = selectedOption;
	}

	private void OnCreatorItemSelect(ChangeEventArgs e)
	{
		foreach (var item in Vm.Utility.CreatorItems)
		{
			if (object.Equals(item.Type.FullName, e.Value))
			{
				Vm.SelectedCreatorItemProp.Value = item;
				return;
			}
		}
	}

	private async Task OnCreatorCreate(object parameter)
	{
		await Vm.OnCreatorCreate(Vm.CreatorCreateCommand, parameter);
	}

	private async Task HandleInputFileSelection(PropertyGridItemUtilityData data, IFileListEntry[] files)
	{
		var file = files.FirstOrDefault();
		if (file != null)
		{
			using (var ms = new MemoryStream())
			{
				await file.Data.CopyToAsync(ms);
				data.Instance = ms.ToArray();
			}
		}
	}

	private void ChangeColor(PropertyGridItemUtilityData data, string color)
	{
		if (string.IsNullOrEmpty(color)) return;

		var regex = new Regex("rgb *\\( *([0-9]+), *([0-9]+), *([0-9]+) *\\)");
		var m = regex.Match(color);

		if (m.Success)
		{
			var uniColor = UniColor.FromArgb(byte.Parse(m.Groups[1].Value), byte.Parse(m.Groups[2].Value), byte.Parse(m.Groups[3].Value));

			data.Instance = uniColor;
		}
	}

	private void OnDeleteCmd(PropertyGridItemUtilityData data, MouseEventArgs ev)
	{
		data.DeleteCommand.Execute(data);
	}

	private async Task OnCancelCmd(MouseEventArgs ev)
	{
		await Vm.Utility.MoveBack(true);
		await CancelCommand.InvokeAsync(ev);
	}

	private async Task OnOkCmd(MouseEventArgs ev)
	{
		await Vm.Utility.MoveBack(true);
		await OkCommand.InvokeAsync(ev);
	}

	private string GetImageSrc(object input)
	{
		if (input == null) return string.Empty;

		var data = (byte[])input;

		return $"data:image/jpg;base64,{Convert.ToBase64String(data)}";
	}
}

<style>
	input[type=checkbox] {
		/* Double-sized Checkboxes */
		-ms-transform: scale(2); /* IE */
		-moz-transform: scale(2); /* FF */
		-webkit-transform: scale(2); /* Safari and Chrome */
		-o-transform: scale(2); /* Opera */
		padding: 10px;
		height: 35px;
		margin-left: 0px;
	}
</style>
