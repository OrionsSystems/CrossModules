@namespace Orions.Systems.CrossModules.Components
@inherits BaseBlazorComponent<PropertyGridVm>
@using Orions.SDK;
@using Orions.Node.Common;
@using Orions.Common;
@using System.IO


<div class="prop-grid-container">
    <div class="row mb-2">
        <div class="col-md-12 prop-grid-header">

            @if (DataContext.BackButtonVisibleProp.Value)
            {
                <a onclick="@DataContext.HomeCommand" title="Home" name="Home" class="btn prop-nav-btn">
                    <div class="prop-grid-icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-labelledby="homeIconTitle">
                            <title id="homeIconTitle">Home</title>
                            <path d="M2 12L5 9.3M22 12L19 9.3M19 9.3L12 3L5 9.3M19 9.3V21H5V9.3"></path>
                        </svg>
                    </div>
                </a>

                <a onclick="@DataContext.BackCommand" title="Back" name="Back" class="btn prop-nav-btn">
                    <div class="prop-grid-icon">
                        <svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-labelledby="backIconTitle">
                            <title id="backIconTitle">Back</title>
                            <path d="M11.48,7.26c.8.1,1.59.16,2.36.3A10.66,10.66,0,0,1,22,13.84a15.58,15.58,0,0,1,1.39,5.71c0,.46,0,.91,0,1.37,0,.2,0,.43-.24.51s-.35-.12-.45-.28a15.61,15.61,0,0,0-3.6-3.87,11.62,11.62,0,0,0-7.38-2.45c-.26,0-.35.07-.35.35q0,2.49,0,5a.6.6,0,0,1-.17.42c-.16.13-.32,0-.46-.13L.77,11.33c-.35-.32-.34-.42,0-.74l10-8.91c.15-.13.31-.32.5-.18a.71.71,0,0,1,.18.5c0,1.69,0,3.38,0,5.08C11.47,7.15,11.48,7.22,11.48,7.26Z" />
                        </svg>
                    </div>
                </a>

                @*<button class="btn btn-outline-dark nav-button" onclick="@DataContext.HomeCommand">Home</button>
                <button class="btn btn-outline-dark nav-button" onclick="@DataContext.BackCommand">Back</button>*@
            }

            <h5 class="prop-grid-header-title">@DataContext.TrailProp.Value</h5>
        </div>
    </div>


    @if (DataContext.Utility.ListMode || DataContext.Utility.CreatorMode)
    {
        <div class="row">
            <div class="col px-0">
                <select class="form-control" value="@DataContext.SelectedCreatorItemProp.Value" @onchange="OnCreatorItemSelect">
                    @foreach (var item in DataContext.Utility.CreatorItems)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        </div>

        @if (!DataContext.Utility.ReadOnlyMode)
        {
            <div class="row">
                <div class="col text-center my-2">
                    <button class="btn btn-outline-dark center" onclick="@DataContext.CreatorCreateCommand"> Create</button>
                </div>
            </div>
        }

    }

    @if (DataContext.Items.Any())
    {
        @foreach (var data in DataContext.Items)
        {
            <div class="row pgrid-row">
                <div class="col-md-4 @GetVisualiaseClass(data)">
                    <div class="prop-grid-header-display" title="@data.DataProp.Value.TooltipDisplay">
                        @data.DataProp.Value.HeaderDisplay

                        @if (data.DataProp.Value.ShowHelp)
                        {
                            <a class="prop-grid-help-link">
                                <div class="prop-grid-icon float-right">
                                    <svg role="img" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-labelledby="helpIconTitle">
                                        <title id="helpIconTitle">@data.DataProp.Value.HelpText</title>
                                        <path d="M12 14C12 12 13.576002 11.6652983 14.1186858 11.1239516 14.663127 10.5808518 15 9.82976635 15 9 15 7.34314575 13.6568542 6 12 6 11.1040834 6 10.2998929 6.39272604 9.75018919 7.01541737 9.49601109 7.30334431 9.29624369 7.64043912 9.16697781 8.01061095"></path>
                                        <line x1="12" y1="17" x2="12" y2="17"></line>
                                        <circle cx="12" cy="12" r="10"></circle>
                                    </svg>
                                </div>
                            </a>
                        }
                    </div>
                </div>
                <div class="col-md-7 pgrid-data">

                    @switch (data.DataProp.Value.EditableMode)
                    {
                        case PropertyGridItemUtilityData.EditableModes.Undefined:
                            <input type="text" class="form-control" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;
                        case PropertyGridItemUtilityData.EditableModes.CheckBox:
                            <div class="form-check">
                                <input type="checkbox" checked="@data.DataProp.Value.Instance" class="form-check-input " @onchange="(eventArgs => { CheckboxChange(data.DataProp.Value, eventArgs.Value); })" />
                            </div>
                            break;
                        case PropertyGridItemUtilityData.EditableModes.TextBox:
                            <input type="text" class="form-control" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;
                        case PropertyGridItemUtilityData.EditableModes.MultiLineTextBox:
                            <textarea type="text" value="@data.DataProp.Value.PrintValue()" @onchange="(eventArgs => { TextBoxChange(data.DataProp.Value, eventArgs.Value); })" />
                            break;
                        case PropertyGridItemUtilityData.EditableModes.Color:
                            <a>
                                @{
                                    var uniColor = (UniColor)data.DataProp.Value.Instance;
                                    var rgbColor = $"rgba({uniColor.R},{uniColor.G},{uniColor.B},{uniColor.A})";
                                }

                                <VanillaColorPicker ParentId="customId"
                                                    Class="form-control popup-parent"
                                                    Color="@rgbColor"
                                                    Popup="bottom"
                                                    Value="@rgbColor"
                                                    EditorFormat="rgb">
                                </VanillaColorPicker>
                            </a>
                            break;
                        case PropertyGridItemUtilityData.EditableModes.Dropdown:
                            <select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs => { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
                                @foreach (var item in data.DataProp.Value.AvailableValueOptions)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                            break;
                        case PropertyGridItemUtilityData.EditableModes.Custom:
                            var btn_command = data.CustomExpandCommand;
                            <button @onclick="btn_command" class="btn btn-outline-dark prop-grid-custom">@data.DataProp.Value.ValueDisplay</button>
                            break;
                        case PropertyGridItemUtilityData.EditableModes.BrowseButton:
                            <img class="img-fluid" src="@GetImageSrc(data.DataProp.Value.Instance)" />
                            <BlazorInputFile OnChange="(async(arg) => { await HandleInputFileSelection(data.DataProp.Value, arg); })" />
                            break;
                        case PropertyGridItemUtilityData.EditableModes.EditableDropdown:
                            <select class="form-control" value="@data.DataProp.Value.SelectedValueOption" @onchange="(eventArgs=> { DropdownChange(data.DataProp.Value, eventArgs.Value); })">
                                @foreach (var item in data.DataProp.Value.AvailableValueOptions)
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                            break;
                        default:
                            break;
                    }

                </div>
                @if (data.DataProp.Value.CanDelete)
                {
                    <div class="col-md-1">
                        <button class="btn btn-outline-dark float-right" onclick="@data.DataProp.Value.DeleteCommand">Delete</button>
                    </div>
                }
            </div>
        }
    }

    <div class="row mt-2">
        <div class="col-md-12 k-right">
            @if (DataContext.OKVisible)
            {
                <button class="btn btn-outline-primary float-right ml-1" onclick="@DataContext.OKCommand">OK</button>
            }
            @if (DataContext.CancelVisible)
            {
                <button class="btn btn-outline-dark float-right" onclick="@DataContext.CancelCommand">Cancel</button>
            }

        </div>
    </div>
</div>

@code {

    public bool IsDirty
    {
        get
        {
            if (DataContext.Items.Any())
            {

                return DataContext.Items.IsDirty();
            }

            return false;
        }
    }

    [Parameter] public Func<Task<object>> Loader { get; set; }

    [Parameter]
    public object Source { get { return DataContext.Source; } set { DataContext.Source = value; } }

    [Parameter]
    public IHyperArgsSink HyperStore { get { return DataContext.HyperStore; } set { DataContext.HyperStore = value; } }

    [Parameter]
    public bool OKVisible { get { return DataContext.OKVisible; } set { DataContext.OKVisible = value; } }

    [Parameter]
    public bool CancelVisible { get { return DataContext.CancelVisible; } set { DataContext.CancelVisible = value; } }

    protected override async Task OnParametersSetAsync()
    {
        Source = await Loader();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private string GetVisualiaseClass(PropertyGridItemVm data)
    {
        if (data.DataProp.Value.IsImportant) return "danger";
        if (data.DataProp.Value.IsMandatory) return "warning";
        return "";
    }

    private void CheckboxChange(PropertyGridItemUtilityData data, object checkedValue)
    {
        data.Instance = (bool)checkedValue;
    }

    private void TextBoxChange(PropertyGridItemUtilityData data, object value)
    {
        data.Instance = value;
    }

    private void DropdownChange(PropertyGridItemUtilityData data, object value)
    {

        PropertyGridItemUtilityData.HintOptionPair selectedOption = null;
        foreach (var item in data.AvailableValueOptions)
        {
            if (object.Equals(item.Title, value)) // TODO Fix me to check for Value !!!
            {
                selectedOption = item;
                break;
            }
        }

        if (selectedOption != null) data.SelectedValueOption = selectedOption;
    }

    private void OnCreatorItemSelect(ChangeEventArgs e)
    {
        foreach (var item in DataContext.Utility.CreatorItems)
        {
            if (object.Equals(item.Type.FullName, e.Value))
            {
                DataContext.SelectedCreatorItemProp.Value = item;
                return;
            }
        }
    }

    private async Task OnCreatorCreate(object parameter)
    {
        await DataContext.OnCreatorCreate(DataContext.CreatorCreateCommand, parameter);
    }

    private async Task HandleInputFileSelection(PropertyGridItemUtilityData data, IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                //file.Data.CopyTo(ms);
                await file.Data.CopyToAsync(ms);

                data.Instance = ms.ToArray();
            }
        }
    }

    //private async Task OnCreatorCreateCommand()
    //{
    //     await DataContext.Utility.RunCreatorFor(DataContext.SelectedCreatorItemProp.Value);
    //}

    private void ChangeColor(PropertyGridItemUtilityData data, object value)
    {
        var test = value;
    }

    private string GetImageSrc(object input)
    {
        if (input == null) return string.Empty;

        var data = (byte[])input;

        return $"data:image/jpg;base64,{Convert.ToBase64String(data)}";
    }

    private async Task CreatorCreateCommand()
    {

    }


}


<style>

    .prop-nav-btn {
        cursor: pointer;
        padding: 5px 4px;
    }

    .popup-parent {
        color: white;
        font-family: sans-serif;
        font-weight: 100;
        text-align: center;
    }

        .popup-parent:focus {
            outline: 0.3em dashed rgba(255, 165, 0, 0.7);
        }

    input[type=checkbox] {
        /* Double-sized Checkboxes */
        -ms-transform: scale(2); /* IE */
        -moz-transform: scale(2); /* FF */
        -webkit-transform: scale(2); /* Safari and Chrome */
        -o-transform: scale(2); /* Opera */
        padding: 10px;
        height: 35px;
    }
</style>