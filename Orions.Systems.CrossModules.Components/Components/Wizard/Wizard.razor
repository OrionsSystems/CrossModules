@namespace Orions.Systems.CrossModules.Components

@using Orions.Common
@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor.Popups
@using System
@using System.Threading


@inherits BaseBlazorComponent<WizardVm>

<div class="wizard-container-v2">
	<div class="wizard-header row">
		<div class="col-lg-8">
			<div class="wizard-message">@Vm.MessageDescription</div>
		</div>
		<div class="wizard-header-actions col-lg-4">
			<a class="btn" @onclick="@Vm.ResetSelection">
				<MatIcon Icon="@MatIconNames.Settings_backup_restore"></MatIcon>
				<div class="wizard-header-cmd-label">Reset</div>
			</a>
		</div>
	</div>


	@if (Vm.SelectionHistory.Any())
	{
		<div class="wizard-filter-breadcrumb">
			<div class="wizard-filter-container">
				<div class="wizard-breadcrumbs-containers">
					<ul>
						@foreach (var historyItem in Vm.SelectionHistory)
						{
							<li class="wizard-filter-breadcrumb-item" @onclick="@(ev=> Vm.OnClickFilter(historyItem))">@historyItem.Name</li>
						}
					</ul>
				</div>
			</div>
		</div>
	}

	@if (Vm.IsLoadedData)
	{

		@if (Vm.Items != null && Vm.Items.Any())
		{
			var counter = 0;

			<div class="table-responsive wizzard-container">
				<table class="table table-striped table-bordered table-hover">
					<thead>
						<tr>
							<th width="1%" class="nowrap center"></th>
							<th>Name</th>
							<th width="30%" class="nowrap center"></th>
						</tr>
					</thead>
					<tbody>

						@foreach (var item in Vm.Items)
						{
							counter++;

							<tr>
								<td class="center nowrap">@counter</td>
								<td class="wizzard-item-link nowrap" @onclick="@(async ev => await Vm.OnOpenWizzard(item))">@item.Name</td>
								<td class="center nowrap"></td>
							</tr>

						}
					</tbody>
				</table>
			</div>
		}
		else if (!Vm.IsWizardFinish)
		{
			<p>There isn't any wizzards</p>
		}
	}
	else
	{
		<Loader Settings="@(new LoaderConfiguration() { Visible = true })"></Loader>
	}

	<div id="footer" class="wizard-status">@Vm.TextBlockStatus</div>

</div>

@if (Vm.ShowPropertyGrid)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid Vm="Vm.PropertyGridVm"
									  Loader="Vm.LoadPropertyGrid"
									  CancelVisible="true"
									  HyperStore="Vm.HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnCancelProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}


@if (Vm.ShowConfirmDialog)
{
	<div class="confirm-modal modal fade show" id="confirmModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@Vm.ConfirmDialogTitle</h5>
					<button type="button" @onclick="@Vm.CloseConfirmDialog" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<p>@Vm.ConfirmDialogMessage</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @onclick="Vm.ApplyConfirmDialog">Apply</button>
					<button type="button" class="btn btn-secondary" @onclick="@Vm.CloseConfirmDialog">Close</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code {

	[Parameter]
	public IHyperArgsSink HyperStore
	{
		get => Vm.HyperStore;
		set => Vm.HyperStore = value;
	}

	PropertyGrid _propGrid;
	PropertyGrid propGrid
	{
		get => _propGrid;
		set
		{
			_propGrid = value;
			Vm.PropertyGridVm = value.Vm;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		await Vm.InitWizzard();

		DispatcherTimer();
	}

	private void DispatcherTimer()
	{

		var timer = new Timer(new TimerCallback(_ =>
		{
			Vm.UpdateUI();

			InvokeAsync(StateHasChanged);

		}), null, 1000, 2000);

	}

}
