@using Orions.Systems.CrossModules.Components.Desi.Infrastructure
@using Orions.Infrastructure.HyperSemantic
@namespace Orions.Systems.CrossModules.Components.Desi.VizList	
@inherits BaseComponent

<div class="user-input">
	<div class="container">
		<div class="border">
			@if (Type != UserActionNodeElement.Types.TextInput)
			{
				<div class="action-text ">@Title</div>
			}
			@switch (Type)
			{
				case UserActionNodeElement.Types.Confirmation:
					<div class="confirmation">
						<button @onclick="_ => BoolResult = true" class="viz-btn action @(BoolResult == true ? "selected": "deselected")">Yes</button>
						<button @onclick="_ => BoolResult = false" class="viz-btn action @(BoolResult == false ? "selected": "deselected")">No</button>
					</div>
					break;

				case UserActionNodeElement.Types.FloatInput:
					<input placeholder="0.0"
						   type="number"
						   step="0.1"
						   @bind-value:event="oninput"
						   @bind-value="@StringResult" />
					break;

				case UserActionNodeElement.Types.TextInput:
					<input placeholder="@Title" type="text" @bind-value:event="oninput" @bind-value="@StringResult" />
					break;

				case UserActionNodeElement.Types.IntegerInput:
					<input placeholder="0"
						   type="number"
						   step="1"
						   @bind-value:event="oninput"
						   @bind-value="@StringResult" />
					break;
			}
		</div>
	</div>
	<ActionButton CssClass="continue" OnClick="() => Finish()" Disabled="@(!CanBeFinished)">Continue</ActionButton>
</div>

@code {
	private string _stringResult;
	private bool? _boolResult;

	[Parameter]
	public UserActionNodeElement.Types Type { get; set; }
	[Parameter]
	public string Title { get; set; }
	[Parameter]
	public EventCallback<string> OnStringResult { get; set; }
	[Parameter]
	public EventCallback<bool> OnBoolResult { get; set; }

	private string StringResult
	{
		get => _stringResult;
		set
		{
			_stringResult = value;
			StateHasChanged();
		}
	}

	private bool? BoolResult
	{
		get => _boolResult;
		set
		{
			_boolResult = value;
			StateHasChanged();
		}
	}

	private bool CanBeFinished
	{
		get
		{
			if (Type == UserActionNodeElement.Types.Confirmation)
			{
				return BoolResult.HasValue;
			}
			else
			{
				return !string.IsNullOrEmpty(StringResult);
			}
		}
	}


	private void Finish()
	{
		if (Type == UserActionNodeElement.Types.Confirmation)
		{
			OnBoolResult.InvokeAsync(BoolResult.Value);
		}
		else
		{
			OnStringResult.InvokeAsync(StringResult);
		}
	}
}
