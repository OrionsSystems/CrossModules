@namespace Orions.Systems.CrossModules.Components

@inherits TagonomyNodeControlBase

@using Syncfusion.EJ2.Blazor.DropDowns

<div class="container tagonomy-node-container mt-3">
	@if (Vm.Node != null)
	{
		<div class="form-group row">
			<label for="tagonmyNodeId" class="col-sm-2 col-form-label">Id</label>
			<div class="col-sm-10">
				<input type="text" readonly class="form-control" id="tagonmyNodeId" value="@Vm.Node.Id">
			</div>
		</div>
		<div class="form-group row">
			<label for="tagonmyNodeName" class="col-sm-2 col-form-label">Name</label>
			<div class="col-sm-10">
				<input type="text" class="form-control" id="tagonmyNodeName" value="@Vm.Node.Name">
			</div>
		</div>
		<div class="form-group row">
			<label for="tagonmyNodeAlias" class="col-sm-2 col-form-label">#Alias (Semantic)</label>
			<div class="col-sm-10">
				<input type="text" class="form-control" id="tagonmyNodeAlias" value="@Vm.SemanticAlias">
			</div>
		</div>
		<div class="form-group row">
			<label for="tagonmyNodeNamespace" class="col-sm-2 col-form-label">#Namespace (Semantic)</label>
			<div class="col-sm-10">
				<input type="text" class="form-control" id="tagonmyNodeNamespace" value="@Vm.SemanticNamespace">
			</div>
		</div>
		<div class="form-group row">
			<label for="tagonmyNodeGroups" class="col-sm-2 col-form-label">#Groups (Semantic)</label>
			<div class="col-sm-10">
				<input type="text" class="form-control" id="tagonmyNodeGroups" value="@Vm.SemanticGroups">
			</div>
		</div>

		<hr />

		<div class="form-group row">
			<label for="tagonmyNodeGroups" class="col-sm-2 col-form-label">Add Element</label>
			<div class="col-sm-10">
				<div class="row create-element-container">
					<div class="col-sm-9">
						<EjsComboBox TValue="string" Value="@Vm.SelectedTagonomyAddElement" Placeholder="Select element" DataSource="@Vm.ComboBoxElements">
						</EjsComboBox>
					</div>
					<div class="col-sm-3">
						<a class="btn cmd-create" @onclick="Vm.AddTagonomyElement">
							<MatIcon Icon="@MatIconNames.Add_circle"></MatIcon>
							<div class="cmd-label">Add</div>
						</a>
					</div>
				</div>
			</div>
		</div>

		<hr />

		@if (Vm.Elements != null && Vm.Elements.Any())
		{
			@foreach (var element in Vm.Elements)
			{
				<div class="row element-container">
					<div class="col-sm-9">
						<a class="btn cmd-edit" @onclick="@(ev => { Vm.ShowPropertyGrid(element); })">
							<MatIcon Icon="@MatIconNames.Edit"></MatIcon>
							<div class="cmd-label">Edit</div>
						</a>
						<div class="element-name">
							@(element.GetType().Name + "; " + element.Print())
						</div>
					</div>
					<div class="col-sm-3">
						<a class="btn cmd-up" @onclick="@(ev => { Vm.UpTagonomyNodeElement(element); })">
							<MatIcon Icon="@MatIconNames.Arrow_upward"></MatIcon>
							<div class="cmd-label">Up</div>
						</a>
						<a class="btn cmd-down" @onclick="@(ev => { Vm.DownTagonomyNodeElement(element); })">
							<MatIcon Icon="@MatIconNames.Arrow_downward"></MatIcon>
							<div class="cmd-label">Down</div>
						</a>
						<a class="btn cmd-delete" @onclick="@(ev => { Vm.DeleteTagonomyNodeElement(element); })">
							<MatIcon Icon="@MatIconNames.Delete"></MatIcon>
							<div class="cmd-label">Delete</div>
						</a>
					</div>
				</div>
			}
		}
	}
</div>


@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid Vm="Vm.PropertyGridVm"
									  Loader="Vm.LoadPropertyGrid"
									  CancelVisible="true"
									  HyperStore="Vm.HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnCancelProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}


