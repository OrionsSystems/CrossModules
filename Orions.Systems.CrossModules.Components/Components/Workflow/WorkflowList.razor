@namespace Orions.Systems.CrossModules.Components


@inherits WorkflowListBase

	<div class="workflow-container">

		<div class="row workflow-list-header">
			<div class="header-filter col-lg-7">
				<div class="input-group mt-3">
					<input type="text" class="form-control" @bind="@Vm.SearchInput" placeholder="Search" aria-label="Search" aria-describedby="basic-search">
					<div class="input-group-append list-search">
						<button @onclick="@Vm.OnSearchBtnClick" class="btn btn-outline-secondary" type="button">
							<MatIcon Class="dashoboard-list-search-icon" Icon="@MatIconNames.Search"></MatIcon>
							<span>Search</span>
						</button>
					</div>
				</div>

				<div class="mode-actions">
					<a class="btn btn-sm" @onclick="@(e =>{ IsTableMode = !IsTableMode; })">
						@if (IsTableMode)
						{
							<MatIcon Icon="@MatIconNames.Notes"></MatIcon>
						}
						else
						{
							<MatIcon Icon="@MatIconNames.View_compact"></MatIcon>
						}
					</a>
				</div>


			</div>
			<div class="header-actions col-lg-5">
				<a class="btn" @onclick="@(async ev => { await Vm.CreateNew(); })">
					<MatIcon Icon="@MatIconNames.Add_circle"></MatIcon>
					<div class="header-cmd-label">Create</div>
				</a>
			</div>
		</div>

		@if (Vm.Items.Any() && Vm.IsLoadedData)
		{

			var groups = Vm.Items.GroupBy(it => it.Source.Group).ToDictionary(el => el.Key, el => el.ToList());

			<div class="row">
				<div class="col-lg-12 header-title">Workflow Configurations</div>
			</div>

			@foreach (KeyValuePair<string, List<WorkflowConfigurationVm>> entry in groups)
			{
				var groupName = entry.Key;
				var groupData = entry.Value;
				var rowIndex = 0;

				<div class="row">
					<div class="col-lg-12 group-title">@groupName</div>
				</div>

				@if (IsTableMode)
				{

					<div class="table-responsive list-table">

						<table class="table table-striped table-bordered table-hover">
							<thead>
								<tr>
									<th width="1%" class="nowrap center"></th>
									<th>Name</th>
									<th width="20%" class="nowrap center"></th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in groupData)
								{
									rowIndex++;

									@if (item.Source == null) continue;

									<tr @key="item.Source.Id">
										<td class="center nowrap">@rowIndex</td>
										<td>
											<div class="name-container">
												<div class="workflow-status" style="background-color: @item.StatusBackground;"></div>
												<div class="workflow-name">
													@item.ToString()
												</div>
											</div>
										</td>
										<td class="center list-cmd-container">
											<a class="btn btn-sm" @onclick="@(e => { Vm.ShowPropertyGrid(item); })">
												<MatIcon Icon="@MatIconNames.Settings"></MatIcon>
												<div class="list-cmd-label">Properties</div>
											</a>
											<a class="btn btn-sm" @onclick="@(async e => { await Vm.ManageWorkflowAsync(item); })">
												<MatIcon Icon="@MatIconNames.Gavel"></MatIcon>
												<div class="list-cmd-label">Manage</div>
											</a>
											<a class="btn btn-sm" @onclick="@(async e => { await Vm.OpenWorkflowInstancesAsync(item); })">
												<MatIcon Icon="@MatIconNames.Dashboard"></MatIcon>
												<div class="list-cmd-label">Intances</div>
											</a>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>


				}
				else
				{
					<div class="card-container">
						@foreach (var item in groupData)
						{
							rowIndex++;

							<div @key="item.Source.Id" class="card" style="border-color: @item.StatusBackground;">
								<div class="card-body">
									<h5 class="card-title">@item.ToString()</h5>

									<div class="card-cmd">
										<a class="btn btn-sm" @onclick="@(e => { Vm.ShowPropertyGrid(item); })">
											<MatIcon Icon="@MatIconNames.Settings"></MatIcon>
											<div class="list-cmd-label">Properties</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.ManageWorkflowAsync(item); })">
											<MatIcon Icon="@MatIconNames.Gavel"></MatIcon>
											<div class="list-cmd-label">Manage</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.OpenWorkflowInstancesAsync(item); })">
											<MatIcon Icon="@MatIconNames.Dashboard"></MatIcon>
											<div class="list-cmd-label">Intances</div>
										</a>
									</div>
								</div>
								<div class="card-footer bg-transparent"  style="background-color: @item.StatusBackground !important;"></div>
							</div>
						}
					</div>
				}
			}

		}
		@if (!Vm.IsLoadedData)
		{
			<Loader Settings="@LoaderSetting"></Loader>
		}

	</div>

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid Vm="Vm.PropertyGridVm"
									  Loader="Vm.LoadPropertyGrid"
									  CancelVisible="true"
									  HyperStore="Vm.HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnCancelProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

