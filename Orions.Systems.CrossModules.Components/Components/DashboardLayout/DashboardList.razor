@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common
@using Orions.Infrastructure.HyperMedia

@inherits BaseBlazorComponent

<div class="container-fluid">

    @if (DataList.Any() && isLoadedDataResult)
    {
        var rowIndex = 0;

        <h5> Dashboard List</h5>

        <button class="btn btn-outline-dark mb-2" @onclick="@(ev=> { SelectDashboard(new DashboardData()); })">Create</button>
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th scope="col-md-1"></th>
                        <th scope="col">Name</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in DataList)
                    {
                        rowIndex++;

                        <tr>
                            <td>@rowIndex</td>
                            <td class="dashboard-list-name" @onclick="@(ev => EditName(item))">@item.Name</td>
                            <td><button class="btn btn-outline-dark" @onclick="@(e => { SelectDashboard(item); })"> Select</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!isLoadedDataResult)
    {
        <div style="position:relative;">
            <div class="loading-bar"></div>
        </div>
    }

</div>


@if (isShowRenameDashboardModal)
{
    <div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header dashboard-modal-widget-header">
                    <h5 class="modal-title">Rename Dashboard Name</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { isShowRenameDashboardModal = false; } )">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <div class="form-group">
                                <label for="dashboardName">Name</label>
                                <input type="text" class="form-control" id="dashboardName" @bind="@SelectedDashboard.Name">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { isShowRenameDashboardModal = false; } )">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="(async e => { await SaveChanges(); } )">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@code{

    private bool isShowRenameDashboardModal;
    private bool isLoadedDataResult;
    private DashboardData SelectedDashboard;

    private List<DashboardData> DataList = new List<DashboardData>();

    [Parameter]
    public IHyperArgsSink HyperStore { get; set; }

    [Parameter]
    public EventCallback<DashboardData> OnSelect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HyperStore != null)
        {
            await LoadDashboarList();
        }
    }

    private async Task LoadDashboarList()
    {
        var datas = await HyperStore.FindAllAsync<DashboardData>();

        DataList = datas.ToList();

        isLoadedDataResult = true;

        StateHasChanged();
    }

    private void SelectDashboard(DashboardData data)
    {
        OnSelect.InvokeAsync(data);
    }

    private async Task SaveChanges()
    {
        var doc = new HyperDocument(SelectedDashboard);

        var args = new StoreHyperDocumentArgs(doc);
        var res = await HyperStore.ExecuteAsync(args);

        isShowRenameDashboardModal = false;
    }

    private void EditName(DashboardData data)
    {
        isShowRenameDashboardModal = true;
        SelectedDashboard = data;
    }
}

<style>
    .dashboard-list-name {
        cursor: pointer;
    }
</style>