@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common
@using Orions.Infrastructure.HyperMedia

@inherits BaseBlazorComponent

<div class="container-fluid">

	@if (DataList.Any() && isLoadedDataResult)
	{
		var rowIndex = 0;

		<button class="btn btn-outline-dark mb-2" @onclick="@(ev=> { SelectDashboard(new DashboardData()); })">Create</button>
		<div class="table-responsive">
			<table class="table table-striped table-bordered table-hover">
				<thead>
					<tr>
						<th scope="col"></th>
						<th class="w-75" scope="col">Name</th>
						<th class="w-25" scope="col"></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in DataList)
					{
						rowIndex++;

						<tr>
							<td>@rowIndex</td>
							<td class="dashboard-list-name" @onclick="@(ev => EditName(item))">@item.Name</td>
							<td class="text-center">
								<button class="btn btn-outline-dark" @onclick="@(e => { SelectDashboard(item); })"> Design</button>
								<button class="btn btn-outline-dark" @onclick="@(e => { SelectDashboard(item, true); })"> View</button>
								<button class="btn btn-outline-dark" @onclick="@(async e => { await DeleteDashboard(item); })"> Delete</button>
								<button class="btn btn-outline-dark" @onclick="@(e => { OpenPropertyGrid(item); })"> Edit</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}

	@if (!isLoadedDataResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

</div>

@if (isShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<PropertyGrid @ref="propGrid"
											  Loader="LoadDashboardOption"
											  CancelVisible="true"
											  HyperStore="HyperStore"
											  OKVisible="true"
											  CancelCommand="OnCancelProperty"
											  OkCommand="OnOkProperty">
							</PropertyGrid>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}


@if (isShowRenameDashboardModal)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Rename Dashboard Name</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { isShowRenameDashboardModal = false; } )">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<div class="form-group">
								<label for="dashboardName">Name</label>
								<input type="text" class="form-control" id="dashboardName" @bind="@SelectedDashboard.Name">
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { isShowRenameDashboardModal = false; } )">Close</button>
					<button type="button" class="btn btn-primary" @onclick="(async e => { await SaveChanges(); } )">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code{

	PropertyGrid propGrid;

	private bool isShowRenameDashboardModal;
	private bool isShowProperty;
	private bool isLoadedDataResult;
	private DashboardData SelectedDashboard;

	private List<DashboardData> DataList = new List<DashboardData>();

	[Parameter]
	public IHyperArgsSink HyperStore { get; set; }

	[Parameter]
	public EventCallback<DashboardData> OnSelectDesign { get; set; }

	[Parameter]
	public EventCallback<DashboardData> OnSelectView { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (HyperStore != null)
		{
			await LoadDashboarList();
		}
	}

	public async Task<object> LoadDashboardOption()
	{
		return SelectedDashboard.Option;
	}

	private async Task LoadDashboarList()
	{
		var datas = await HyperStore.FindAllAsync<DashboardData>();

		DataList = datas.ToList();

		isLoadedDataResult = true;

		StateHasChanged();
	}

	private void SelectDashboard(DashboardData data, bool showView = false)
	{
		if (showView)
		{
			OnSelectView.InvokeAsync(data);
			return;
		}

		OnSelectDesign.InvokeAsync(data);
	}

	private async Task SaveChanges()
	{
		var doc = new HyperDocument(SelectedDashboard);

		var args = new StoreHyperDocumentArgs(doc);
		var res = await HyperStore.ExecuteAsync(args);

		isShowRenameDashboardModal = false;
	}

	private async Task DeleteDashboard(DashboardData data)
	{
		var doc = new HyperDocument(data);
		var args = new DeleteHyperDocumentArgs(doc.Id);
		var res = await HyperStore.ExecuteAsync(args);

		DataList.RemoveAll(it => it.Id == data.Id);
	}

	private void EditName(DashboardData data)
	{
		isShowRenameDashboardModal = true;
		SelectedDashboard = data;
	}

	private void OpenPropertyGrid(DashboardData data)
	{
		isShowProperty = true;
		SelectedDashboard = data;
	}

	public void OnCancelProperty()
	{
		propGrid.CleanSourceCache();
		isShowProperty = false;
	}

	public async Task OnOkProperty() 
	{ 
		propGrid.CleanSourceCache();
		isShowProperty = false;

		await SaveChanges();
	}
}