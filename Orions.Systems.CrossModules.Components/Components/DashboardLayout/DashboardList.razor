@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common
@using Orions.Infrastructure.HyperMedia

@inherits BaseBlazorComponent<DashboardListVm>

@inject NavigationManager MyNavigationManager

<div class="container-fluid">

	<button class="btn btn-outline-dark mb-2" @onclick="@(async ev => { await Vm.SelectDashboardAsync(new DashboardData(), false, true); })">Create</button>

	@if (Vm.DataList.Any() && Vm.IsLoadedDataResult)
	{
		var rowIndex = 0;


		<div class="table-responsive">
			<table class="table table-striped table-bordered table-hover">
				<thead>
					<tr>
						<th width="1%" class="nowrap center"></th>
						<th width="5%" class="nowrap center">Group</th>
						<th>Name</th>
						<th width="5%" class="nowrap center">Published</th>
						<th width="5%" class="nowrap center">Tag</th>
						<th width="30%" class="nowrap center"></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Vm.DataList)
					{
						rowIndex++;

						<tr @key="item.Id">
							<td class="center nowrap">@rowIndex</td>
							<td class="center">@item.Group</td>
							<td class="dashboard-list-name" @onclick="@(async ev => await Vm.EditNameAsync(item))">@item.Name</td>
							<td class="center">
								<div class="form-check">
									<input type="checkbox" class="form-check-input" checked="@item.Published" disabled>
								</div>
							</td>
							<td class="center">
								@if (!string.IsNullOrWhiteSpace(item.Tag))
								{
									<a href="@(MyNavigationManager.Uri + "/" + item.Tag)">
										@item.Tag
									</a>
								}
							</td>
							<td class="center">
								<button class="btn btn-sm btn-outline-dark" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, false); })"> Design</button>
								<button class="btn btn-sm btn-outline-dark" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, true); })"> View</button>
								<button class="btn btn-sm btn-outline-dark" @onclick="@(async e => { await Vm.DeleteDashboard(item); })"> Delete</button>
								<button class="btn btn-sm btn-outline-dark" @onclick="@(async e => { await Vm.OpenPropertyGridAsync(item); })"> Edit</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}

	@if (!Vm.IsLoadedDataResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

</div>

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<PropertyGrid @ref="propGrid"
											  Loader="Vm.LoadDashboard"
											  CancelVisible="true"
											  HyperStore="HyperStore"
											  OKVisible="true"
											  CancelCommand="Vm.OnCancelProperty"
											  OkCommand="Vm.OnOkProperty">
							</PropertyGrid>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}


@if (Vm.IsShowRenameDashboardModal)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Rename Dashboard Name</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowRenameDashboardModal = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<div class="form-group">
								<label for="dashboardName">Name</label>
								<input type="text" class="form-control" id="dashboardName" @bind="@Vm.SelectedDashboard.Name" />
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { Vm.IsShowRenameDashboardModal = false; })">Close</button>
					<button type="button" class="btn btn-primary" @onclick="(async e => { await Vm.SaveChanges(); })">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code{

	PropertyGrid _propGrid;
	PropertyGrid propGrid
	{
		get => _propGrid;
		set
		{
			_propGrid = value;
			Vm.PropertyGridVm = value.Vm;
		}
	}

	[Parameter]
	public IHyperArgsSink HyperStore
	{
		get => Vm.HyperStore;
		set => Vm.HyperStore = value;
	}

	[Parameter]
	public EventCallback<DashboardData> OnSelectDesign
	{
		get => Vm.OnSelectDesign;
		set => Vm.OnSelectDesign = value;
	}

	[Parameter]
	public EventCallback<DashboardData> OnSelectView
	{
		get => Vm.OnSelectView;
		set => Vm.OnSelectView = value;
	}

	protected override async Task OnParametersSetAsync()
	{
		await Vm.InitAsync();
	}


}