@namespace Orions.Systems.CrossModules.Components

@using Orions.Common
@using Orions.Node.Common
@using System.IO
@using System.Globalization
@using Syncfusion.EJ2.Blazor.Navigations
@using Microsoft.JSInterop

@inherits BaseBlazorComponent<DashboardListVm>

@inject NavigationManager MyNavigationManager
@inject IJSRuntime JSRuntime

<div class="dashoboard-list-container container-fluid ">

	<div class="row dashboard-list-header">
		<div class="dashboard-list-header-filter col-lg-7">
			<div class="input-group mt-3">
				<input type="text" class="form-control" @bind="@Vm.SearchInput" placeholder="Search" aria-label="Search" aria-describedby="basic-search">
				<div class="input-group-append dashoboard-list-search">
					<button @onclick="@Vm.OnSearchBtnClick" class="btn btn-outline-secondary" type="button">
						<MatIcon Class="dashoboard-list-search-icon" Icon="@MatIconNames.Search"></MatIcon>
						<span>Search</span>
					</button>
				</div>
			</div>

			<div class="dashboard-list-header-accordion-cmd">
				<a class="btn btn-sm" @onclick="@(e =>{ IsAccordionMode = !IsAccordionMode; })">
					@if (IsAccordionMode)
					{
						<MatIcon Icon="@MatIconNames.Notes"></MatIcon>
					}
					else
					{
						<MatIcon Icon="@MatIconNames.View_compact"></MatIcon>
					}
				</a>
				@if (IsAccordionMode)
				{
					<a class="btn btn-sm" @onclick="CollapseAll">COLLAPSE ALL</a>
					<a class="btn btn-sm" @onclick="ExpandAll">EXPAND ALL</a>
				}
			</div>
		</div>
		<div class="dashboard-list-header-actions col-lg-5">
			<a class="btn" @onclick="@(async ev => { await Vm.CreateNewDashboard(); })">
				<MatIcon Icon="@MatIconNames.Add_circle"></MatIcon>
				<div class="dashboard-list-header-cmd-label">Create</div>
			</a>

			<a class="btn" @onclick="(e => { Vm.IsShowModalImportProject = true; })">
				<MatIcon Icon="@MatIconNames.Settings_backup_restore"></MatIcon>
				<div class="dashboard-list-header-cmd-label">Import</div>
			</a>
		</div>
	</div>


	@if (Vm.DataList.Any() && Vm.IsLoadedDataResult)
	{
		var rowIndex = 0;
		var groups = Vm.GetDataGroups();

		@if (IsAccordionMode)
		{
			<div class=" dashoboard-list-accordion">
				<EjsAccordion @ref="Accordion" ExpandMode="ExpandMode.Multiple">
					<AccordionItems>
						@foreach (var dict in groups)
						{
							var rowGroupIndex = 0;

							<AccordionItem CssClass="dashoboard-list-accordion-item">
								<HeaderTemplate>
									<div class="dashoboard-list-group-header">
										<MatIcon Icon="@MatIconNames.Layers"></MatIcon>
										<span>@dict.Key</span>
									</div>
								</HeaderTemplate>
								<ContentTemplate>
									<div class="table-responsive dashoboard-list-table">
										<table class="table table-striped table-bordered table-hover">
											<thead>
												<tr>
													<th width="1%" class="nowrap center"></th>
													@*<th width="5%" class="nowrap center">Group</th>*@
													<th>Name</th>
													<th width="5%" class="nowrap center">Published</th>
													<th width="5%" class="nowrap center">Tag</th>
													<th width="30%" class="nowrap center"></th>
												</tr>
											</thead>
											<tbody>
												@foreach (var item in dict.Value ?? new List<DashboardData>())
												{
													rowGroupIndex++;


													<tr @key="item.Id">
														<td class="center nowrap">@rowGroupIndex</td>
														@*<td class="center">@item.Group</td>*@
														<td class="dashboard-list-name" @onclick="@(async ev => await Vm.EditNameAsync(item))">@item.Name</td>
														<td class="center">
															<div class="form-check">
																<input type="checkbox" class="form-check-input" checked="@item.Published" disabled>
															</div>
														</td>
														<td class="dashboard-list-tag center">
															@if (!string.IsNullOrWhiteSpace(item.Tag))
															{
																<a class="badge badge-secondary" @onclick="@(async e => { await OpenTagLink(item); })">
																	@item.Tag
																</a>
															}
														</td>
														<td class="center dashboard-list-cmd-container">
															<a class="btn btn-sm" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, false); })">
																<MatIcon Icon="@MatIconNames.Layers"></MatIcon>
																<div class="dashboard-list-cmd-label">Design</div>
															</a>
															<a class="btn btn-sm" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, true); })">
																<MatIcon Icon="@MatIconNames.Open_in_new"></MatIcon>
																<div class="dashboard-list-cmd-label">View</div>
															</a>
															<a class="btn btn-sm" @onclick="@(async e => { await Vm.OpenPropertyGridAsync(item); })">
																<MatIcon Icon="@MatIconNames.Edit"></MatIcon>
																<div class="dashboard-list-cmd-label">Edit</div>
															</a>
															<a class="btn btn-sm" @onclick="@(async e => await ExportDashboard(item) )">
																<MatIcon Icon="@MatIconNames.Backup"></MatIcon>
																<div class="dashboard-list-cmd-label">Export</div>
															</a>
															<a class="btn btn-sm dashboard-list-cmd-delete ml-3" @onclick="@(e => { Vm.ShowDeleteConfirmationDialog(item); })">
																<MatIcon Icon="@MatIconNames.Delete"></MatIcon>
																<div class="dashboard-list-cmd-label">Delete</div>
															</a>
														</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</ContentTemplate>
							</AccordionItem>

						}
					</AccordionItems>
				</EjsAccordion>
			</div>

		}


		@if (!IsAccordionMode)
		{
			<div class=" dashoboard-list-simple">
				<div class="table-responsive dashoboard-list-table">
					<table class="table table-striped table-bordered table-hover">
						<thead>
							<tr>
								<th width="1%" class="nowrap center"></th>
								<th width="5%" class="nowrap center">Group</th>
								<th>Name</th>
								<th width="5%" class="nowrap center">Published</th>
								<th width="5%" class="nowrap center">Tag</th>
								<th width="30%" class="nowrap center"></th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in Vm.DataList)
							{
								rowIndex++;

								<tr @key="item.Id">
									<td class="center nowrap">@rowIndex</td>
									<td class="center dashboard-group-btn" @onclick="@(async ev => await Vm.OnClickGroup(ev, item.Group))">@item.Group</td>
									<td class="dashboard-list-name" @onclick="@(async ev => await Vm.EditNameAsync(item))">@item.Name</td>
									<td class="center">
										<div class="form-check">
											<input type="checkbox" class="form-check-input" checked="@item.Published" disabled>
										</div>
									</td>
									<td class="dashboard-list-tag center">
										@if (!string.IsNullOrWhiteSpace(item.Tag))
										{
											<a class="badge badge-secondary" @onclick="@(async e => { await OpenTagLink(item); })">
												@item.Tag
											</a>
										}
									</td>
									<td class="center dashboard-list-cmd-container">
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, false); })">
											<MatIcon Icon="@MatIconNames.Layers"></MatIcon>
											<div class="dashboard-list-cmd-label">Design</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.SelectDashboardAsync(item, true); })">
											<MatIcon Icon="@MatIconNames.Open_in_new"></MatIcon>
											<div class="dashboard-list-cmd-label">View</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => { await Vm.OpenPropertyGridAsync(item); })">
											<MatIcon Icon="@MatIconNames.Edit"></MatIcon>
											<div class="dashboard-list-cmd-label">Edit</div>
										</a>
										<a class="btn btn-sm" @onclick="@(async e => await ExportDashboard(item) )">
											<MatIcon Icon="@MatIconNames.Backup"></MatIcon>
											<div class="dashboard-list-cmd-label">Export</div>
										</a>
										<a class="btn btn-sm dashboard-list-cmd-delete ml-3" @onclick="@(e => { Vm.ShowDeleteConfirmationDialog(item); })">
											<MatIcon Icon="@MatIconNames.Delete"></MatIcon>
											<div class="dashboard-list-cmd-label">Delete</div>
										</a>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		}

	}

	@if (!Vm.IsLoadedDataResult)
	{
		<Loader Settings="@LoaderSetting"></Loader>
	}

</div>

@if (Vm.IsShowModalImportProject)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered " role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Import Dashboard</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowModalImportProject = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="row">
						<div class="col-lg-12">
							<div class="form-check">
								<input id="importAsNewCheckbox" class="form-check-input" type="checkbox" checked="@ImportDashboardAsNew" />
								<label class="form-check-label" for="importAsNewCheckbox">Don't replace dashboard if exist.</label>
							</div>
						</div>
					</div>
					<div class="row">
						<div class="col-lg-12 p-3">
							<BlazorInputFile OnChange="(async(arg) => { await HandleInputFileSelection(arg); })" />
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid @ref="propGrid"
									  Loader="Vm.LoadDashboard"
									  CancelVisible="true"
									  HyperStore="HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnOkProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.IsShowRenameDashboardModal)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Rename Dashboard Name</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowRenameDashboardModal = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<div class="form-group">
								<label for="dashboardName">Name</label>
								<input type="text" class="form-control" id="dashboardName" @bind="@Vm.SelectedDashboard.Name" />
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { Vm.IsShowRenameDashboardModal = false; })">Close</button>
					<button type="button" class="btn btn-primary" @onclick="(async e => { await Vm.SaveChanges(); })">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.ShowConfirmDeleteDashboard)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Delete Dashboard</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.ShowConfirmDeleteDashboard = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<p class="text-danger">Are you sure to delete dashboard?</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-danger" @onclick="@(async e => { await Vm.OnDeleteDashboard(); })">Delete</button>
					<button type="button" class="btn btn-secondary" @onclick="(e => { Vm.ShowConfirmDeleteDashboard = false; })" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code{

	private EjsAccordion Accordion;

	private bool ImportDashboardAsNew = true;

	private bool IsAccordionMode = false;

	private LoaderConfiguration LoaderSetting { get; set; } = new LoaderConfiguration() { Visible = true };

	PropertyGrid _propGrid;
	PropertyGrid propGrid
	{
		get => _propGrid;
		set
		{
			_propGrid = value;
			Vm.PropertyGridVm = value.Vm;
		}
	}

	[Parameter]
	public IHyperArgsSink HyperStore
	{
		get => Vm.HyperStore;
		set => Vm.HyperStore = value;
	}

	[Parameter]
	public string Filter
	{
		get => Vm.SearchInput;
		set => Vm.SearchInput = value;
	}

	[Parameter]
	public EventCallback<string> OnSelectDesign
	{
		get => Vm.OnSelectDesign;
		set => Vm.OnSelectDesign = value;
	}

	[Parameter]
	public EventCallback<string> OnSelectView
	{
		get => Vm.OnSelectView;
		set => Vm.OnSelectView = value;
	}

	[Parameter]
	public EventCallback<string> OnSearch
	{
		get => Vm.OnSearch;
		set => Vm.OnSearch = value;
	}

	[Parameter]
	public EventCallback<string> OnSelectTag { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await Vm.InitAsync();
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		StateHasChanged();
	}



	private async Task HandleInputFileSelection(IFileListEntry[] files)
	{
		var file = files.FirstOrDefault();
		if (file != null)
		{
			using (var ms = new MemoryStream())
			{
				await file.Data.CopyToAsync(ms);
				var res = ms.ToArray();

				await Vm.ImportProject(res, ImportDashboardAsNew);

				Vm.IsShowModalImportProject = false;
			}
		}
	}

	private async Task OpenTagLink(DashboardData item)
	{
		await OnSelectTag.InvokeAsync(item.Tag);
	}

	private async Task CollapseAll()
	{
		for (var i = 0; i < Accordion.Items.Count; i++)
		{
			await Accordion.ExpandItem(false, i);
		}
	}

	private async Task ExpandAll()
	{
		for (var i = 0; i < Accordion.Items.Count; i++)
		{
			await Accordion.ExpandItem(true, i);
		}
	}

	private async Task ExportDashboard(DashboardData data)
	{
		if (data == null) return;

		var projectJson = JsonHelper.Serialize(data);

		var currentTime = DateTime.UtcNow.ToString("yy-MM-dd-H-mm", CultureInfo.InvariantCulture);

		var fileName = $"exported-{data?.Name}-{ currentTime }.json";

		await JSRuntime.InvokeAsync<object>("Orions.FileSaveAs.init", new object[] { fileName, projectJson });
	}

}