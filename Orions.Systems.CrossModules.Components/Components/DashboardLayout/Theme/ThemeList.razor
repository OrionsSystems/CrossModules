@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common

@inherits BaseBlazorComponent<ThemeVm>

<div class="container-fluid theme-container-list">

	<div class="row mb-2">
		<div class="col-lg-8">
			<h3 class="theme-container-list-title">CSS Themes</h3>
		</div>
		<div class="col-lg-4 theme-list-header">
			<a class="btn " @onclick="@Vm.CreateTheme">
				<MatIcon Icon="@MatIconNames.Add_circle"></MatIcon>
				<div class="dashboard-list-header-cmd-label">Create New</div>
			</a>
		</div>
	</div>

	@if (Vm.DataList.Any() && Vm.IsLoadedDataResult)
	{
		var rowIndex = 0;

		<div class="table-responsive">
			<table class="table table-striped table-bordered table-hover">
				<thead>
					<tr>
						<th width="1%" class="nowrap center"></th>
						<th width="5%" class="nowrap center">Group</th>
						<th>Name</th>
						<th width="30%" class="nowrap center"></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Vm.DataList)
					{
						rowIndex++;

						<tr @key="item.Id">
							<td class="center nowrap">@rowIndex</td>
							<td class="center">@item.Group</td>
							<td class="theme-list-name"><a @onclick="@(async e => { await Vm.OpenThemeAsync(item); })">@item.Name</a></td>
							<td class="center theme-cmd">
								<a class="btn btn-sm theme-cmd-view" @onclick="@(async e => { await Vm.OpenThemeAsync(item); })">
									<MatIcon Icon="@MatIconNames.Open_in_new"></MatIcon>
									<div class="theme-list-cmd-label">View</div>
								</a>
								<a class="btn btn-sm theme-cmd-edit" @onclick="@(async e => { await Vm.OpenPropertyGridAsync(item); })">
									<MatIcon Icon="@MatIconNames.Edit"></MatIcon>
									<div class="theme-list-cmd-label">Edit</div>
								</a>
								<a class="btn btn-sm theme-cmd-delete" @onclick="@(e => { Vm.ShowDeleteConfirmationDialog(item); })">
									<MatIcon Icon="@MatIconNames.Delete"></MatIcon>
									<div class="theme-list-cmd-label">Delete</div>
								</a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}

	@if (!Vm.IsLoadedDataResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

</div>


@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid @ref="propGrid"
									  Loader="Vm.LoadTheme"
									  CancelVisible="true"
									  HyperStore="HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnOkProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.ShowConfirmDeleteTheme)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Delete Theme</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.ShowConfirmDeleteTheme = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<p class="text-danger">Are you sure to delete theme?</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="(e => { Vm.ShowConfirmDeleteTheme = false; })" data-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" @onclick="@(async e => { await Vm.OnDeleteTheme(); })">Delete</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code {

	private PropertyGrid _propGrid;
	public PropertyGrid propGrid
	{
		get => _propGrid;
		set
		{
			_propGrid = value;
			Vm.PropertyGridVm = value.Vm;
		}
	}

	[Parameter]
	public IHyperArgsSink HyperStore
	{
		get { return Vm.HyperStore; }
		set { Vm.HyperStore = value; }
	}

	[Parameter]
	public EventCallback<StyleTheme> OnOpenTheme
	{
		get => Vm.OnOpenTheme;
		set => Vm.OnOpenTheme = value;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		await Vm.InitAsync();
	}
}
