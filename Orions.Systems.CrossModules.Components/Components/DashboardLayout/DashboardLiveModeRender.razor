@namespace Orions.Systems.CrossModules.Components

@inherits BaseBlazorComponent

@if (DashboardVm.Source.Rows.Any())
{

	@foreach (var row in DashboardVm.Source.Rows)
	{
		<div class="row">
			@foreach (var column in row.Columns)
			{
				<div @key="column.Id" class="col-lg-@column.Size">

					@if (column.InnerRows.Count == 0)
					{
						<div class="dashboard-element-container-live">
							<div class="dashboard-content-live">
								@if (column.Widget != null && column.Widget.IsVisible)
								{
									<WidgetDynamicComponent @key="column.Widget.Id"
																	DataContext="@DashboardVm.ObtainWidgetVm(column.Widget)"
																	DashboardVm="DashboardVm" />
								}
							</div>
						</div>
					}
					else
					{
						@foreach (var innerRow in column.InnerRows)
						{
							<div class="row">
								@foreach (var innerColumn in innerRow.Columns)
								{
									<div class="col-lg-@innerColumn.Size">
										@if (innerColumn.Widget != null && innerColumn.Widget.IsVisible)
										{
											<WidgetDynamicComponent @key="innerColumn.Widget.Id"
																			DataContext="@DashboardVm.ObtainWidgetVm(innerColumn.Widget)"
																			DashboardVm="DashboardVm" />
										}
									</div>
								}
							</div>
						}
					}

				</div>
			}
		</div>
	}
}


@if (theme != null)
{
	<style>
		@((MarkupString)theme)
	</style>
}


@if (DashboardVm.Source.EnableStyles)
{
	@((MarkupString)DashboardVm.Source.Styles)
}

@code{

	[Parameter]
	public DashboardVm DashboardVm { get; set; }

	private string theme;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		theme = await LoadThemeRaw();
	}

	private async Task<string> LoadThemeRaw()
	{
		var theme = await DashboardVm.GetThemeAsync();

		if (theme == null) return null;

		return theme.Styles;
	}

}
