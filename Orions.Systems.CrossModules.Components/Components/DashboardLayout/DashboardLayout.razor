@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor.Popups
@using Microsoft.JSInterop
@using System.IO
@using System.Globalization

@inherits DashboardLayoutComponent

@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster

@inject ILocalStorageService LocalStore

<div class="container-fluid">

	<div class="dashboard-header row">
		<div class="col">
			@if (!string.IsNullOrEmpty(Data?.Name) && !IsHideTitle)
			{
				<h4 class="dashboard-title dashboard-list-name" @onclick="OpenRenameDialog">
					<IconLayout></IconLayout>
					@Data?.Name
				</h4>
			}

			@if (!HideModeOption)
			{
				<div class="float-right">

					<a class="btn dashboard-cmd-btn" @onclick="OnBackToList">
						<EjsTooltip Content="@("Back to list of dashboards")">
							<MatIcon Icon="@MatIconNames.Storage"></MatIcon>
						</EjsTooltip>
					</a>

					@if (IsEditMode)
					{
						<a class="btn dashboard-cmd-btn" @onclick="OnSave">
							<EjsTooltip Content="@("Save dashboard")">
								<MatIcon Icon="@MatIconNames.Save"></MatIcon>
							</EjsTooltip>
						</a>
						<a class="btn dashboard-cmd-btn" @onclick="(e => { Vm.IsShowModalImportProject = true; })">
							<EjsTooltip Content="@("Import dashboard")">
								<MatIcon Icon="@MatIconNames.Settings_backup_restore"></MatIcon>
							</EjsTooltip>
						</a>
						<a class="btn dashboard-cmd-btn" @onclick="ExportProject">
							<EjsTooltip Content="@("Export dashboard")">
								<MatIcon Icon="@MatIconNames.Backup"></MatIcon>
							</EjsTooltip>
						</a>
					}

					<div class="d-inline-block ml-2">
						<EjsTooltip Content="@("Switch to Live or design mode")">
							<SlideToggle Checked="@IsPreviewMode" CheckedChanged="ChangeMode" Label="Live Mode" Disabled="DisableModeOption"></SlideToggle>
						</EjsTooltip>
					</div>

				</div>
			}

		</div>
	</div>

	@ChildContent

	@if (IsEditMode)
	{
		@if (Data.Rows.Any())
		{
			var firstRowId = Data.Rows.FirstOrDefault()?.Id;

			@foreach (var row in Data.Rows)
			{
				<div @key="row.Id" class="row dashboard-row-container">

					@{
						var lastCoumnId = row.Columns.Last.Value.Id;
					}

					@if (IsEditMode)
					{
						<div class="dashboard-between-row">

							<div class="dashboard-between-row-container">
								@if (firstRowId != row.Id)
								{
									<a class="btn dashboard-swap-row" @onclick="(e => Vm.OnSwapRows(e, row))">
										<EjsTooltip Content="@("Swap rows")">
											<IconSwapRow></IconSwapRow>
										</EjsTooltip>
									</a>
								}

								<a class="btn dahsboard-clone-row" @onclick="(e => Vm.CloneRow(e, row))">
									<EjsTooltip Content="@("Clone row")">
										<IconClone></IconClone>
									</EjsTooltip>
								</a>
							</div>
						</div>
					}

					@foreach (var column in row.Columns)
					{
						<div @key="column.Id" class="col-lg-@column.Size">

							<div class="dashboard-element-container dashboard-shadow">

								<div class="dashboard-content">
									@if (IsEditMode)
									{
										<div class="dashboard-element-commands">
											@if (Vm.HasPreviousColumn(row, column))
											{
												<a class="btn dashboard-element-commands-prev" @onclick="(e => Vm.IncreaseSizeLeft(e, row, column))">
													<EjsTooltip Content="@("Increase column size into left")">
														<IconArrowLeft></IconArrowLeft>
													</EjsTooltip>
												</a>
											}

											@if (Vm.HasNextColumn(row, column))
											{
												<a class="btn dashboard-element-commands-next" @onclick="(e => Vm.IncreaseSizeRight(e, row, column))">
													<EjsTooltip Content="@("Increase column size into right")">
														<IconArrowRight></IconArrowRight>
													</EjsTooltip>
												</a>
											}
											<a class="btn dashboard-element-commands-delete" @onclick="@(el => { Vm.DeleteColumn(el, row, column); })">
												<EjsTooltip Content="@("Delete column")">
													<IconClose></IconClose>
												</EjsTooltip>
											</a>
											@if (column.Size > 1)
											{
												<a class="btn dashboard-element-commands-split-horisontal" @onclick="@(el => { Vm.SplitColumn(el, row, column); })">
													<EjsTooltip Content="@("Split column horizontal")">
														<IconSplitHorisontal></IconSplitHorisontal>
													</EjsTooltip>
												</a>
											}
											@if (column.InnerRows != null && column.Widget == null && column.InnerRows.Count == 0)
											{
												<a class="btn dashboard-element-commands-split-vertical" @onclick="@(el => { Vm.InitSplitElementVerical(el, row, column); })">
													<EjsTooltip Content="@("Split column vertical")">
														<IconSplitVertical></IconSplitVertical>
													</EjsTooltip>
												</a>
											}




										</div>
									}

									<div class="clearfix"></div>
									<div class="dashboard-widget-container">

										@if (column.Widget == null)
										{
											@if (column.InnerRows.Count == 0)
											{
												<div class="dashboard-widget-add">
													<a class="dashboard-widget-add-icon" @onclick="(e => Vm.OpenWidgetModal(e, column))">
														<EjsTooltip Content="@("Add widget")">
															<IconAdd></IconAdd>
														</EjsTooltip>
													</a>
												</div>
											}
											else
											{
												var firstInnerRowId = column.InnerRows.FirstOrDefault()?.Id;

												<div class="dashboard-widget-inner-container">
													@foreach (var innerRow in column.InnerRows)
													{
														@if (IsEditMode)
														{
															<div class="dashboard-inner-row-commands">

																@if (firstInnerRowId != innerRow.Id)
																{
																	<a class="btn dashboard-swap-row" @onclick="(e => Vm.OnSwapInnerRows(e, column, innerRow))">
																		<EjsTooltip Content="@("Swap inner rows")">
																			<IconSwapRow></IconSwapRow>
																		</EjsTooltip>
																	</a>
																}

																<a class="btn dahsboard-clone-row" @onclick="(e => Vm.CloneInnerRow(e, column, innerRow))">
																	<EjsTooltip Content="@("Clone inner row")">
																		<IconClone></IconClone>
																	</EjsTooltip>
																</a>
															</div>
														}

														<div class="dashboard-widget-inner-container-item row">
															@foreach (var innerColumn in innerRow.Columns)
															{
																<div @key="innerColumn.Id" class="dashboard-widget-inner-container-item-element col-lg-@innerColumn.Size">
																	<div class="dashboard-widget-inner-container-data">
																		@if (IsEditMode)
																		{
																			<div class="dashboard-element-commands">
																				@if (column.Size > 1)
																				{
																					<a class="btn dashboard-element-commands-split-horisontal" @onclick="@(el => { Vm.SplitColumn(el, innerRow, innerColumn); })">
																						<EjsTooltip Content="@("Split inner column horizontal")">
																							<IconSplitHorisontal></IconSplitHorisontal>
																						</EjsTooltip>
																					</a>
																				}
																				@if (column.InnerRows != null && column.Widget == null && column.InnerRows.Count == 0)
																				{
																					<a class="btn dashboard-element-commands-split-vertical" @onclick="@(el => { Vm.InitSplitElementVerical(el, innerRow, innerColumn); })">
																						<EjsTooltip Content="@("Split inner column vertical")">
																							<IconSplitVertical></IconSplitVertical>
																						</EjsTooltip>
																					</a>
																				}
																				<a class="btn dashboard-element-commands-delete" @onclick="@(el => { Vm.DeleteColumn(el, innerRow, innerColumn, column); })">
																					<EjsTooltip Content="@("Delete inner column")">
																						<IconClose></IconClose>
																					</EjsTooltip>
																				</a>
																			</div>
																		}

																		@if (innerColumn.Widget == null)
																		{
																			<div class="dashboard-widget-add">
																				<EjsTooltip Content="@("Add widget")">
																					<a class="dashboard-widget-add-icon" title="Add Widget" @onclick="(e => Vm.OpenWidgetModal(e, innerColumn))">
																						<IconAdd></IconAdd>
																					</a>
																				</EjsTooltip>
																			</div>
																		}
																		else
																		{

																			var innerSlideWidget = innerColumn.Widget as SlideContainerWidget;

																			<div class="dashboard-widget-container-flex">
																				<div class="dashboard-widget-icon">
																					@((MarkupString)innerColumn.Widget.GetIcon())
																				</div>
																				<div class="dashboard-widget-data-container">
																					<div class="dashboard-widget-label">
																						@innerColumn.Widget.Label
																					</div>
																					<div class="dashboard-widget-commands">
																						<a class="btn dashboard-widget-command-settings" @onclick="(e => Vm.OpenWidgetProperty(e, innerColumn))">
																							<EjsTooltip Content="@("Widget property")">
																								<IconSettings></IconSettings>
																							</EjsTooltip>
																						</a>
																						<a class="btn dashboard-widget-command-visible @(innerColumn.Widget.IsVisible ? "dashboard-widget-command-enable" : "")" @onclick="(e => Vm.ToggleVisibility(e, innerColumn))">
																							<EjsTooltip Content="@("Enable/disable widget")">
																								<IconVisible></IconVisible>
																							</EjsTooltip>
																						</a>
																						<a class="btn dashboard-widget-command-settings" @onclick="(e => CopyWidget(e, innerColumn.Widget))">
																							<EjsTooltip Content="@("Copy inner widget")">
																								<IconClone></IconClone>
																							</EjsTooltip>
																						</a>
																						<a class="btn dashboard-widget-command-clean" @onclick="(e => Vm.CleanWidget(e, innerColumn))">
																							<EjsTooltip Content="@("Clean widget")">
																								<IconClean></IconClean>
																							</EjsTooltip>
																						</a>
																					</div>
																				</div>
																			</div>

																			@if (innerSlideWidget != null && innerSlideWidget.Data != null)
																			{
																				@foreach (var slWdg in innerSlideWidget.Data)
																				{
																					<div class="dashboard-slide-container">
																						<div class="dashboard-widget-container-flex">
																							<div class="dashboard-widget-icon">
																								@((MarkupString)slWdg.GetIcon())
																							</div>
																							<div class="dashboard-widget-data-container">
																								<div class="dashboard-widget-label">
																									@slWdg.Label
																								</div>
																								<div class="dashboard-widget-commands">
																									<a class="btn dashboard-widget-command-settings" @onclick="(e => Vm.OpenWidgetProperty(e, innerColumn))">
																										<EjsTooltip Content="@("Widget property")">
																											<IconSettings></IconSettings>
																										</EjsTooltip>
																									</a>
																									<a class="dashboard-widget-command-visible @(slWdg.IsVisible ? "dashboard-widget-command-enable" : "")">
																										<EjsTooltip Content="@("Enable/disable widget")">
																											<IconVisible></IconVisible>
																										</EjsTooltip>
																									</a>
																								</div>
																							</div>
																						</div>
																					</div>
																				}
																			}

																		}
																	</div>
																</div>
															}
														</div>
													}
													<div class="dashboard-widget-inner-add">
														<a class="btn btn-outline-dark" style="padding: 5px 10px !important;" title="Add inner row" @onclick="@(el => { Vm.AddInnerRow(el, row, column); })"> Add</a>
													</div>
												</div>
											}

										}
										else
										{
											var slideWidget = column.Widget as SlideContainerWidget;

											<div class="dashboard-widget-container-flex">
												<div class="dashboard-widget-icon" @ondblclick="(e => Vm.OpenWidgetProperty(e, column))">
													@((MarkupString)column.Widget.GetIcon())
												</div>
												<div class="dashboard-widget-data-container">
													<div class="dashboard-widget-label">
														@column.Widget.Label
													</div>
													<div class="dashboard-widget-commands">
														<a class="btn dashboard-widget-command-settings" @onclick="(e => Vm.OpenWidgetProperty(e, column))">
															<EjsTooltip Content="@("Widget properties")">
																<IconSettings></IconSettings>
															</EjsTooltip>
														</a>
														<a class="btn dashboard-widget-command-visible @(column.Widget.IsVisible ? "dashboard-widget-command-enable" : "")" @onclick="(e => Vm.ToggleVisibility(e, column))">
															<EjsTooltip Content="@("Enable or disable widget")">
																<IconVisible></IconVisible>
															</EjsTooltip>
														</a>
														<a class="btn dashboard-widget-command-settings" @onclick="(e => CopyWidget(e, column.Widget))">
															<EjsTooltip Content="@("Copy widget")">
																<IconClone></IconClone>
															</EjsTooltip>
														</a>
														<a class="btn dashboard-widget-command-clean" title="Clean Widget" @onclick="(e => Vm.CleanWidget(e, column))">
															<EjsTooltip Content="@("Clean Widget")">
																<IconClean></IconClean>
															</EjsTooltip>
														</a>
													</div>
												</div>
											</div>

											@if (slideWidget != null && slideWidget.Data != null)
											{
												@foreach (var slWdg in slideWidget.Data)
												{
													<div class="dashboard-slide-container">
														<div class="dashboard-widget-container-flex">
															<div class="dashboard-widget-icon">
																@((MarkupString)slWdg.GetIcon())
															</div>
															<div class="dashboard-widget-data-container">
																<div class="dashboard-widget-label">
																	@slWdg.Label
																</div>
																<div class="dashboard-widget-commands">
																	<a class="btn dashboard-widget-command-visible @(slWdg.IsVisible ? "dashboard-widget-command-enable" : "")">
																		<EjsTooltip Content="@("Enable or disable widget")">
																			<IconVisible></IconVisible>
																		</EjsTooltip>
																	</a>
																</div>
															</div>
														</div>
													</div>
												}
											}
										}

									</div>
								</div>

								@if (IsEditMode && EnableBetweenBox && lastCoumnId != column.Id)
								{
									<div class="dashboard-between-content" @onmouseover="(e => { column.ShowBetweenCommands = true; })" @onmouseout="(e => { column.ShowBetweenCommands = false; })">

										@if (true || column.ShowBetweenCommands)
										{
											<div class="dashboard-swap-column" @onclick="(e => Vm.OnSwapColumns(e, row, column))">
												<EjsTooltip Content="@("Swap columns")">
													<IconSwapColumn></IconSwapColumn>
												</EjsTooltip>
											</div>
											<div id="@column.Id"
												  class="btn dashboard-dragbar"
												  @onmousedown="Vm.OnMouseDownDraging"
												  @onmousemove="(e => Vm.OnMouseMoveDraging(e, row, column))">
												<EjsTooltip Content="@("Move in element by draging")">
													<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
														  viewBox="0 0 30 30">
														<g>
															<rect x="13.54" y="0.81" width="2.91" height="28.38" />
															<polygon points="12.04,20.72 12.04,9.39 6.16,15" />
															<polygon points="17.96,20.96 17.96,9.63 23.84,15.24" />
														</g>
													</svg>
												</EjsTooltip>
											</div>
										}


									</div>
								}
							</div>
						</div>
					}
				</div>
			}
		}

		@if (IsEditMode)
		{
			<div class="row">
				<div class="col text-center">
					<button class="btn btn-outline-dark" @onclick="Vm.OnAddRow"> Add Row</button>
				</div>
			</div>
		}
	}
	else
	{
		<DashboardLiveModeRender DashboardVm="@Vm" />
	}

</div>


@if (Vm.IsShowModalWidget)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Available Widgets</h5>
					<a class="btn dashboard-widget-command-paste" @onclick="ReadSavedWidget">
						<EjsTooltip Content="@("Paste copied wodget")">
							<IconClone></IconClone>
						</EjsTooltip>
					</a>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowModalWidget = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body dashboard-modal-widget-body">
					<div class="modal-dashboard-widget-container">
						<ul>
							@foreach (var widgetType in Vm.AvailableWidgets)
							{
								var widget = Vm.LoadWidget(widgetType);

								<li class="modal-dashboard-widget-element-list" @onclick="(e => Vm.AddSelectedWidget(e, widgetType))">
									<div class="modal-dashboard-widget-element-container">
										<div class="dashboard-modal-widget-element-icon">
											@((MarkupString)widget.GetIcon())
										</div>
										<div class="dashboard-modal-widget-element-label">
											@widget.Label
										</div>
									</div>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<PropertyGrid Vm="Vm.PropGridVm"
									  Loader="Vm.GetSelectedColumnWidget"
									  CancelVisible="true"
									  HyperStore="Vm.HyperStore"
									  OKVisible="true"
									  CancelCommand="Vm.OnCancelProperty"
									  OkCommand="Vm.OnCancelProperty">
					</PropertyGrid>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (isShowRenameDashboardModal)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Rename Dashboard Name</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { isShowRenameDashboardModal = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<div class="form-group">
								<label for="dashboardName">Name</label>
								<input type="text" class="form-control" id="dashboardName" @bind="@Data.Name" />
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { isShowRenameDashboardModal = false; })">Close</button>
					<button type="button" class="btn btn-primary" @onclick="(async e => { await SaveDashboardChanges(); })">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.IsShowModalImportProject)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered " role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Import Dashboard</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowModalImportProject = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="row">
						<div class="col-lg-12">
							This operation will lose all current data
						</div>
						<div class="col-lg-12">
							<div class="form-check">
								<input id="importAsNewCheckbox" class="form-check-input" type="checkbox" checked="@ImportDashboardAsNew" />
								<label class="form-check-label" for="importAsNewCheckbox">Don't replace current dashboard but create new one.</label>
							</div>

						</div>
						<div class="col-lg-12">
							<BlazorInputFile OnChange="(async(arg) => { await HandleInputFileSelection(arg); })" />
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code{

	private bool isShowRenameDashboardModal;
	private bool IsEditMode { get { return !IsPreviewMode; } }
	private bool ImportDashboardAsNew = true;

	[Parameter]
	public bool IsPreviewMode { get; set; } = false;

	[Parameter]
	public string ParrentDashboardId { get; set; }

	[Parameter]
	public bool HideModeOption { get; set; }

	[Parameter]
	public bool DisableModeOption { get; set; }

	[Parameter]
	public DashboardData Data { get { return Vm.Source; } set { Vm.Source = value; } }

	[Parameter]
	public bool IsHideTitle { get; set; } = false;

	[Parameter]
	public bool EnableBetweenBox { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public EventCallback OnBackToList { get; set; }

	[Parameter]
	public EventCallback<bool> OnChangeMode { get; set; }

	[Parameter]
	public IHyperArgsSink HyperStore { get { return Vm.HyperStore; } set { Vm.HyperStore = value; } }

	protected override async Task OnInitializedAsync()
	{
		await Vm.LoadAttahcedTheme();

		await base.OnInitializedAsync();
	}

	public async Task OnSave()
	{
		var response = await this.Vm.SaveChangesAsync();

		if (response.IsSuccess)
			ShowToaster(MatToastType.Success, "", "Changes saved");
		else
			ShowToaster(MatToastType.Warning, "", "Save changes failed: " + response.Message);
	}

	/// <summary>
	/// TODO: unify this
	/// </summary>
	private void ShowToaster(MatToastType type, string title, string message)
	{
		Toaster.Add(message, type, title, "", config =>
		{
			config.ShowCloseButton = false;
			config.ShowProgressBar = false;
			config.MaximumOpacity = 100;
		});
	}

	private async Task ChangeMode(bool value)
	{
		await OnChangeMode.InvokeAsync(value);
	}

	private async Task SaveDashboardChanges()
	{
		await this.Vm.SaveChangesAsync();

		isShowRenameDashboardModal = false;
	}

	private async Task OpenRenameDialog()
	{
		isShowRenameDashboardModal = true;
	}

	private async void ExportProject()
	{
		var projectJson = Vm.LoadDashboardAsJson();

		var currentTime = DateTime.UtcNow.ToString("yy-MM-dd-H-mm", CultureInfo.InvariantCulture);

		var fileName = $"exported-{Data?.Name}-{ currentTime }.json";

		await JSRuntime.InvokeAsync<object>("Orions.FileSaveAs.init", new object[] { fileName, projectJson });
	}

	private async Task HandleInputFileSelection(IFileListEntry[] files)
	{
		var file = files.FirstOrDefault();
		if (file != null)
		{
			using (var ms = new MemoryStream())
			{
				await file.Data.CopyToAsync(ms);
				var res = ms.ToArray();

				Vm.ImportProject(res, ImportDashboardAsNew);

				Vm.IsShowModalImportProject = false;
			}
		}
	}

	const string widget_copy_key = "widget_copy";

	private async void CopyWidget(MouseEventArgs e, IDashboardWidget widget)
	{
		var widgetStr = Vm.SerializeWidget(widget);
		await LocalStore.SetItemAsync(widget_copy_key, widgetStr);
	}

	private async void ReadSavedWidget(MouseEventArgs e)
	{
		var widgetStr = await LocalStore.GetItemAsync<string>(widget_copy_key);
		if (string.IsNullOrWhiteSpace(widgetStr)) return;
		Vm.LoadSavedWidget(widgetStr);
		StateHasChanged();
	}

	//private async void ClearLocalStorage()
	//{
	//	await LocalStore.ClearAsync();
	//}
}
