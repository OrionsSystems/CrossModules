@namespace Orions.Systems.CrossModules.Components

@inherits BaseBlazorComponent<DashboardVm>

<div class="container-fluid">

    <div class="row">
        <div class="col">
            @if (!string.IsNullOrEmpty(Title))
            {
                <h3 class="dashboard-title">
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                         width="35px" height="35px" viewBox="0 0 35 35">
                        <g>
                            <rect width="15.909" height="35" />
                            <rect x="19.091" y="12.727" width="15.909" height="9.546" />
                            <rect x="19.091" width="15.909" height="9.545" />
                            <rect x="19.091" y="25.455" width="15.909" height="9.545" />
                        </g>
                    </svg>

                    @Title
                </h3>
            }

            <button class="btn btn-outline-dark float-right mb-3" @onclick="OnSave">Publish</button>
        </div>
    </div>

    @ChildContent

    @if (Data.Rows.Any())
    {
        @foreach (var row in DataContext.Source.Rows)
        {
            <div class="row mb-4">

                @{
                    var lastCoumnId = row.Columns.Last.Value.Id;
                }

                @foreach (var column in row.Columns)
                {
                    <div @key="column.Id" class="col-lg-@column.Size">

                        <div class="dashboard-element-container dashboard-shadow " @onmouseover="(e => DataContext.ShowCommands(e, column))" @onmouseout="(e=>DataContext.HideCommands(e, column))">

                            @if (column.ShowCommands)
                            {
                                <div class="dashboard-element-commands">

                                    @if (column.Widget != null)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title="Clean Widget" @onclick="(e => CleanWidget(e, column))">Clean</a>

                                        <a class="btn btn-sm btn-outline-dark" title="Properties" @onclick="(e => OpenWidgetProperty(e, column) )">P</a>
                                    }

                                    @if (column.Size > 1)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title=" Split column" @onclick="@(el => { DataContext.SplitColumn(el, row, column); })">||</a>
                                    }
                                    <a class="btn btn-sm btn-outline-dark" title="Delete element" @onclick="@(el => { DataContext.DeleteColumn(el, row, column); })">X</a>
                                </div>
                            }

                            <div class="dashboard-content">

                                @if (column.Widget == null)
                                {
                                    <div class="dashboard-widget-add">
                                        <a class="btn" title="Add Widget" @onclick="(e =>OpenWidgetModal(e, column))">&#43;</a>
                                    </div>
                                }
                                else
                                {
                                    <div class="dashboard-widget-label">
                                        @column.Widget.Label
                                    </div>
                                }

                            </div>

                            @if (EnableSplitter && lastCoumnId != column.Id)
                            {

                                <div class="dashboard-swap" @onclick="(e=>DataContext.OnSwapColumns(e, row, column))">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                         viewBox="0 0 30 30">
                                        <path d="M9.89,17.94H4.87c-1,0-1.82-0.82-1.82-1.82V3.87c0-1,0.82-1.82,1.82-1.82h9.12c1,0,1.82,0.82,1.82,1.82v5.44" />
                                        <path d="M23.77,27.84h-4.56h-4.56c-1,0-1.82-0.82-1.82-1.82v-6.32v-5.93c0-1,0.82-1.82,1.82-1.82h4.56h4.56
	                                c1,0,1.82,0.82,1.82,1.82v0.93v5.2v6.12C25.59,27.02,24.77,27.84,23.77,27.84z" />
                                        <g>
                                            <line x1="8.54" y1="29.11" x2="1.56" y2="22.03" />
                                            <line x1="1.54" y1="29.09" x2="1.56" y2="22.03" />
                                            <line x1="8.59" y1="22.05" x2="1.56" y2="22.03" />
                                        </g>
                                        <g>
                                            <line x1="20.11" y1="0.89" x2="27.09" y2="7.97" />
                                            <line x1="27.11" y1="0.91" x2="27.09" y2="7.97" />
                                            <line x1="20.06" y1="7.95" x2="27.09" y2="7.97" />
                                        </g>
                                    </svg>
                                </div>
                                <div id="@column.Id"
                                     class="dashboard-dragbar"
                                     @onmousedown="DataContext.OnMouseDownDraging"
                                     @onmousemove="(e=>DataContext.OnMouseMoveDraging(e, row, column))">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                         viewBox="0 0 30 30">
                                        <g>
                                            <rect x="13.54" y="0.81" width="2.91" height="28.38" />
                                            <polygon points="12.04,20.72 12.04,9.39 6.16,15" />
                                            <polygon points="17.96,20.96 17.96,9.63 23.84,15.24" />
                                        </g>
                                    </svg>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-outline-dark" @onclick="DataContext.OnAddRow"> Add Row</button>
        </div>
    </div>
</div>


@if (isShowModalWidget)
{
    <div class="modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header dashboard-modal-widget-header">
                    <h5 class="modal-title">Available Widgets</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { isShowModalWidget = false; } )">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body dashboard-modal-widget-body">
                    <div class="container-fluid">
                        @foreach (var widget in AvailabelWidgets)
                        {
                            <div class="row dashboard-modal-widget-element">
                                <div class="col-md-9">
                                    <span>@widget.Label</span>
                                </div>
                                <div class="col-sm-1">
                                    <button class="btn btn-sm btn-outline-dark" @onclick="(e=>AddSelectedWidget(e, widget))">Add</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (isShowProperty)
{
    <div class="modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <PropertyGrid Loader="GetSelectedColumnWidget"
                                          CancelVisible="true"
                                          OKVisible="true"
                                          CancelCommand="OnCancelProperty"
                                          OkCommand="OnCancelProperty">
                            </PropertyGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}


@code{

    private bool isShowModalWidget;
    private bool isShowProperty;

    private DashboardColumn SelectedColumn { get; set; }

    [Parameter]
    public DashboardData Data { get { return DataContext.Source; } set { DataContext.Source = value; } }

    [Parameter]
    public List<IDashboardWidget> AvailabelWidgets { get; set; } = new List<IDashboardWidget>();

    [Parameter]
    public string Title { get; set; } = "Dashboard";

    [Parameter]
    public bool EnableSplitter { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void CleanWidget(MouseEventArgs e, DashboardColumn column)
    {
        column.Widget = null;
    }

    private async Task<object> GetSelectedColumnWidget()
    {
        await Task.Delay(200);
        return SelectedColumn.Widget;
    }

    private void OpenWidgetModal(MouseEventArgs e, DashboardColumn column)
    {
        if (AvailabelWidgets != null && AvailabelWidgets.Any())
        {
            isShowModalWidget = true;
            SelectedColumn = column;
        }
    }

    private void OpenWidgetProperty(MouseEventArgs e, DashboardColumn column)
    {
        isShowProperty = true;
        SelectedColumn = column;
    }

    private void AddSelectedWidget(MouseEventArgs e, IDashboardWidget widget)
    {
        if (widget != null && SelectedColumn != null) SelectedColumn.Widget = widget;

        isShowModalWidget = false;
    }

    private void OnCancelProperty()
    {
        isShowProperty = false;
    }

}

<style>
    .dashboard-title {
        display: inline-block;
    }

        .dashboard-title rect {
            fill: #898888 !important;
        }

    .dashboard-element-container {
        height: 200px;
        width: 100%;
        border-style: dashed;
        border-color: darkgrey;
        border-width: 1px;
        text-align: center;
        background-color: #f8f8f8;
    }

    .dashboard-content {
        line-height: 200px;
        height: 200px;
        overflow: hidden;
    }

    .dashboard-element-commands {
        position: absolute;
        right: 23px;
        top: 7px;
    }

        .dashboard-element-commands > a {
            cursor: pointer;
            padding: 2px 6px !important;
            height: 20px;
            line-height: 14px;
            font-size: 12px;
        }

            .dashboard-element-commands > a:hover {
                background-color: transparent !important;
                -webkit-box-shadow: 1px 1px 2px 0px rgba(0,0,0,0.25);
                -moz-box-shadow: 1px 1px 2px 0px rgba(0,0,0,0.25);
                box-shadow: 1px 1px 2px 0px rgba(0,0,0,0.25);
            }

    .dashboard-dragbar {
        position: absolute;
        height: 30px;
        width: 30px;
        cursor: col-resize;
        top: calc(50% - 12px);
        right: -15px;
        z-index: 99999;
    }

        .dashboard-dragbar rect, .dashboard-dragbar polygon {
            fill: #888888 !important;
        }

    .dashboard-swap {
        position: absolute;
        cursor: pointer;
        height: 25px;
        width: 25px;
        top: 5px;
        right: -15px;
        z-index: 99999;
    }

        .dashboard-swap path, .dashboard-swap line {
            fill: none;
            stroke: #888888;
            stroke-width: 2px;
        }

    .dashboard-widget-add > a {
        cursor: pointer;
        border: solid;
        display: inline-block;
        height: 50px;
        width: 50px;
        line-height: 38px;
        font-size: 40px;
        border-radius: 50px;
        border-width: 1px;
        border-color: #888888;
    }

        .dashboard-widget-add > a:hover {
            -webkit-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
            -moz-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
            box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
        }

    .dashboard-modal-widget-header {
        padding: 4px 15px !important;
    }

    .dashboard-modal-widget-body {
        padding: 0px !important;
    }

    .dashboard-modal-widget-element {
        margin: 10px auto !important;
        padding: 7px 0px;
        -webkit-box-shadow: 3px 3px 4px 0px rgba(0,0,0,0.25);
        -moz-box-shadow: 3px 3px 4px 0px rgba(0,0,0,0.25);
        box-shadow: 3px 3px 4px 0px rgba(0,0,0,0.25);
    }

    .dashboard-widget-label {
        font-size: 22px;
        /* font-weight: bold; */
    }

    .dashboard-shadow {
        -webkit-box-shadow: 3px 3px 12px 1px rgba(0,0,0,0.25);
        -moz-box-shadow: 3px 3px 12px 1px rgba(0,0,0,0.25);
        box-shadow: 3px 3px 12px 1px rgba(0,0,0,0.25);
    }
    @@media only screen and (max-width: 992px) {
        .dashboard-swap, .dashboard-dragbar {
            display:none;
        }

        .dashboard-element-container {
            margin-bottom: 1.5rem;
        }
    }
</style>
