@namespace Orions.Systems.CrossModules.Components

@inherits BaseBlazorComponent<DashboardVm>

<div class="container-fluid">

    <div class="row">
        <div class="col">
            @if (!string.IsNullOrEmpty(Title))
            {
                <h3 class="dashboard-title">@Title</h3>
            }

            <button class="btn btn-outline-dark float-right mb-3" @onclick="OnSave">Publish</button>
        </div>
    </div>

    @ChildContent

    @if (Data.Rows.Any())
    {
        @foreach (var row in DataContext.Source.Rows)
        {
            <div class="row mb-4">

                @{
                    var lastCoumnId = row.Columns.Last.Value.Id;
                }

                @foreach (var column in row.Columns)
                {
                    <div @key="column" class="col-sm-@column.Size">

                        <div class="dashboard-element-container dashboard-shadow " @onmouseover="(e => DataContext.ShowCommands(e, column))" @onmouseout="(e=>DataContext.HideCommands(e, column))">

                            @if (column.ShowCommands)
                            {
                                <div class="dashboard-element-commands">

                                    @if (column.Widget != null)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title="Clean Widget" @onclick="(e => CleanWidget(e, column))">Cl</a>
                                    }

                                    @if (column.Size > 1)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title=" Split column" @onclick="@(el => { DataContext.SplitColumn(el, row, column); })">||</a>
                                    }
                                    <a class="btn btn-sm btn-outline-dark" title="Delete element" @onclick="@(el => { DataContext.DeleteColumn(el, row, column); })">X</a>
                                </div>
                            }

                            <div class="dashboard-content">

                                @if (column.Widget == null)
                                {
                                    <div class="dashboard-widget-add">
                                        <a class="btn" title="Add Widget" @onclick="(e =>OpenWidgetModal(e, column))">&#43;</a>
                                    </div>
                                }
                                else
                                {
                                    <div class="dashboard-widget-label">
                                        @column.Widget.Label
                                    </div>
                                }

                            </div>

                            @if (EnableSplitter && lastCoumnId != column.Id)
                            {
                                <div id="@column.Id"
                                     class="dashboard-dragbar"
                                     @onmousedown="DataContext.OnMouseDownDraging"
                                     @onmousemove="DataContext.OnMouseMoveDraging"
                                     @onmouseup="DataContext.OnMouseUpDraging">
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-dark" @onclick="DataContext.OnAddRow"> Add Row</button>
        </div>
    </div>
</div>


@code{

    private IDashboardWidget SelectedWidget { get; set; }

    [Parameter]
    public DashboardData Data { get { return DataContext.Source; } set { DataContext.Source = value; } }

    [Parameter]
    public List<IDashboardWidget> AvailabelWidgets { get; set; } = new List<IDashboardWidget>();

    [Parameter]
    public string Title { get; set; } = "Dashboard";

    [Parameter]
    public bool EnableSplitter { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void CleanWidget(MouseEventArgs e, DashboardColumn column)
    {
        column.Widget = null;
    }

    private void OpenWidgetModal(MouseEventArgs e, DashboardColumn column)
    {
        Console.WriteLine("OpenWidgetModal");

        if (AvailabelWidgets != null && AvailabelWidgets.Any()) {

            //TODO

            SelectedWidget = AvailabelWidgets.FirstOrDefault();

            column.Widget = SelectedWidget;
        }
    }

}

<style>
    .dashboard-title {
        display: inline-block;
        border-left: solid 13px #c6c6c6;
        padding-left: 15px;
        line-height: 39px;
    }

    .dashboard-element-container {
        height: 200px;
        width: 100%;
        border-style: dashed;
        border-color: darkgrey;
        border-width: 1px;
        text-align: center;
        background-color: #f8f8f8;
    }

    .dashboard-content {
        line-height: 200px;
    }

    .dashboard-element-commands {
        position: absolute;
        right: 23px;
        top: 7px;
    }

        .dashboard-element-commands > a {
            cursor: pointer;
            margin-bottom: 3px;
            padding: 2px 2px !important;
            height: 20px;
            width: 20px;
            line-height: 14px;
            font-size: 12px;
        }

            .dashboard-element-commands > a:hover {
                color: white !important;
            }

    .dashboard-dragbar {
        position: absolute;
        background-color: #999494;
        height: 30px;
        float: right;
        width: 6px;
        cursor: col-resize;
        top: calc(50% - 12px);
        right: -2px;
    }

    .dashboard-widget-add > a {
        cursor: pointer;
        border: solid;
        display: inline-block;
        height: 50px;
        width: 50px;
        line-height: 38px;
        font-size: 40px;
        border-radius: 50px;
        border-width: 1px;
        border-color: #656565;
    }

        .dashboard-widget-add > a:hover {
            -webkit-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
            -moz-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
            box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
        }

    .dashboard-shadow {
        -webkit-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
        -moz-box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
        box-shadow: 5px 5px 15px 2px rgba(0,0,0,0.25);
    }
</style>
