@namespace Orions.Systems.CrossModules.Components

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor.Popups

@inherits DashboardLayoutComponent

@inject IMatToaster Toaster

<div class="container-fluid">

	<div class="row">
		<div class="col">
			@if (!string.IsNullOrEmpty(Data?.Name) && !IsHideTitle)
			{
				<h4 class="dashboard-title dashboard-list-name" @onclick="OpenRenameDialog">
					<IconLayout></IconLayout>
					@Data?.Name
				</h4>
			}

			@if (!HideModeOption)
			{
				<div class="float-right">
					<button class="btn btn-dark  mr-2" @onclick="OnBackToList">List</button>
					@if (IsEditMode)
					{
						<button class="btn btn-dark mr-4" @onclick="OnSave">Save</button>
					}
					<div class="d-inline-block">
						<SlideToggle Checked="@IsPreviewMode" CheckedChanged="ChangeMode" Label="Live Mode" Disabled="DisableModeOption"></SlideToggle>
					</div>
				</div>
			}

		</div>
	</div>

	@ChildContent

	@if (IsEditMode)
	{
		@if (Data.Rows.Any())
		{
			var firstRowId = Data.Rows.FirstOrDefault()?.Id;

			@foreach (var row in Data.Rows)
			{
				<div @key="row.Id" class="row dashboard-row-container mb-4">

					@{
						var lastCoumnId = row.Columns.Last.Value.Id;
					}

					@foreach (var column in row.Columns)
					{
						<div @key="column.Id" class="col-lg-@column.Size">

							<div class="dashboard-element-container dashboard-shadow">

								<div class="dashboard-content">
									@if (IsEditMode)
									{
										<div class="dashboard-element-commands">
											@if (column.Size > 1)
											{
												<a class="dashboard-element-commands-split-horisontal" title=" Split column horizontal" @onclick="@(el => { Vm.SplitColumn(el, row, column); })">
													<IconSplitHorisontal></IconSplitHorisontal>
												</a>
											}
											@if (column.InnerRows != null && column.Widget == null && column.InnerRows.Count == 0)
											{
												<a class="dashboard-element-commands-split-vertical" title=" Split column vertical" @onclick="@(el => { Vm.InitSplitElementVerical(el, row, column); })">
													<IconSplitVertical></IconSplitVertical>
												</a>
											}
											<a class="dashboard-element-commands-delete" title="Delete element" @onclick="@(el => { Vm.DeleteColumn(el, row, column); })">
												<IconClose></IconClose>
											</a>
										</div>
									}

									<div class="clearfix"></div>
									<div class="dashboard-widget-container">
										@if (IsEditMode && Vm.HasPreviousColumn(row, column))
										{
											<div class="dashboard-content-prev" title="Increase size into left">
												<a @onclick="(e => Vm.IncreaseSizeLeft(e, row, column))">
													<IconArrowLeft></IconArrowLeft>
												</a>
											</div>
										}
										@if (column.Widget == null)
										{
											@if (column.InnerRows.Count == 0)
											{
												<div class="dashboard-widget-add">
													<EjsTooltip Content="@("Add widget")">
														<a class="dashboard-widget-add-icon" title="Add Widget" @onclick="(e => Vm.OpenWidgetModal(e, column))">
															<IconAdd></IconAdd>
														</a>
													</EjsTooltip>
												</div>
											}
											else
											{
												<div class="dashboard-widget-inner-container">
													@foreach (var innerRow in column.InnerRows)
													{
														<div class="dashboard-widget-inner-container-item">
															@foreach (var innerColumn in innerRow.Columns)
															{
																@if (innerColumn.Widget == null)
																{
																	<div class="dashboard-widget-add">
																		<EjsTooltip Content="@("Add widget")">
																			<a class="dashboard-widget-add-icon" title="Add Widget" @onclick="(e => Vm.OpenWidgetModal(e, innerColumn))">
																				<IconAdd></IconAdd>
																			</a>
																		</EjsTooltip>
																	</div>
																}
																else
																{
																	<div class="dashboard-widget-icon">
																		@((MarkupString)innerColumn.Widget.GetIcon())
																	</div>
																	<div class="dashboard-widget-data-container">
																		<div class="dashboard-widget-label">
																			@innerColumn.Widget.Label
																		</div>
																		<div class="dashboard-widget-commands">
																			<a class="dashboard-widget-command-settings" title="Properties" @onclick="(e => Vm.OpenWidgetProperty(e, innerColumn))">
																				<IconSettings></IconSettings>
																			</a>
																			<a class="dashboard-widget-command-visible @(innerColumn.Widget.IsVisibile ? "dashboard-widget-command-enable" : "")" title="Clean Widget" @onclick="(e => Vm.ToggleVisibility(e, innerColumn))">
																				<IconVisible></IconVisible>
																			</a>
																			<a class="dashboard-widget-command-clean" title="Clean Widget" @onclick="(e => Vm.CleanWidget(e, innerColumn))">
																				<IconClean></IconClean>
																			</a>
																		</div>
																	</div>
																}
															}
														</div>
													}
													<div class="dashboard-widget-inner-add">
														<a class="btn btn-outline-dark" title="Add inner row" @onclick="@(el => { Vm.AddInnerRow(el, row, column); })"> Add</a>
													</div>
												</div>
											}

										}
										else
										{
											<div class="dashboard-widget-icon" @ondblclick="(e => Vm.OpenWidgetProperty(e, column))">
												@((MarkupString)column.Widget.GetIcon())
											</div>
											<div class="dashboard-widget-data-container">
												<div class="dashboard-widget-label">
													@column.Widget.Label
												</div>
												<div class="dashboard-widget-commands">
													<a class="dashboard-widget-command-settings" title="Properties" @onclick="(e => Vm.OpenWidgetProperty(e, column))">
														<IconSettings></IconSettings>
													</a>
													<a class="dashboard-widget-command-visible @(column.Widget.IsVisibile ? "dashboard-widget-command-enable" : "")" title="Clean Widget" @onclick="(e => Vm.ToggleVisibility(e, column))">
														<IconVisible></IconVisible>
													</a>
													<a class="dashboard-widget-command-clean" title="Clean Widget" @onclick="(e => Vm.CleanWidget(e, column))">
														<IconClean></IconClean>
													</a>
												</div>
											</div>
										}
										@if (IsEditMode && Vm.HasNextColumn(row, column))
										{
											<div class="dashboard-content-next" title="Increase size into right">
												<a @onclick="(e => Vm.IncreaseSizeRight(e, row, column))">
													<IconArrowRight></IconArrowRight>
												</a>
											</div>
										}
									</div>
								</div>

								@if (IsEditMode && EnableBetweenBox && lastCoumnId != column.Id)
								{
									<div class="dashboard-between-content" @onmouseover="(e => { column.ShowBetweenCommands = true; })" @onmouseout="(e => { column.ShowBetweenCommands = false; })">

										@if (true || column.ShowBetweenCommands)
										{
											<div class="dashboard-swap-column" @onclick="(e => Vm.OnSwapColumns(e, row, column))">
												<IconSwapColumn></IconSwapColumn>
											</div>
											<div id="@column.Id"
												  class="dashboard-dragbar"
												  @onmousedown="Vm.OnMouseDownDraging"
												  @onmousemove="(e => Vm.OnMouseMoveDraging(e, row, column))">
												<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
													  viewBox="0 0 30 30">
													<g>
														<rect x="13.54" y="0.81" width="2.91" height="28.38" />
														<polygon points="12.04,20.72 12.04,9.39 6.16,15" />
														<polygon points="17.96,20.96 17.96,9.63 23.84,15.24" />
													</g>
												</svg>
											</div>
										}


									</div>
								}
							</div>
						</div>
					}

					@if (IsEditMode)
					{
						<div class="dashboard-between-row">

							<div class="dashboard-between-row-container">
								@if (firstRowId != row.Id)
								{
									<div class="dashboard-swap-row" @onclick="(e => Vm.OnSwapRows(e, row))">
										<IconSwapRow></IconSwapRow>
									</div>
								}

								<div class="dahsboard-clone-row" @onclick="(e => Vm.CloneRow(e, row))">
									<IconClone></IconClone>
								</div>
							</div>
						</div>
					}

				</div>
			}
		}

		@if (IsEditMode)
		{
			<div class="row">
				<div class="col text-center">
					<button class="btn btn-outline-dark" @onclick="Vm.OnAddRow"> Add Row</button>
				</div>
			</div>
		}
	}
	else
	{
		<DashboardLiveModeRender DashboardVm="@Vm" />
	}

</div>


@if (Vm.IsShowModalWidget)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Available Widgets</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { Vm.IsShowModalWidget = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body dashboard-modal-widget-body">
					<div class="modal-dashboard-widget-container">
						<ul>
							@foreach (var widgetType in Vm.AvailableWidgets)
							{
								var widget = Vm.LoadWidget(widgetType);

								<li class="modal-dashboard-widget-element-list" @onclick="(e => Vm.AddSelectedWidget(e, widgetType))">
									<div class="modal-dashboard-widget-element-container">
										<div class="dashboard-modal-widget-element-icon">
											@((MarkupString)widget.GetIcon())
										</div>
										<div class="dashboard-modal-widget-element-label">
											@widget.Label
										</div>
									</div>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (Vm.IsShowProperty)
{
	<div class="dashboard-modal modal fade show" id="propertyModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<PropertyGrid Vm="Vm.PropGridVm"
											  Loader="Vm.GetSelectedColumnWidget"
											  CancelVisible="true"
											  HyperStore="Vm.HyperStore"
											  OKVisible="true"
											  CancelCommand="Vm.OnCancelProperty"
											  OkCommand="Vm.OnCancelProperty">
							</PropertyGrid>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@if (isShowRenameDashboardModal)
{
	<div class="dashboard-modal modal fade show" id="widgetModal" tabindex="-1" role="dialog" style="display: block;">
		<div class="modal-dialog modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header dashboard-modal-widget-header">
					<h5 class="modal-title">Rename Dashboard Name</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(e => { isShowRenameDashboardModal = false; })">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="card-body">
							<div class="form-group">
								<label for="dashboardName">Name</label>
								<input type="text" class="form-control" id="dashboardName" @bind="@Data.Name" />
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(e => { isShowRenameDashboardModal = false; })">Close</button>
					<button type="button" class="btn btn-primary" @onclick="(async e => { await SaveDashboardChanges(); })">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal-backdrop fade show"></div>
}

@code{

	private bool isShowRenameDashboardModal;
	private bool IsEditMode { get { return !IsPreviewMode; } }

	[Parameter]
	public bool IsPreviewMode { get; set; } = false;

	[Parameter]
	public string ParrentDashboardId { get; set; }

	[Parameter]
	public bool HideModeOption { get; set; }

	[Parameter]
	public bool DisableModeOption { get; set; }

	[Parameter]
	public DashboardData Data { get { return Vm.Source; } set { Vm.Source = value; } }

	[Parameter]
	public bool IsHideTitle { get; set; } = false;

	[Parameter]
	public bool EnableBetweenBox { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public EventCallback OnBackToList { get; set; }

	[Parameter]
	public IHyperArgsSink HyperStore { get { return Vm.HyperStore; } set { Vm.HyperStore = value; } }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	public async Task OnSave()
	{
		var response = await this.Vm.SaveChangesAsync();

		if (response.IsSuccess)
			ShowToaster(MatToastType.Success, "", "Changes saved");
		else
			ShowToaster(MatToastType.Warning, "", "Save changes failed: " + response.Message);
	}

	/// <summary>
	/// TODO: unify this
	/// </summary>
	private void ShowToaster(MatToastType type, string title, string message)
	{
		Toaster.Add(message, type, title, "", config =>
		{
			config.ShowCloseButton = false;
			config.ShowProgressBar = false;
			config.MaximumOpacity = 100;
		});
	}

	private void ChangeMode(bool value)
	{
		IsPreviewMode = value;
	}

	private async Task SaveDashboardChanges()
	{
		await this.Vm.SaveChangesAsync();

		isShowRenameDashboardModal = false;
	}

	private async Task OpenRenameDialog()
	{
		isShowRenameDashboardModal = true;
	}

}
