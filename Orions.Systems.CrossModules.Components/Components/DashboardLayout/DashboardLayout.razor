@namespace Orions.Systems.CrossModules.Components

@inherits BaseOrionsComponent

<div class="container-fluid">

    @ChildContent

    @if (Data.Rows.Any())
    {
        @foreach (var row in Data.Rows)
        {
            <div class="row mb-4">

                @{
                    var lastCoumnId = row.Columns.Last.Value.Id;
                }

                @foreach (var column in row.Columns)
                {
                    <div class="col-sm-@column.Size">
                        <div class="dashboard-element-commands float-right">
                            @if (column.Size > 1)
                            {
                                <a class="btn btn-sm btn-outline-dark" @onclick="@(el => { SplitColumn(el, row, column); })">Split</a>
                            }
                            <a class="btn btn-sm btn-outline-dark" @onclick="@(el => { DeleteColumn(el, row, column); })">Delete</a>
                        </div>
                        <div class="clearfix"></div>
                        <div class="dashboard-element-container">

                            Content

                            @if (lastCoumnId != column.Id)
                            {
                                <div id="@column.Id" 
                                     class="dashboard-dragbar" 
                                     @onmousedown="OnMouseDownDraging" 
                                     @onmousemove="OnMouseMoveDraging"
                                     @onmouseup="OnMouseUpDraging"></div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-dark" @onclick="OnAddRow"> Add Row</button>
        </div>
    </div>
</div>


@code{

    [Parameter]
    public DashboardData Data { get; set; } = new DashboardData();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnAddRow()
    {
        var row = new DashboardRow();
        row.Columns.AddLast(new DashboardColumn { Size = 12 });
        Data.Rows.Add(row);
    }

    private void SplitColumn(MouseEventArgs e, DashboardRow row, DashboardColumn column)
    {

        var size = column.Size % 2;
        var sizeF = column.Size / 2;

        column.Size = sizeF;
        var newColumn = new DashboardColumn { Size = sizeF + size };

        var n = row.Columns.Find(column);
        row.Columns.AddAfter(n, newColumn);

    }

    private void DeleteColumn(MouseEventArgs e, DashboardRow row, DashboardColumn column)
    {
        var columnSize = column.Size;

        if (row.Columns.Count == 1)
        {
            Data.Rows.RemoveAll(it => it.Id == row.Id);
            return;
        }

        var n = row.Columns.Find(column);
        var prevColumn = n.Previous;

        row.Columns.Remove(column);

        if (prevColumn == null)
        {
            var firstCol = row.Columns.FirstOrDefault();
            firstCol.Size += columnSize;
            return;
        }

        prevColumn.Value.Size += columnSize;
    }

    private void OnMouseDownDraging() {
        //TODO
    }

    private void OnMouseMoveDraging() { 
        //TODO
    }

    private void OnMouseUpDraging() { 
        //TODO
    }
}

<style>
    .dashboard-element-container {
        height: 200px;
        width: 100%;
        border-style: dashed;
        border-color: darkgrey;
        border-width: 1px;
        text-align: center;
        line-height: 200px;
    }

    .dashboard-element-commands > a {
        cursor: pointer;
        margin-bottom: 3px;
        padding: 2px 2px !important;
    }

        .dashboard-element-commands > a:hover {
            color: white
        }

    .dashboard-dragbar {
        position: absolute;
        background-color: #999494;
        height: 30px;
        float: right;
        width: 6px;
        cursor: col-resize;
        top: calc(50%);
        right: -2px;
    }

    #ghostbar {
        width: 3px;
        background-color: #000;
        opacity: 0.5;
        position: absolute;
        cursor: col-resize;
        z-index: 999;
    }
</style>
