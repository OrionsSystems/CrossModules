@namespace Orions.Systems.CrossModules.Components

@inherits BaseBlazorComponent<DashboardVm>

@if (Data.Rows.Any())
{
    var firstRowId = Data.Rows.FirstOrDefault()?.Id;

    @foreach (var row in Data.Rows)
    {
        <div class="row mb-4">

            @{
                var lastCoumnId = row.Columns.Last.Value.Id;
            }

            @foreach (var column in row.Columns)
            {
                <div @key="column.Id" class="col-lg-@column.Size">

                    <div class="dashboard-element-container dashboard-shadow">

                        <div class="dashboard-content" @onmouseover="(e => DataContext.ShowCommands(e, column))" @onmouseout="(e=>DataContext.HideCommands(e, column))">

                            @if (column.ShowCommands)
                            {
                                <div class="dashboard-element-commands">

                                    @if (column.Widget != null)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title="Clean Widget" @onclick="(e => CleanWidget(e, column))">Clean</a>

                                        <a class="btn btn-sm btn-outline-dark" title="Properties" @onclick="(e => OpenWidgetProperty(e, column) )">P</a>
                                    }

                                    @if (column.Size > 1)
                                    {
                                        <a class="btn btn-sm btn-outline-dark" title=" Split column" @onclick="@(el => { DataContext.SplitColumn(el, row, column); })">||</a>
                                    }
                                    <a class="btn btn-sm btn-outline-dark" title="Delete element" @onclick="@(el => { DataContext.DeleteColumn(el, row, column); })">X</a>
                                </div>
                            }

                            @if (column.ShowCommands && DataContext.HasPreviousColumn(row, column))
                            {
                                <div class="dashboard-content-prev" title="Increase size into left">
                                    <a @onclick="(e => DataContext.IncreaseSizeLeft(e, row, column))">
                                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                             viewBox="0 0 30 30">
                                            <polygon points="2.72,15 13.24,27.62 13.24,20.18 26.75,20.18 26.75,9.74 13.24,9.74 13.24,2.38 " />
                                        </svg>
                                    </a>
                                </div>
                            }


                            @if (column.Widget == null)
                            {
                                <div class="dashboard-widget-add">
                                    <a class="btn" title="Add Widget" @onclick="(e =>OpenWidgetModal(e, column))">&#43;</a>
                                </div>
                            }
                            else
                            {
                                <div class="dashboard-widget-label">
                                    @column.Widget.Label
                                </div>
                            }

                            @if (column.ShowCommands && DataContext.HasNextColumn(row, column))
                            {
                                <div class="dashboard-content-next" title="Increase size into right">
                                    <a @onclick="(e=>DataContext.IncreaseSizeRight(e, row, column))">
                                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                             viewBox="0 0 30 30">
                                            <polygon points="26.75,15 16.23,2.38 16.23,9.82 2.72,9.82 2.72,20.26 16.23,20.26 16.23,27.62 " />
                                        </svg>
                                    </a>
                                </div>
                            }


                        </div>

                        @if (EnableBetweenBox && lastCoumnId != column.Id)
                        {
                            <div class="dashboard-between-content" @onmouseover="(e=> { column.ShowBetweenCommands = true; })" @onmouseout="(e=> { column.ShowBetweenCommands = false; })">

                                @if (column.ShowBetweenCommands)
                                {
                                    <div class="dashboard-swap-column" @onclick="(e=>DataContext.OnSwapColumns(e, row, column))">
                                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                             viewBox="0 0 30 30">
                                            <path d="M9.89,17.94H4.87c-1,0-1.82-0.82-1.82-1.82V3.87c0-1,0.82-1.82,1.82-1.82h9.12c1,0,1.82,0.82,1.82,1.82v5.44" />
                                            <path d="M23.77,27.84h-4.56h-4.56c-1,0-1.82-0.82-1.82-1.82v-6.32v-5.93c0-1,0.82-1.82,1.82-1.82h4.56h4.56
	                                c1,0,1.82,0.82,1.82,1.82v0.93v5.2v6.12C25.59,27.02,24.77,27.84,23.77,27.84z" />
                                            <g>
                                                <line x1="8.54" y1="29.11" x2="1.56" y2="22.03" />
                                                <line x1="1.54" y1="29.09" x2="1.56" y2="22.03" />
                                                <line x1="8.59" y1="22.05" x2="1.56" y2="22.03" />
                                            </g>
                                            <g>
                                                <line x1="20.11" y1="0.89" x2="27.09" y2="7.97" />
                                                <line x1="27.11" y1="0.91" x2="27.09" y2="7.97" />
                                                <line x1="20.06" y1="7.95" x2="27.09" y2="7.97" />
                                            </g>
                                        </svg>
                                    </div>
                                    <div id="@column.Id"
                                         class="dashboard-dragbar"
                                         @onmousedown="DataContext.OnMouseDownDraging"
                                         @onmousemove="(e=>DataContext.OnMouseMoveDraging(e, row, column))">
                                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                             viewBox="0 0 30 30">
                                            <g>
                                                <rect x="13.54" y="0.81" width="2.91" height="28.38" />
                                                <polygon points="12.04,20.72 12.04,9.39 6.16,15" />
                                                <polygon points="17.96,20.96 17.96,9.63 23.84,15.24" />
                                            </g>
                                        </svg>
                                    </div>
                                }


                            </div>
                        }
                    </div>
                </div>
            }

            @if (firstRowId != row.Id)
            {
                <div class="dashboard-between-row" @onmouseover="(e=> { row.ShowCommands = true; })" @onmouseout="(e=> { row.ShowCommands = false; })">

                    @if (row.ShowCommands)
                    {
                        <div class="dashboard-swap-row" @onclick="(e=>DataContext.OnSwapRows(e, row))">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                 viewBox="0 0 30 30">
                                <path d="M9.89,17.94H4.87c-1,0-1.82-0.82-1.82-1.82V3.87c0-1,0.82-1.82,1.82-1.82h9.12c1,0,1.82,0.82,1.82,1.82v5.44" />
                                <path d="M23.77,27.84h-4.56h-4.56c-1,0-1.82-0.82-1.82-1.82v-6.32v-5.93c0-1,0.82-1.82,1.82-1.82h4.56h4.56
	                                c1,0,1.82,0.82,1.82,1.82v0.93v5.2v6.12C25.59,27.02,24.77,27.84,23.77,27.84z" />
                                <g>
                                    <line x1="8.54" y1="29.11" x2="1.56" y2="22.03" />
                                    <line x1="1.54" y1="29.09" x2="1.56" y2="22.03" />
                                    <line x1="8.59" y1="22.05" x2="1.56" y2="22.03" />
                                </g>
                                <g>
                                    <line x1="20.11" y1="0.89" x2="27.09" y2="7.97" />
                                    <line x1="27.11" y1="0.91" x2="27.09" y2="7.97" />
                                    <line x1="20.06" y1="7.95" x2="27.09" y2="7.97" />
                                </g>
                            </svg>
                        </div>
                    }

                </div>
            }

        </div>
    }
}

<div class="row">
    <div class="col text-center">
        <button class="btn btn-outline-dark" @onclick="DataContext.OnAddRow"> Add Row</button>
    </div>
</div>

@code{

    private bool isShowModalWidget;
    private bool isShowProperty;

    private DashboardColumn SelectedColumn { get; set; }

    [Parameter]
    public DashboardData Data { get { return DataContext.Source; } set { DataContext.Source = value; } }

    [Parameter]
    public List<IDashboardWidget> AvailabelWidgets { get; set; } = new List<IDashboardWidget>();

    [Parameter]
    public bool EnableBetweenBox { get; set; }

    private void CleanWidget(MouseEventArgs e, DashboardColumn column)
    {
        column.Widget = null;
    }

    private void OpenWidgetModal(MouseEventArgs e, DashboardColumn column)
    {
        if (AvailabelWidgets != null && AvailabelWidgets.Any())
        {
            isShowModalWidget = true;
            SelectedColumn = column;
        }
    }

    private void OpenWidgetProperty(MouseEventArgs e, DashboardColumn column)
    {
        isShowProperty = true;
        SelectedColumn = column;
    }

    private void AddSelectedWidget(MouseEventArgs e, IDashboardWidget widget)
    {
        if (widget != null && SelectedColumn != null) SelectedColumn.Widget = widget;

        isShowModalWidget = false;
    }

    private void OnCancelProperty()
    {
        isShowProperty = false;
    }
}
