@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<ReportTelericSeriesChartVm, ReportTelericSeriesChartWidget>

@implements IDisposable

@using Orions.Node.Common

@using Telerik.Blazor;
@using Telerik.Blazor.Components;

<div class="widget-content-report-linechart">

	@if (Vm.Report != null && Vm.IsLoadedReportResult)
	{
		@if (Widget.ShowTitle && Vm.ReportHasName)
		{
			<h3>@Vm.ReportName</h3>
		}

		<div class="widget-content-report-linechart-view">

			<TelerikChart @ref="ChartRef">

				<ChartTitle Visible="@Widget.IsShowChartTitle" Position="@Widget.ChartTitlePosition" Text="@Widget.ChartTitle"></ChartTitle>
				<ChartLegend Position="@Widget.ChartLegendPosition"></ChartLegend>


				@if (ChartData.IsDateAxis)
				{
					<ChartSeriesItems>
						@foreach (var ser in ChartData.Series)
						{
							<ChartSeries Type="@Widget.ChartSeriesType"
											 Data="@ser.Data"
											 Name="@ser.Name"
											 VisibleInLegend="@Widget.IsLegenedVisible"
											 Style="@Widget.ChartSeriesStyle"
											 CategoryField="@nameof(ReportSeriesChartDataItem.DatePosition)"
											 Field="@nameof(ReportSeriesChartDataItem.Count)">
								<ChartSeriesLabels Visible="@Widget.IsChartSeriesLabelsVisible" Template="@CustomSeriesTemplate" Background="transparent"></ChartSeriesLabels>
								<ChartSeriesStack Enabled="@Widget.IsChartSeriesStackEnabled"></ChartSeriesStack>
							</ChartSeries>
						}
					</ChartSeriesItems>

					<ChartCategoryAxes>
						<ChartCategoryAxis Type="ChartCategoryAxisType.Date" WeekStartDay="1" BaseUnitStep="@Widget.BaseUnitStep" BaseUnit="@Widget.ChartCategoryAxisBaseUnit" Categories="@ChartData.Categories.ToArray()">
							<ChartCategoryAxisLabels Format="@Widget.ChartCategoryAxisLabelsFormat">
								@*<ChartCategoryAxisLabelsRotation Angle="-90"></ChartCategoryAxisLabelsRotation>*@
							</ChartCategoryAxisLabels>
						</ChartCategoryAxis>
					</ChartCategoryAxes>
				}
				else
				{
					<ChartSeriesItems>
						@foreach (var ser in ChartData.Series)
						{
							<ChartSeries Type="@Widget.ChartSeriesType"
											 Data="@ser.Data"
											 VisibleInLegend="@Widget.IsLegenedVisible"
											 Name="@ser.Name"
											 Style="@Widget.ChartSeriesStyle"
											 CategoryField="@nameof(ReportSeriesChartDataItem.Time)"
											 Field="@nameof(ReportSeriesChartDataItem.Count)">
								<ChartSeriesLabels Visible="@Widget.IsChartSeriesLabelsVisible"></ChartSeriesLabels>
								<ChartSeriesStack Enabled="@Widget.IsChartSeriesStackEnabled"></ChartSeriesStack>
							</ChartSeries>
						}
					</ChartSeriesItems>

					<ChartCategoryAxes>
						<ChartCategoryAxis Type="ChartCategoryAxisType.Category" Categories="@ChartData.Categories.ToArray()">
						</ChartCategoryAxis>
					</ChartCategoryAxes>
				}

			</TelerikChart>
		</div>

		@if (Widget.ShowFooter)
		{
			<div class="widget-content-report-linechart-footer">
				<div class="">Created at @Vm.Report.CreatedAtUTC</div>
			</div>
		}
	}

	@if (Vm.Report == null && Vm.IsLoadedReportResult)
	{
		<div class="widget-missing-report-data">
			Missing report data!
		</div>
	}

	@if (!Vm.IsLoadedReportResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

</div>

@code {

	TelerikChart ChartRef { get; set; }

	public string CustomSeriesTemplate = "# if (value != 0) { # #=value# #}#";

	public ReportChartData ChartData => Vm.ReportChartData;

	protected override async Task OnInitializedAsync()
	{
		await Vm.RefreshReportResultData();

		WindowResizeDispatcher.WindowResize += ResizeChart;
		await base.OnInitializedAsync();
	}

	public void Dispose()
	{
		WindowResizeDispatcher.WindowResize -= ResizeChart;
	}

	protected Task ResizeChart()
	{
		// now that you know the size of the chart container changed, re-render the chart
		ChartRef.Refresh();

		//you can do this for more than one chart if the component has more than one chart

		//current browser dimensions are stored in the static class as well for easy retrieval
		//this example sets them only after a resize has occurred, you can invoke a JS method to
		//get them upon initialization as well (e.g., in the constructor of the dispatcher class)
		//WindowResizeDispatcher.WindowWidth
		//WindowResizeDispatcher.WindowHeight
		//if you use these values in the markup, call StateHasChanged(), this is not raised by an EventCallback
		//StateHasChanged();

		return Task.CompletedTask;
	}
}

<style>
	.widget-content-report-linechart {
		padding: 15px;
		overflow: hidden;
	}

		.widget-content-report-linechart h3 {
			text-align: center;
		}

	.widget-content-report-linechart-footer {
		font-size: 12px;
		font-style: italic;
	}
</style>
