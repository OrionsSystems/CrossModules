@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<SimpleSVGMapVm, SimpleSVGMapWidget>

@inject NavigationManager NavigationManager

<div class="widget-content-report @Widget.Class">

	@if (Showing)
	{
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		<SVGMap @ref="map" Zone="@Widget.Zone" OnClickZone="@OnSelectZone"></SVGMap>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>
	}
	else
	{
		<Loader Settings="@Widget.LoaderSettings"></Loader>
	}
</div>

@code {

	private SVGMap map;

	public bool Showing { get; set; } = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);

		Showing = true;
		StateHasChanged();
	}

	private async Task OnSelectZone(string zone)
	{
		if (string.IsNullOrWhiteSpace(zone)) return;

		await map.UpdateZone(Widget.Zone, zone);
		Widget.Zone = zone;

		//var isTagDashboardExist = await IsDashboardExist(zone);

		var uri = $"/dashboard/{zone}";
		NavigationManager.NavigateTo(uri, true);
	}

	private async Task<bool> IsDashboardExist(string tag)
	{
		var datas = await HyperStore.FindAllAsync<DashboardData>();

		return datas.Where(it => it.Tag == tag).Any();
	}

}

<style>

	.st20, .st21, .st22 {
		fill: @(string.IsNullOrWhiteSpace(Widget.ZoneColor) ? "#cc0000" : Widget.ZoneColor );
	}

	.hide-zone {
		fill: #159c7000;
	}

	.zone-over{
		fill: @(string.IsNullOrWhiteSpace(Widget.ZoneColorOver) ? "#13513A" : Widget.ZoneColorOver ) !important;
	}

	.st0 {
    fill: #d9d9d9 !important;
}

	.st12 {
		fill: #3f3e3e !important;
		stroke: #cacaca;
		stroke-width: 1.1px !important;
		stroke-miterlimit: 10;
	}
</style>