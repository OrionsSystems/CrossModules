@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<SlideContainerVm, SlideContainerWidget>

	<div class="widget-content-report widget-content-report-slide @Widget.Class">

		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		<div class="widget-content-report-view">
			@if (Vm.Widget.Data != null && Vm.Widget.Data.Count() > 0)
			{
				<div class="widget-slide-container">
					<div class="widget-slide-container-nav row">
						<div class="col-6 widget-slide-container-nav-icon">
							<a @onclick="Vm.OnClickLeftArrow" class="@(Vm.IsFirstElementActive() ? "hidden" : "")">
								<MatIcon Icon="@MatIconNames.Keyboard_arrow_left"></MatIcon>
							</a>

						</div>
						<div class="col-6 widget-slide-container-nav-icon right">
							<a @onclick="Vm.OnClickRightArrow" class="@(Vm.IsLastElementActive() ? "hidden" : "")">
								<MatIcon Icon="@MatIconNames.Keyboard_arrow_right"></MatIcon>
							</a>
						</div>
					</div>
					@foreach (var wdg in Vm.Widget.Data)
					{
						<div class="widget-slide-container-data @(Vm.IsActiveElement(wdg.Id) ? "active" : "")">
							@if (wdg != null && wdg.IsVisible && Vm.IsActiveElement(wdg.Id))
							{
								<WidgetDynamicComponent @key="@wdg.Id"
																DataContext="@DashboardVm.ObtainWidgetVm(wdg)"
																DashboardVm="DashboardVm" />
							}
						</div>
					}
				</div>
			}
		</div>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>

	</div>

@code {

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Vm.InitMapping();
	}
	
}