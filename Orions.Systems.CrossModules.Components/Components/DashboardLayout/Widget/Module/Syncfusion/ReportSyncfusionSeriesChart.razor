@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<ReportSyncfusionSeriesChartVm, ReportSyncfusionSeriesChartWidget>

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.SplitButtons

<div class="widget-content-report">

	@if (Vm.Report != null && Vm.IsLoadedReportResult)
	{
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		@if (Showing)
		{
			<div class="widget-content-report-view widget-syncfusion">

				<EjsChart @ref="Chartobj"
							 Height="@Widget.Height"
							 Width="@Widget.Width"
							 Title="@Widget.ChartTitle" 
							 Background="@Widget.ChartBackground" 
							 SelectionMode="SelectionMode.Series">

					<ChartArea Border="@Widget.Border"></ChartArea>

						<ChartMargin Left="@Widget.Margin.Left"
										 Right="@Widget.Margin.Right"
										 Top="@Widget.Margin.Top"
										 Bottom="@Widget.Margin.Bottom"></ChartMargin>

						<ChartEvents OnPointClick="@Vm.HandlePointOnclick"></ChartEvents>

						<ChartPrimaryYAxis MajorGridLines="@Widget.YAxisSettings.GridLineSettings"
												 Minimum="@Widget.YAxisSettings.Minimum"
												 LineStyle="@Widget.YAxisSettings.LineStyle"
												 Visible="@Widget.YAxisSettings.Visible"
												 MajorTickLines="@Widget.YAxisSettings.MajorTickLines" 
												 MinorTickLines="@Widget.YAxisSettings.MinorTickLines"></ChartPrimaryYAxis>

						@if (ChartData.IsDateAxis)
						{
							<ChartPrimaryXAxis IsIndexed="@Widget.XAxisSettings.XAxisIsIndexed"
													 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"
													 IntervalType="@Widget.XAxisSettings.IntervalType"
													 LabelFormat="@Widget.XAxisSettings.LabelFormat"
													 Skeleton="@Widget.XAxisSettings.Skeleton"
													 Interval="@Widget.XAxisSettings.Interval"
													 MajorGridLines="@Widget.XAxisSettings.MajorGridLines"
													 TickPosition="@Widget.XAxisSettings.TickPosition"
													 LabelPosition="@Widget.XAxisSettings.LabelPosition"
													 LabelPlacement="@Widget.XAxisSettings.LabelPlacement"
													 LabelRotation="@Widget.XAxisSettings.LabelRotation"
													 LabelStyle="@Widget.XAxisSettings.LabelStyle"
													 EdgeLabelPlacement="@Widget.XAxisSettings.EdgeLabelPlacement"
													 Visible="@Widget.XAxisSettings.Visible">
							</ChartPrimaryXAxis>
						}
						else
						{
							<ChartPrimaryXAxis IsIndexed="@Widget.XAxisSettings.XAxisIsIndexed"
													 
													 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category"
													 IntervalType="@Widget.XAxisSettings.IntervalType"
													 LabelFormat="@Widget.XAxisSettings.LabelFormat"
													 Skeleton="@Widget.XAxisSettings.Skeleton"
													 Interval="@Widget.XAxisSettings.Interval"
													 MajorGridLines="@Widget.XAxisSettings.MajorGridLines"
													 TickPosition="@Widget.XAxisSettings.TickPosition"
													 LabelPosition="@Widget.XAxisSettings.LabelPosition"
													 LabelPlacement="@Widget.XAxisSettings.LabelPlacement"
													 LabelRotation="@Widget.XAxisSettings.LabelRotation"
													 LabelIntersectAction="@Widget.XAxisSettings.LabelIntersectAction"
													 LabelStyle="@Widget.XAxisSettings.LabelStyle"
													 EdgeLabelPlacement="@Widget.XAxisSettings.EdgeLabelPlacement"
													 Visible="@Widget.XAxisSettings.Visible">
							</ChartPrimaryXAxis>
						}

						<ChartTooltipSettings Format="@Widget.TooltipSettings.Format" 
													 TextStyle="@Widget.TooltipSettings.TextStyle" 
													 Enable="@Widget.TooltipSettings.IsEnable"></ChartTooltipSettings>

						<ChartLegendSettings Visible="@Widget.LegendSettings.Visible"
													Position="@Widget.LegendSettings.Position"
													Alignment="@Widget.LegendSettings.Alignment">
						</ChartLegendSettings>
						<ChartZoomSettings EnableMouseWheelZooming="@Widget.EnableMouseWheelZooming"
												 EnablePinchZooming="@Widget.EnablePinchZooming"
												 EnableSelectionZooming="@Widget.EnableSelectionZooming"
												 EnablePan="@Widget.EnablePan"
												 EnableScrollbar="true">
						</ChartZoomSettings>

						<ChartCrosshairSettings Enable="@Widget.IsEnableCrosshair"></ChartCrosshairSettings>

						<ChartSeriesCollection>
							@foreach (var ser in ChartData.Series)
							{
								@if (ChartData.IsDateAxis)
								{
									<ChartSeries DataSource="@ser.Data"
													 Name="@ser.Name"
													 XName="@nameof(ReportSeriesChartDataItem.DatePosition)"
													 YName="@nameof(ReportSeriesChartDataItem.Value)" 
													 CornerRadius="@Widget.CornerRadius" 
													 Type="@Widget.ChartSeriesType">
										<ChartMarker>
											<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
										</ChartMarker>
									</ChartSeries>
								}
								else
								{
									<ChartSeries DataSource="@ser.Data"
													 Name="@ser.Name"
													 XName="@nameof(ReportSeriesChartDataItem.Label)"
													 YName="@nameof(ReportSeriesChartDataItem.Value)"
													 Type="@Widget.ChartSeriesType"
													 CornerRadius="@Widget.CornerRadius">
										<ChartMarker>
											<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
										</ChartMarker>
									</ChartSeries>
								}
							}

						</ChartSeriesCollection>
					
				</EjsChart>

			</div>
		}

		@if (Widget.ShowFooter)
		{
			<div class="widget-content-report-footer">
				@if (Vm.ReportHasName)
				{
					<div class="widget-content-report-footer-name">@Vm.ReportName</div>
				}
				<div class="widget-content-report-footer-create">Created at @Vm.Report.CreatedAtUTC</div>
			</div>
		}
	}

	@if (Vm.Report == null && Vm.IsLoadedReportResult)
	{
		<div class="widget-missing-report">
			Missing report data!
		</div>
	}

	@if (!Vm.IsLoadedReportResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

</div>

@code {

	public EjsChart Chartobj;

	public bool Showing { get; set; } = true;

	public void OnApply()
	{
	}

	public ReportChartData ChartData => Vm.ReportChartData;

	protected override async Task OnInitializedAsync()
	{
		Vm.OnReportResultChanged += OnChangeDataSource;
		await Vm.RefreshReportResultData();
		
		await base.OnInitializedAsync();
	}

	private void OnChangeDataSource()
	{
		this.Showing = true;
		this.StateHasChanged();
	}

	protected override void OnStateHasChanged()
	{
		base.OnStateHasChanged();
	}

}
