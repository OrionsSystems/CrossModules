@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<ReportSyncfusionSeriesChartVm, ReportSyncfusionSeriesChartWidget>

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.SplitButtons

<div class="widget-content-report">

	@if (Vm.Report != null && Vm.IsLoadedReportResult)
	{
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		@if (Showing)
		{
			<div class="widget-content-report-view widget-syncfusion">

				<EjsChart @ref="Chartobj"
							 Title="@Widget.ChartTitle"
							 Background="@Widget.ChartBackground"
							 SelectionMode="SelectionMode.Series">

					<ChartMargin Left="@Widget.Margin.Left" 
									 Right="@Widget.Margin.Right" 
									 Top="@Widget.Margin.Top" 
									 Bottom="@Widget.Margin.Bottom"></ChartMargin>

					<ChartEvents OnPointClick="@Vm.HandlePointOnclick"></ChartEvents>

					<ChartPrimaryYAxis MajorGridLines="@Widget.YAxisSettings.GridLineSettings"
											 Minimum="@Widget.YAxisSettings.Minimum"
											 LineStyle="@Widget.YAxisSettings.LineStyle"
											 
											 MajorTickLines="@Widget.YAxisSettings.TickLines"></ChartPrimaryYAxis>

					@if (ChartData.IsDateAxis)
					{
						<ChartPrimaryXAxis IsIndexed="@Widget.XAxisSettings.XAxisIsIndexed"
												 LabelPlacement="@Widget.XAxisSettings.LabelPlacement"
												 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"
												 IntervalType="@Widget.XAxisSettings.IntervalType"
												 LabelFormat="@Widget.XAxisSettings.LabelFormat"
												 Skeleton="@Widget.XAxisSettings.Skeleton"
												 Interval="@Widget.XAxisSettings.Interval" 
												 MajorGridLines="@Widget.XAxisSettings.GridLineSettings"
												 TickPosition="@Widget.XAxisSettings.TickPosition"
												 LabelPosition="@Widget.XAxisSettings.LabelPosition"
												 EdgeLabelPlacement="@Widget.XAxisSettings.EdgeLabelPlacement">
						</ChartPrimaryXAxis>
					}
					else
					{
						<ChartPrimaryXAxis IsIndexed="@Widget.XAxisSettings.XAxisIsIndexed"
												 LabelPlacement="@Widget.XAxisSettings.LabelPlacement"
												 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category"
												 IntervalType="@Widget.XAxisSettings.IntervalType"
												 LabelFormat="@Widget.XAxisSettings.LabelFormat"
												 Skeleton="@Widget.XAxisSettings.Skeleton"
												 Interval="@Widget.XAxisSettings.Interval" 
												 MajorGridLines="@Widget.XAxisSettings.GridLineSettings"
												 TickPosition="@Widget.XAxisSettings.TickPosition"
												 LabelPosition="@Widget.XAxisSettings.LabelPosition"
												 EdgeLabelPlacement="@Widget.XAxisSettings.EdgeLabelPlacement">
						</ChartPrimaryXAxis>
					}

					<ChartTooltipSettings Enable="@Widget.IsEnableTooltip"></ChartTooltipSettings>

					<ChartLegendSettings Visible="@Widget.LegendSettings.Visible"
												Position="@Widget.LegendSettings.Position"
												Alignment="@Widget.LegendSettings.Alignment">
					</ChartLegendSettings>
					<ChartZoomSettings EnableMouseWheelZooming="@Widget.EnableMouseWheelZooming"
											 EnablePinchZooming="@Widget.EnablePinchZooming"
											 EnableSelectionZooming="@Widget.EnableSelectionZooming"
											 EnablePan="@Widget.EnablePan"
											 EnableScrollbar="true">
					</ChartZoomSettings>

					<ChartCrosshairSettings Enable="@Widget.IsEnableCrosshair"></ChartCrosshairSettings>

					<ChartSeriesCollection>
						@foreach (var ser in ChartData.Series)
						{
							@if (ChartData.IsDateAxis)
							{
								<ChartSeries DataSource="@ser.Data"
												 Name="@ser.Name"
												 XName="@nameof(ReportSeriesChartDataItem.DatePosition)"
												 YName="@nameof(ReportSeriesChartDataItem.Value)"
												 Type="@Widget.ChartSeriesType">
									<ChartMarker>
										<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
									</ChartMarker>
								</ChartSeries>
							}
							else
							{
								<ChartSeries DataSource="@ser.Data"
												 Name="@ser.Name"
												 XName="@nameof(ReportSeriesChartDataItem.Label)"
												 YName="@nameof(ReportSeriesChartDataItem.Value)"
												 Type="@Widget.ChartSeriesType" CornerRadius="@Widget.CornerRadius">
									<ChartMarker>
										<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
									</ChartMarker>
								</ChartSeries>
							}
						}

					</ChartSeriesCollection>
				</EjsChart>

			</div>
		}

		@if (Widget.ShowFooter)
		{
			<div class="widget-content-report-footer">
				@if (Vm.ReportHasName)
				{
					<div class="widget-content-report-footer-name">@Vm.ReportName</div>
				}
				<div class="widget-content-report-footer-create">Created at @Vm.Report.CreatedAtUTC</div>
			</div>
		}
	}

	@if (Vm.Report == null && Vm.IsLoadedReportResult)
	{
		<div class="widget-missing-report">
			Missing report data!
		</div>
	}

	@if (!Vm.IsLoadedReportResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}


	@* TEST BUTTON FOR TESTING CHANGING THE SERIES
			<div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
			<EjsProgressButton Duration="99" OnClick="@OnApply" Content="Apply" IsPrimary="true">
			</EjsProgressButton>
		</div>
	*@

</div>

@code {

	public EjsChart Chartobj;

	public bool Showing { get; set; } = true;

	public void OnApply()
	{
	}

	public ReportChartData ChartData => Vm.ReportChartData;

	protected override async Task OnInitializedAsync()
	{
		await Vm.RefreshReportResultData();

		Vm.OnReportResultChanged += OnChangeDataSource;
		await base.OnInitializedAsync();
	}

	private void OnChangeDataSource()
	{
		this.Showing = false;
		this.StateHasChanged();

		// This thread dispatch magic, forces the system to process this request separately as part of the next iteration. A single invoke does not do that.
		Task.Factory.StartNew(() => 
		{
			this.InvokeAsync(() =>
			{
				this.Showing = true;
				this.StateHasChanged();
			});
		});
	}

	protected override void OnStateHasChanged()
	{
		base.OnStateHasChanged();
	}

}
