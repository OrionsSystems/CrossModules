@namespace Orions.Systems.CrossModules.Components

@inherits WidgetComponent<ReportSyncfusionSeriesChartVm, ReportSyncfusionSeriesChartWidget>

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts

<div class="widget-content-report-linechart">

	@if (DataContext.Report != null && DataContext.IsLoadedReportResult)
	{
		@if (Widget.ShowTitle && DataContext.ReportHasName)
		{
			<h3>@DataContext.ReportName</h3>
		}

		<div class="widget-content-report-linechart-view">

			<EjsChart Title="@Widget.ChartTitle"
						 Background="@Widget.ChartBackground"
						 
						 SelectionMode="SelectionMode.Series">

				<ChartEvents OnChartMouseClick="@ChartMouseClickHandler"></ChartEvents>
				<ChartEvents OnPointClick="@PointClickHandler"></ChartEvents>


				@if (ChartData.IsDateAxis)
				{
					<ChartPrimaryXAxis IsIndexed="@Widget.XAxisIsIndexed"
											 LabelPlacement="@Widget.LabelPlacement"
											 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"
											 IntervalType="@Widget.IntervalType"
											 LabelFormat="@Widget.LabelFormat"
											 Skeleton="@Widget.Skeleton"
											 EdgeLabelPlacement="@Widget.EdgeLabelPlacement">
					</ChartPrimaryXAxis>
				}
				else
				{ 
					<ChartPrimaryXAxis IsIndexed="@Widget.XAxisIsIndexed"
											 LabelPlacement="@Widget.LabelPlacement"
											 ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category"
											 IntervalType="@Widget.IntervalType"
											 LabelFormat="@Widget.LabelFormat"
											 Skeleton="@Widget.Skeleton"
											 EdgeLabelPlacement="@Widget.EdgeLabelPlacement">
					</ChartPrimaryXAxis>
				}

				<ChartTooltipSettings Enable="@Widget.IsEnableTooltip"></ChartTooltipSettings>

				<ChartLegendSettings Visible="@Widget.IsEnableLegend"
											Position="LegendPosition.Bottom">
				</ChartLegendSettings>

				<ChartZoomSettings EnableMouseWheelZooming="@Widget.EnableMouseWheelZooming"
										 EnablePinchZooming="@Widget.EnablePinchZooming"
										 EnableSelectionZooming="@Widget.EnableSelectionZooming"
										 EnablePan="@Widget.EnablePan"
										 EnableScrollbar="true">
				</ChartZoomSettings>

				<ChartCrosshairSettings Enable="@Widget.IsEnableCrosshair"></ChartCrosshairSettings>

				<ChartSeriesCollection>
					@foreach (var ser in ChartData.Series)
					{
						@if (ChartData.IsDateAxis)
						{
							<ChartSeries DataSource="@ser.Data"
											 Name="@ser.Name"
											 XName="@nameof(ReportSeriesChartDataItem.DatePosition)"
											 YName="@nameof(ReportSeriesChartDataItem.Count)"
											 Type="@Widget.ChartSeriesType">
								<ChartMarker>
									<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
								</ChartMarker>
							</ChartSeries>
						}
						else
						{
							<ChartSeries DataSource="@ser.Data"
											 Name="@ser.Name"
											 XName="@nameof(ReportSeriesChartDataItem.Time)"
											 YName="@nameof(ReportSeriesChartDataItem.Count)"
											 Type="@Widget.ChartSeriesType">
								<ChartMarker>
									<ChartDataLabel Visible="@Widget.IsShowMarker"></ChartDataLabel>
								</ChartMarker>
							</ChartSeries>
						}
					}

				</ChartSeriesCollection>
			</EjsChart>

		</div>

		@if (Widget.ShowFooter)
		{
			<div class="widget-content-report-linechart-footer">
				<div class="">Created at @DataContext.Report.CreatedAtUTC</div>
			</div>
		}
	}

	@if (DataContext.Report == null && DataContext.IsLoadedReportResult)
	{
		<div class="widget-missing-report-data">
			Missing report data!
		</div>
	}

	@if (!DataContext.IsLoadedReportResult)
	{
		<div style="position:relative;">
			<div class="loading-bar"></div>
		</div>
	}

	<div class="dashboard=onchart-click">@ChartClickHandlerMessage</div>

</div>

@code {

	public string ChartClickHandlerMessage { get; set; }

	public ReportChartData ChartData { get; set; } = new ReportChartData();

	protected override async Task OnInitializedAsync()
	{
		await DataContext.LoadReportResultData(Widget.DataSource);

		ChartData = DataContext.LoadReportChartData(Widget.CategoryFilter);

		await base.OnInitializedAsync();
	}

	public void ChartMouseClickHandler(IMouseEventArgs args)
	{
		// Here you can customize your code

		ChartClickHandlerMessage = $"ChartMouseClick at X:{args.X} Y:{args.Y}";
	}

	public void PointClickHandler(IPointEventArgs args)
	{
		// Here you can customize your code

		ChartClickHandlerMessage = $"PointClick at X:{args.X} Y:{args.Y}";
	}

}

<style>
	.widget-content-report-linechart {
		padding: 15px;
		overflow: hidden;
	}

		.widget-content-report-linechart h3 {
			text-align: center;
		}

	.widget-content-report-linechart-footer {
		font-size: 12px;
		font-style: italic;
	}
</style>
