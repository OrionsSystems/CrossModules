@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<ReportSyncfusionSeriesChartVm, ReportSyncfusionSeriesChartWidget>

@using Orions.Node.Common
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.SplitButtons

<div class="widget-content-report @Widget.Class" style="@Widget.MarginWidget.GetInlineStyle() @Widget.PaddingWidget.GetInlineStyle()">

	@if (Vm.Report != null && Vm.ReportChartData != null && Vm.IsLoadedReportResult)
	{
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		@if (Showing)
		{
			<div class="widget-content-report-view widget-syncfusion">

				<EjsChart @ref="Chartobj"
							 Height="@Widget.Height"
							 LegendSettings="@Widget.LegendConfigurations"
							 Palettes="@GetPalette()"
							 Width="@Widget.Width"
							 Title="@(Widget.ChartTitleSettings.EnableTitle ? Widget.ChartTitleSettings.Title : String.Empty)"
							 TitleStyle="@Widget.ChartTitleSettings.TitleStyle"
							 SubTitle="@(Widget.ChartTitleSettings.EnableSubTitle ? Widget.ChartTitleSettings.SubTitle : String.Empty)"
							 SubTitleStyle="@Widget.ChartTitleSettings.SubTitleStyle"
							 Background="@Widget.ChartBackground"
							 SelectionMode="SelectionMode.Series">

					<ChartArea Border="@Widget.Border"></ChartArea>

					<ChartMargin Left="@Widget.Margin.Left"
									 Right="@Widget.Margin.Right"
									 Top="@Widget.Margin.Top"
									 Bottom="@Widget.Margin.Bottom"></ChartMargin>

					<ChartEvents OnPointClick="@Vm.HandlePointOnclick"></ChartEvents>

					<ChartPrimaryYAxis MajorGridLines="@Widget.YAxisSettings.GridLineSettings"
											 Minimum="@Widget.YAxisSettings.Minimum"
											 LineStyle="@Widget.YAxisSettings.LineStyle"
											 LabelFormat="@Widget.YAxisSettings.LabelFormat"
											 Visible="@Widget.YAxisSettings.Visible"
											 MajorTickLines="@Widget.YAxisSettings.MajorTickLines"
											 MinorTickLines="@Widget.YAxisSettings.MinorTickLines"></ChartPrimaryYAxis>

					<ChartPrimaryXAxis IsIndexed="@Widget.XAxisSettings.XAxisIsIndexed"
											 ValueType="@Widget.XAxisSettings.ValueType"
											 LabelFormat="@Widget.XAxisSettings.LabelFormat"
											 IntervalType="@Widget.XAxisSettings.IntervalType"
											 Skeleton="@Widget.XAxisSettings.Skeleton"
											 Interval="@Widget.XAxisSettings.Interval"
											 MajorGridLines="@Widget.XAxisSettings.MajorGridLines"
											 TickPosition="@Widget.XAxisSettings.TickPosition"
											 LabelPosition="@Widget.XAxisSettings.LabelPosition"
											 LabelPlacement="@Widget.XAxisSettings.LabelPlacement"
											 LabelRotation="@Widget.XAxisSettings.LabelRotation"
											 LabelIntersectAction="@Widget.XAxisSettings.LabelIntersectAction"
											 LabelStyle="@Widget.XAxisSettings.LabelStyle"
											 EdgeLabelPlacement="@Widget.XAxisSettings.EdgeLabelPlacement"
											 Visible="@Widget.XAxisSettings.Visible">
					</ChartPrimaryXAxis>

					<ChartTooltipSettings Format="@Widget.TooltipSettings.Format"
												 Opacity="@Widget.TooltipSettings.Opacity"
												 TextStyle="@Widget.TooltipSettings.TextStyle"
												 Header="@Widget.TooltipSettings.Header"
												 Fill="@Widget.TooltipSettings.Fill"
												 EnableMarker="@Widget.TooltipSettings.EnableMarker"
												 Border="@Widget.TooltipSettings.Border"
												 Enable="@Widget.TooltipSettings.IsEnable"></ChartTooltipSettings>

					<ChartZoomSettings EnableMouseWheelZooming="@Widget.EnableMouseWheelZooming"
											 EnablePinchZooming="@Widget.EnablePinchZooming"
											 EnableSelectionZooming="@Widget.EnableSelectionZooming"
											 EnablePan="@Widget.EnablePan"
											 EnableScrollbar="true">
					</ChartZoomSettings>

					<ChartCrosshairSettings Enable="@Widget.IsEnableCrosshair"></ChartCrosshairSettings>

					<ChartSeriesCollection>
						@foreach (var ser in Vm.ReportChartData.Series)
						{
							<ChartSeries DataSource="@ser.Data"
											 Name="@ser.Name"
											 XName="@nameof(ReportSeriesChartDataItem.Label)"
											 YName="@nameof(ReportSeriesChartDataItem.Value)" 
											 Opacity="@Widget.SeriesSettings.Opacity"
											 MinRadius="@Widget.SeriesSettings.MinRadius"
											 MaxRadius="@Widget.SeriesSettings.MaxRadius"
											 ShowMean="@Widget.SeriesSettings.ShowMean"
											 ShowNormalDistribution="@Widget.SeriesSettings.ShowNormalDistribution"
											 SplineType="@Widget.SeriesSettings.SplineType"
											 StackingGroup="@Widget.SeriesSettings.StackingGroup"
											 TooltipFormat="@Widget.SeriesSettings.TooltipFormat"
											 Width="@Widget.SeriesSettings.Width"
											 LegendShape="@Widget.SeriesSettings.LegendShape"
											 Animation="@Widget.SeriesSettings.Animation"
											 Border="@Widget.SeriesSettings.Border"
											 ColumnSpacing="@Widget.SeriesSettings.ColumnSpacing"
											 CornerRadius="@Widget.SeriesSettings.CornerRadius"
											 Fill="@Widget.SeriesSettings.Fill"
											 DashArray="@Widget.SeriesSettings.DashArray"
											 DragSettings="@Widget.SeriesSettings.DragSettings"
											 Type="@Widget.ChartSeriesType">

								<ChartMarker Visible="@Widget.ChartMarkerSettings.Visible"
												 Shape="@Widget.ChartMarkerSettings.Shape"
												 Opacity="@Widget.ChartMarkerSettings.Opacity"
												 Height="@Widget.ChartMarkerSettings.Height"
												 Fill="@Widget.ChartMarkerSettings.Fill"
												 DataLabel="@Widget.ChartMarkerSettings.DataLabel"
												 Width="@Widget.ChartMarkerSettings.Width" 
												 Border="@Widget.ChartMarkerSettings.Border">
								</ChartMarker>
							</ChartSeries>
						}

					</ChartSeriesCollection>

				</EjsChart>

			</div>
		}

		@if (Widget.ShowFooter)
		{
			<div class="widget-content-report-footer">
				@if (Vm.ReportHasName)
				{
					<div class="widget-content-report-footer-name">@Vm.ReportName</div>
				}
				<div class="widget-content-report-footer-create">Created at @Vm.Report.CreatedAtUTC</div>
			</div>
		}

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>
	}
	else
	@if ((Vm.Report == null || Vm.ReportChartData == null) && Vm.IsLoadedReportResult)
	{
		<div class="widget-missing-report">
		</div>
	}
	else
	{
		<Loader Settings="@Widget.LoaderSettings"></Loader>
	}

</div>

@code {

	public EjsChart Chartobj;

	public bool Showing { get; set; } = true;

	public void OnApply()
	{
	}

	protected override async Task OnInitializedAsync()
	{
		Vm.OnReportResultChanged += OnChangeDataSource;
		await Vm.RefreshReportResultData();

		await base.OnInitializedAsync();
	}

	private void OnChangeDataSource()
	{
		//this.Showing = true;

		if (Widget.SeparateSeriesItems && Vm.ReportChartData != null && Vm.IsLoadedReportResult)
		{
			SeparateSeriesCategory();
		}

		this.StateHasChanged();
	}

	public void SeparateSeriesCategory()
	{
		if (Vm.ReportChartData.Series.Count != 1) return;

		Vm.SeparateSeriesCategory();
	}

	private string[] GetPalette() 
	{
		if (Widget.Palettes != null && Widget.Palettes.Length > 0)
			return Widget.Palettes;

		return Vm.DashboardVm.Theme?.Palettes;
	}

}
