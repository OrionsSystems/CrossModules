@namespace Orions.Systems.CrossModules.Components
@inherits DashboardComponent<CarouselVm, CarouselWidget>
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

<div class="widget-content-report @Widget.Class">

	@if (Vm.IsDataInitialized && Vm.Data != null && Vm.Data.Count > 0)
	{
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="@Widget.TitleSettings"></TitleCard>

		<div id="carouselExampleIndicators"
			 class="carousel slide" data-ride="carousel">
			<ol class="carousel-indicators">
				@for (int i = 0; i < Vm.Data.Count; i++)
				{
					var activeClass = i == 0 ? "active" : string.Empty;

					var y = i;

					<li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@activeClass" @onclick="@(() => Vm.Switched(y))"></li>
				}
			</ol>
			<div class="carousel-inner">
				@for (int i = 0; i < Vm.Data.Count; i++)
				{
					var activeClass = i == 0 ? "carousel-item active" : "carousel-item";

					<div class="@activeClass">
						<img class="d-block w-50 carousel-image" src="@Vm.Data[i].Source" alt="@Vm.Data[i].Alt">
					</div>
				}
			</div>
			<a id="carouselExampleIndicators-prev"
			   class="carousel-control-prev" role="button" data-slide="prev">
				<span class="carousel-control-prev-icon" aria-hidden="true"></span>
				<span class="sr-only">Previous</span>
			</a>
			<a id="carouselExampleIndicators-next"
			   class="carousel-control-next" role="button" data-slide="next">
				<span class="carousel-control-next-icon" aria-hidden="true"></span>
				<span class="sr-only">Next</span>
			</a>
		</div>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>
	}

	@if (Vm.IsDataInitialized && Vm.Data.Count == 0)
	{
		<div class="widget-missing-report">
			Missing navigation data!
		</div>
	}

	@if (!Vm.IsDataInitialized)
	{
		<Loader Settings="@Widget.LoaderSettings"></Loader>
	}

</div>
@code {
	protected override async Task OnInitializedAsync()
	{
		Vm.InitData();

		await base.OnInitializedAsync();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JsRuntime.InvokeAsync<object>("Orions.Carousel.initializeCarousel", new object[] { Microsoft.JSInterop.DotNetObjectReference.Create<CarouselVm>(Vm) });
			firstRender = false;
		}
	}
}

<style>
	.carousel-image {
		height: 300px;
		width: auto !important;
		margin: auto;
	}
</style>