@namespace Orions.Systems.CrossModules.Components
@inherits DashboardComponent<CarouselVm, CarouselWidget>
@using BlazorStrap

<div class="widget-content-report @Widget.Class">
    @if (Vm.Report != null && Vm.IsLoadedReportResult)
    {
        <SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
        <TitleCard Settings="Widget.TitleSettings"></TitleCard>

        <div class="widget-content-report-view">
            @if (Vm.Data.Any())
            {
                <BSCarousel NumberOfItems="@Vm.Data.Count">
                    <BSCarouselIndicators NumberOfItems="@Vm.Data.Count"></BSCarouselIndicators>
                    <div class="carousel-inner">
                        @foreach (var item in Vm.Data)
                        {
                            <BSCarouselItem src="@item.Source" alt="@item.Alt" ActionLink="@(Widget.IsActionLinkEnabled? item.ActionLink:"")" ActionLinkTarget="@(Widget.IsActionLinkEnabled ? item.ActionLinkTarget:"")">
                                <BSCarouselCaption CaptionText="@(Widget.IsShowCaption ? item.Caption:"")" HeaderText="@(Widget.IsShowCaptionHeader ? item.Header:"")"></BSCarouselCaption>
                            </BSCarouselItem>
                        }
                    </div>
                    <BSCarouselControl CarouselDirection="CarouselDirection.Previous" NumberOfItems="@Vm.Data.Count"></BSCarouselControl>
                    <BSCarouselControl CarouselDirection="CarouselDirection.Next" NumberOfItems="@Vm.Data.Count"></BSCarouselControl>

                </BSCarousel>
            }
        </div>

        <SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>

        @if (Vm.Report == null && Vm.IsLoadedReportResult)
        {
            <div class="widget-missing-report">
                Missing report data!
            </div>
        }

        @if (!Vm.IsLoadedReportResult)
        {
            <Loader Settings="@Widget.LoaderSettings"></Loader>
        }
    }
</div>
@code {

    protected override async Task OnInitializedAsync()
    {
        Vm.OnReportResultChanged += Vm.OnChangeDataSource;

        await Vm.RefreshReportResultData();

        await base.OnInitializedAsync();
    }
}