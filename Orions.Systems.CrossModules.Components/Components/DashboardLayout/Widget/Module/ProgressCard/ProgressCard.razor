@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<ProgressCardVm, ProgressCardWidget>

	<div class="widget-content-report">

		@if (Vm.Report != null && Vm.IsLoadedReportResult)
		{
			<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
			<TitleCard Settings="Widget.TitleSettings"></TitleCard>

			<div class="widget-content-report-view">
				@if (Data.Any())
				{
					<div class="row widget-content-report-ethnicity-traffic">
						<div class="col-lg-12">
							@foreach (var item in Data)
							{
								<div class="row">
									@if (Widget.IsShowCardIcons)
									{
										<div class="col-sm-2 widget-content-report-ethnicity-traffic-icon" title="@item.Title">

										</div>
										<div class="col-sm-10 widget-content-report-ethnicity-traffic-progress">
											<ProgressLine IsShowTitle="true"
															  Title="@item.Title"
															  IsShowPercentage="Widget.IsShowPercentage"
															  Percentage="@item.Percentage"
															  Value="@item.IntValue.GetValueOrDefault()"></ProgressLine>
										</div>
									}
									else
									{
										<div class="col-sm-12 widget-content-report-ethnicity-traffic-progress">
											<ProgressLine IsShowTitle="true"
															  Title="@item.Title"
															  IsShowPercentage="Widget.IsShowPercentage"
															  Percentage="@item.Percentage"
															  Value="@item.IntValue.GetValueOrDefault()"></ProgressLine>
										</div>
									}

								</div>
							}
						</div>
					</div>
				}
			</div>

			<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>
		}

		@if (Vm.Report == null && Vm.IsLoadedReportResult)
		{
			<div class="widget-missing-report">
				Missing report data!
			</div>
		}

		@if (!Vm.IsLoadedReportResult)
		{
			<div style="position:relative;">
				<div class="loading-bar"></div>
			</div>
		}

	</div>

@code {

	public List<CardItem> Data { get; set; } = new List<CardItem>();

	protected override async Task OnInitializedAsync()
	{
		Vm.OnReportResultChanged += OnChangeDataSource;

		await Vm.RefreshReportResultData();

		await base.OnInitializedAsync();
	}

	private void OnChangeDataSource()
	{
		var total = 0;
		foreach (var series in Vm.ReportChartData.Series)
		{
			var item = new CardItem()
			{
				Title = series.Name,
				Value = series.Data.LastOrDefault()?.Value
			};

			Data.Add(item);

			total += item.IntValue.GetValueOrDefault();
		}

		if (Widget.CustomItems.Any())
			Data.AddRange(Widget.CustomItems);

		if (total != 0)
		{
			foreach (var item in Data)
			{
				if (item.DoubleValue == null || item.DoubleValue.GetValueOrDefault() == 0) continue;

				item.Percentage = (item.DoubleValue.GetValueOrDefault() / total) * 100;
			}
		}

		StateHasChanged();
	}
}

<style type="text/css">

	.st0, .st2 {
		fill: #bcbec4;
	}

	.widget-content-report-ethnicity-traffic-icon {
		/*transform: scale(0.9);*/
		text-align: center;
	}

	.widget-content-report-ethnicity-traffic-progress {
		/*padding: 18px;*/
		margin: auto;
	}

	.progress-line .stat-progress {
		background-color: #bcbec4;
	}

	.widget-content-report-ethnicity-traffic-svg {
		width: 65px;
		padding: 10px 10px;
	}
</style>