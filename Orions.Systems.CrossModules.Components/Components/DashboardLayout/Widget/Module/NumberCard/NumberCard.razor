@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<NumberCardVm, NumberCardWidget>

<div class="widget-content-report numbercard-container @Widget.Class" style="@Widget.MarginWidget.GetInlineStyle() @Widget.PaddingWidget.GetInlineStyle()">

	@if (Vm.IsLoadedReportResult)
	{
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		<div class="widget-content-report-view">

			@if (Data.Any())
			{
				@foreach (var item in Data)
				{
					<div class="widget-single-analytics-container">
						@if (Widget.IsShowCardIcons)
						{
							<div class="widget-single-analytics-icon">
								@if (string.IsNullOrWhiteSpace(item.SvgIcon))
								{
									<IconLayout></IconLayout>
								}
								else
								{
									@((MarkupString)item.SvgIcon)
								}
							</div>
						}
						@if (Widget.ShowElementTitle)
						{
							<div class="widget-single-analytics-title">@item.Title</div>
						}
						<div class="widget-single-analytics-value">@item.Value</div>
					</div>

					<SeparatorLine Settings="@Widget.SepratorsSettings"></SeparatorLine>

				}
			}
			else
			{
				<div class="widget-missing-report">
					Missing report data!
				</div>
			}

		</div>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>
	}

	@if (!Vm.IsLoadedReportResult)
	{
		<Loader Settings="@Widget.LoaderSettings"></Loader>
	}

</div>

@code {

	public List<CardItem> Data { get; set; } = new List<CardItem>();

	protected override async Task OnInitializedAsync()
	{
		Vm.OnReportResultChanged += OnChangeDataSource;

		await Vm.RefreshReportResultData();

		await base.OnInitializedAsync();
	}

	private void OnChangeDataSource()
	{
		if (Vm.ReportChartData != null)
		{
			foreach (var series in Vm.ReportChartData.Series)
			{
				var item = new CardItem()
				{
					Title = series.Name,
					Value = series.Data.LastOrDefault()?.Value,
					SvgIcon = series.SvgIcon()
				};

				if (Widget.EnableRoundValue && item.DoubleValue != null) {
					var res = Math.Round(item.DoubleValue.Value, Widget.RoundPrecision);
					item.Value = res.ToString();
				}

				Data.Add(item);
			}
		}

		if (Widget.CustomItems.Any())
			Data.AddRange(Widget.CustomItems);

		StateHasChanged();
	}
}

