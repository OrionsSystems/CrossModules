@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<SimpleFilterVm, SimpleFilterWidget>

@using Orions.Infrastructure.HyperMedia
@using Orions.Node.Common

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.SplitButtons

@using Syncfusion.EJ2.Blazor.Calendars

@if (Widget.Settings.Visible)
{


	<div class="widget-content-report">
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		<div class="simple-filter-container">
			<div class="simple-filter-items-container">
				@if (Vm.Widget.ShowTextLabelSelection)
				{
					<div class="control-styles simple-filter-item">
						<EjsMultiSelect @ref="MultiSelect"
											 TValue="string[]"
											 Value="@Values"
											 Mode="@VisualMode.Box"
											 AllowFiltering="true"
											 Placeholder="Search Filters"
											 DataSource="@Options">

							<MultiSelectFieldSettings GroupBy="Group" Text="Text" Value="ID"></MultiSelectFieldSettings>
						</EjsMultiSelect>
					</div>
				}

				@if (Vm.Widget.ShowDateTimeSelection)
				{
					<div class="control-styles simple-filter-item">
						<EjsDateRangePicker @ref="DateRangePicker"
												  StartDate="@StartDate"
												  EndDate="@EndDate"
												  Placeholder="Select Time Range"></EjsDateRangePicker>
					</div>
				}

			</div>
			<div class="simple-filter-btn-container">
				<EjsProgressButton @ref="ProgressButton"
										 Duration="9999999"
										 OnClick="@OnApply"
										 Content="Apply"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>
				<EjsProgressButton @ref="ClearButton"
										 Duration="9999999"
										 OnClick="@OnClear"
										 Content="Clear"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>
				<EjsProgressButton @ref="ClearAllButton"
										 Duration="9999999"
										 OnClick="@OnClearAll"
										 Content="Clear All"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>
			</div>
		</div>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>

	</div>
}

@code {


	public class Option
	{
		public string ID { get; set; }
		public string Group { get; set; }
		public string Text { get; set; }
	}

	public EjsProgressButton ProgressButton;

	public EjsProgressButton ClearButton;

	public EjsProgressButton ClearAllButton;

	public EjsMultiSelect<string[]> MultiSelect;

	public EjsDateRangePicker DateRangePicker { get; set; }

	public string[] Values
	{
		get => Widget.Filters;
	}

	public DateTime? StartDate => Widget.StartDate;
	public DateTime? EndDate => Widget.EndDate;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}


	public async Task OnClearAll(MouseEventArgs args)
	{
		await Vm.ClearAllFilters();
		await ClearAllButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnClear(MouseEventArgs args)
	{
		await Vm.ClearFilters();
		await ClearButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnApply(MouseEventArgs args)
	{
		// There is a bug when using Value and we remove the last item, so using this is more reliable.
		string text = MultiSelect.Text;
		string[] filters = text?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[] { };

		if (DateRangePicker != null)
			await Vm.ApplyAsync(filters, DateRangePicker.StartDate, DateRangePicker.EndDate);

		await ProgressButton.ProgressComplete(); // Mark completion.
	}

	public List<Option> Options = new List<Option>()
{
		  new Option(){ ID= "Person", Group = "Common", Text= "Person" },
		  new Option(){ ID= "Human", Group = "Common", Text= "Human" },
		  new Option(){ ID= "Adult", Group = "Common", Text= "Adult" },
		  new Option(){ ID= "Male", Group = "Common", Text= "Male" },
		  new Option(){ ID= "Female", Group = "Common", Text= "Female" },
		  new Option(){ ID= "Child", Group = "Common", Text= "Child" },
		  new Option(){ ID= "Father", Group = "Common", Text= "Father" },
		  new Option(){ ID= "Mother", Group = "Common", Text= "Mother" },
		  new Option(){ ID= "Son", Group = "Common", Text= "Son" },
		  new Option(){ ID= "Daughter", Group = "Common", Text= "Daughter" },
		  new Option(){ ID= "Car", Group = "Common", Text= "Car" },
		  new Option(){ ID= "Head", Group = "Body parts", Text= "Head" },
	 };

}
<style>

	.simple-filter-container {

	}

	.simple-filter-container .simple-filter-items-container {
		display: flex;
	}

	.simple-filter-container .simple-filter-items-container .simple-filter-item {
		flex-grow: 1;
		min-height: 50px;
		padding: 10px;
		margin: 10px;
	}

	.simple-filter-container .simple-filter-btn-container {
		display: block;
		padding: 7px;
		float: right;
	}

	.simple-filter-container .simple-filter-btn-container .simple-filter-btn-item {
		display:inline-flex;
	}

	@if (Widget.Settings.Orientation == SimpleFilterConfiguration.SimpleFilterOrientation.Block)
	{

	}

</style>
