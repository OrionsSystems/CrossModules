@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<SimpleFilterVm, SimpleFilterWidget>

@using Orions.Infrastructure.HyperMedia
@using Orions.Node.Common

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.SplitButtons

@using Syncfusion.EJ2.Blazor.Calendars

@if (Widget.Settings.Visible)
{
	<div class="widget-content-report">
		<SeparatorLine Settings="@Widget.TopSeparator"></SeparatorLine>
		<TitleCard Settings="Widget.TitleSettings"></TitleCard>

		<div class="simple-filter-container">
			<div class="simple-filter-items-container">
				@if (Vm.Widget.ShowTextLabelSelection)
				{
					<div class="control-styles simple-filter-item">
						<EjsMultiSelect @ref="MultiSelect"
											 TValue="string[]"
											 Value="@Vm.Filters"
											 Mode="@VisualMode.Box"
											 AllowFiltering="true"
											 AllowCustomValue="true" 
											 Placeholder="Search Filters"
											 DataSource="@Vm.Options">

							<MultiSelectFieldSettings GroupBy="Group" Text="Text" Value="ID"></MultiSelectFieldSettings>
						</EjsMultiSelect>
					</div>
				}

				@if (Vm.Widget.ShowDateTimeSelection)
				{
					<div class="control-styles simple-filter-item">
						<EjsDateRangePicker @ref="DateRangePicker"
													@bind-StartDate="@Vm.StartDate"
												  @bind-EndDate="@Vm.EndDate"

												  Min="@(new DateTime(2019, 10, 1))"
												  Max="@(new DateTime(2019, 12, 31))"
												  Placeholder="Select Time Range"></EjsDateRangePicker>
					</div>
				}

			</div>

			<div class="button-group-section button-group-container">
				<div id="button-group-control">
					<div class="row">
						@foreach(var periodDefinition in Vm.AvailablePeriods)
						{ 
							<Syncfusion.EJ2.Blazor.Buttons.EjsButton Content="@periodDefinition.ToString()" 
																				  IsPrimary="true" CssClass="e-outline" OnClick="@(_ => @Vm.OnPeriodClick(periodDefinition))"/>
						}
					</div>
				</div>
			</div>

			<div class="simple-filter-btn-container">

				<EjsProgressButton @ref="ProgressButton"
										 Duration="9999999"
										 OnClick="@OnApply"
										 Content="Apply"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>
				<EjsProgressButton @ref="ClearButton"
										 Duration="9999999"
										 OnClick="@OnClear"
										 Content="Clear"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>

				@*<EjsProgressButton @ref="ClearAllButton"
										 Duration="9999999"
										 OnClick="@OnClearAll"
										 Content="Clear All"
										 CssClass="simple-filter-btn-item">
					<ProgressButtonEvents></ProgressButtonEvents>
				</EjsProgressButton>*@

			</div>
		</div>

		<SeparatorLine Settings="@Widget.BottomSeparator"></SeparatorLine>

	</div>
}

@code {

	public EjsProgressButton ProgressButton;

	public EjsProgressButton ClearButton;

	public EjsProgressButton ClearAllButton;

	public EjsMultiSelect<string[]> MultiSelect;

	public EjsDateRangePicker DateRangePicker { get; set; }

	public async Task OnClearAll(MouseEventArgs args)
	{
		await Vm.ClearAllFilters();
		await ClearAllButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnClear(MouseEventArgs args)
	{
		await Vm.ClearFilters();
		await ClearButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnApply(MouseEventArgs args)
	{
		// There is a bug when using Value and we remove the last item, so using this is more reliable.
		string text = MultiSelect.Text;
		string[] filters = text?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[] { };

		this.Vm.Filters = filters;

		await Vm.ApplyAsync();
		await ProgressButton.ProgressComplete(); // Mark completion.
	}


}
<style>

	.simple-filter-container {

	}

	.simple-filter-container .simple-filter-items-container {
		display: flex;
	}

	.simple-filter-container .simple-filter-items-container .simple-filter-item {
		flex-grow: 1;
		min-height: 50px;
		padding: 10px;
		margin: 10px;
	}

	.simple-filter-container .simple-filter-btn-container {
		display: block;
		padding: 7px;
		float: right;
	}

	.simple-filter-container .simple-filter-btn-container .simple-filter-btn-item {
		display:inline-flex;
	}

	@if (Widget.Settings.Orientation == SimpleFilterConfiguration.SimpleFilterOrientation.Block)
	{

	}

</style>
