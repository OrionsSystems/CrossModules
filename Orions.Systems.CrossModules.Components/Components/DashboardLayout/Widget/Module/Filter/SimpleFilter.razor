@namespace Orions.Systems.CrossModules.Components

@inherits DashboardComponent<SimpleFilterVm, SimpleFilterWidget>

@using Orions.Infrastructure.HyperMedia
@using Orions.Node.Common

@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.SplitButtons

@using Syncfusion.EJ2.Blazor.Calendars

	<div class="widget-content-report-piechart">

		<h3>@Vm.Widget.Label</h3>

		@if (Vm.Widget.ShowTextLabelSelection)
		{

			<div class="control-styles">
				<EjsMultiSelect @ref="MultiSelect" TValue="string[]" Value="@Values"
									 Mode="@VisualMode.Box" AllowFiltering="true" Placeholder="Search Filters" DataSource="@Options">

					<MultiSelectFieldSettings GroupBy="Group" Text="Text" Value="ID"></MultiSelectFieldSettings>
				</EjsMultiSelect>
			</div>
		}

		@if (Vm.Widget.ShowDateTimeSelection)
		{
			<div class="control-styles">
				<EjsDateRangePicker @ref="DateRangePicker" StartDate="@StartDate" EndDate="@EndDate" Placeholder="Select Time Range"></EjsDateRangePicker>
			</div>
		}

	<div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
		<EjsProgressButton @ref="ProgressButton" Duration="9999999" OnClick="@OnApply" Content="Apply" IsPrimary="true">
			<ProgressButtonEvents></ProgressButtonEvents>
		</EjsProgressButton>
		<EjsProgressButton @ref="ClearButton" Duration="9999999" OnClick="@OnClear" Content="Clear" IsPrimary="true">
			<ProgressButtonEvents></ProgressButtonEvents>
		</EjsProgressButton>
		<EjsProgressButton @ref="ClearAllButton" Duration="9999999" OnClick="@OnClearAll" Content="Clear (All)" IsPrimary="true">
			<ProgressButtonEvents></ProgressButtonEvents>
		</EjsProgressButton>
	</div>

	</div>

@code {

	public class Option
	{
		public string ID { get; set; }
		public string Group { get; set; }
		public string Text { get; set; }
	}

	public EjsProgressButton ProgressButton;

	public EjsProgressButton ClearButton;

	public EjsProgressButton ClearAllButton;

	public EjsMultiSelect<string[]> MultiSelect;

	public EjsDateRangePicker DateRangePicker { get; set; }

	public string[] Values
	{
		get => Widget.Filters;
	}

	public DateTime? StartDate => Widget.StartDate;
	public DateTime? EndDate => Widget.EndDate;

	public async Task OnClearAll(MouseEventArgs args)
	{
		await Vm.ClearAllFilters();
		await ClearAllButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnClear(MouseEventArgs args)
	{
		await Vm.ClearFilters();
		await ClearButton.ProgressComplete(); // Mark completion.
	}

	public async Task OnApply(MouseEventArgs args)
	{
		// There is a bug when using Value and we remove the last item, so using this is more reliable.
		string text = MultiSelect.Text;
		string[] filters = text?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[] { };

		if (DateRangePicker != null)
			await Vm.ApplyAsync(filters, DateRangePicker.StartDate, DateRangePicker.EndDate);

		await ProgressButton.ProgressComplete(); // Mark completion.
	}

	public List<Option> Options = new List<Option>()
	{
		  new Option(){ ID= "Person", Group = "Common", Text= "Person" },
		  new Option(){ ID= "Human", Group = "Common", Text= "Human" },
		  new Option(){ ID= "Adult", Group = "Common", Text= "Adult" },
		  new Option(){ ID= "Male", Group = "Common", Text= "Male" },
		  new Option(){ ID= "Female", Group = "Common", Text= "Female" },
		  new Option(){ ID= "Child", Group = "Common", Text= "Child" },
		  new Option(){ ID= "Father", Group = "Common", Text= "Father" },
		  new Option(){ ID= "Mother", Group = "Common", Text= "Mother" },
		  new Option(){ ID= "Son", Group = "Common", Text= "Son" },
		  new Option(){ ID= "Daughter", Group = "Common", Text= "Daughter" },
		  new Option(){ ID= "Car", Group = "Common", Text= "Car" },
		  new Option(){ ID= "Head", Group = "Body parts", Text= "Head" },
	 };

}
