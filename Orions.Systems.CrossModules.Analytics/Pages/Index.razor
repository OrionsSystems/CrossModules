@page "/"
@inherits BaseOrionsComponent;

@using Orions.Systems.CrossModules.Components;
@using Orions.Systems.CrossModules.Components.Components;
@using Orions.CrossModules.Data;

@using Orions.Infrastructure.HyperMedia;
@using Telerik.Blazor;
@using Telerik.Blazor.Components;

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h1>Analytics</h1>


<div class="container-fluid">

	<div class="row">
		<div class="col-md-5">
			<TelerikChart>
				<ChartSeriesItems>
					<ChartSeries Type="ChartSeriesType.Pie"
								 Data="@labelsChartData"
								 VisibleInLegendField="@nameof(TagLabelsPieChartData.ShouldShowInLegend)"
								 Field="@nameof(TagLabelsPieChartData.Count)"
								 CategoryField="@nameof(TagLabelsPieChartData.Label)">
					</ChartSeries>
				</ChartSeriesItems>
				<ChartTitle Text="Items per Label">
				</ChartTitle>
				<ChartLegend Position="ChartLegendPosition.Right">
				</ChartLegend>
			</TelerikChart>
		</div>
		<div class="col-md-5">
			<KendoTreemap TreeMapId="@treemapId" TreeMapData="@tagTreemapData">
			</KendoTreemap>
		</div>
		<div class="col-md-2">
		</div>
	</div>

</div>

<div>
	<TelerikChart>
		<ChartSeriesItems>
			<ChartSeries Type="ChartSeriesType.Column"
						 Data="@tagTimingData"
						 Field="@nameof(TagStreamTimeChartData.Count)"
						 CategoryField="@nameof(TagStreamTimeChartData.Time)">
			</ChartSeries>
		</ChartSeriesItems>
		<ChartTitle Text="Items per Time">
		</ChartTitle>
		<ChartLegend Position="ChartLegendPosition.Right">
		</ChartLegend>
	</TelerikChart>
</div>


@functions
{

	private string treemapId = "tagsTreemap";

	private List<TagLabelsPieChartData> labelsChartData = new List<TagLabelsPieChartData>();

	public List<TagStreamTimeChartData> tagTimingData = new List<TagStreamTimeChartData>();

	public TreeMapItem[] tagTreemapData { get; set; } = new TreeMapItem[0];

	private string Request { get; set; }


	protected override async Task OnInitializedAsync()
	{
		var vizRequest = GetObjectFromQueryString<CrossModuleVisualizationRequest>("request");

		await NodeStatisticsManager.Instance.InitDataAsync(vizRequest);

		labelsChartData = NodeStatisticsManager.Instance.TagLabelsData;

		tagTimingData = NodeStatisticsManager.Instance.TagTimingData;

		tagTreemapData = NodeStatisticsManager.Instance.TagTreemapData.ToArray();

		await base.OnInitializedAsync();

	}

}